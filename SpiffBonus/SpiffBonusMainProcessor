/**
 * Cardinal Payroll System - Spiff/Bonus Main Processor
 * Contains the main function orchestrating the Spiff/Bonus update process.
 */

/**
 * Main processing function triggered by the "Spiff/Bonus" action.
 * Gets data, calculates the bonus, and updates the technician sheet with the redesigned layout.
 *
 * @param {Sheet} techSheet The technician's sheet object.
 * @param {string} technicianName The name of the technician being processed.
 * @param {Sheet} spiffBonusSheet The 'Spiff/Bonus' sheet object.
 * @param {Sheet} ratesSheet The 'Hourly + Spiff Pay' sheet where the action was triggered.
 * @param {number} triggerRow The row number in ratesSheet where the action was triggered.
 * @param {number} triggerCol The column number in ratesSheet where the action was triggered.
 */
function processSpiffAndBonus(techSheet, technicianName, spiffBonusSheet, ratesSheet, triggerRow, triggerCol) {
  var ui = SpreadsheetApp.getUi();
  var summaryInfo = [];

  try {
    // --- 1. Validate inputs ---
    if (!techSheet || !technicianName || !spiffBonusSheet || !ratesSheet || !triggerRow || !triggerCol) {
      console.error("processSpiffAndBonus: Missing required parameters");
      setActionStatus(ratesSheet, triggerRow, triggerCol, 'Error: Missing Params');
      return;
    }

    console.log(`Starting Spiff/Bonus processing for: ${technicianName}`);

    // --- 2. Get Header Map ---
    var headerMap = getSpiffBonusHeaderMap(spiffBonusSheet);
    if (!headerMap || !headerMap.soldBy || !headerMap.assignedTechnician || 
        !headerMap.customerName || !headerMap.jobBusinessUnit || 
        !headerMap.completionDate || !headerMap.bonusAmount) {
      console.error("Failed to get valid header map from Spiff/Bonus sheet");
      ui.alert(`Error: Could not find expected columns in the Spiff/Bonus sheet`);
      setActionStatus(ratesSheet, triggerRow, triggerCol, 'Error: Headers');
      return;
    }

    // --- 3. Get all data from Spiff/Bonus sheet ---
    var spiffBonusData = spiffBonusSheet.getDataRange().getValues();

    // --- 4. Collect customer data for the technician ---
    var customerData = [];
    var totalSpiffAmount = 0;
    var tz = Session.getScriptTimeZone() || 'America/New_York';
    
    // Filter data for rows where 'Sold By' matches or is empty and 'Assigned Tech' includes this technician
    for (var i = 1; i < spiffBonusData.length; i++) {
      var row = spiffBonusData[i];
      var soldBy = row[headerMap.soldBy - 1] || "";
      var assignedTech = row[headerMap.assignedTechnician - 1] || "";
      
      // Check if this row applies to this technician
      var isMatch = false;
      if (soldBy === technicianName && assignedTech.includes(technicianName)) {
        isMatch = true;
      } 
      else if ((soldBy === "" || !soldBy) && assignedTech.includes(technicianName)) {
        isMatch = true;
      }
      
      // Skip if not a match
      if (!isMatch) continue;
      
      // Extract data using the map
      var custName = row[headerMap.customerName - 1] || "";
      var busUnit = row[headerMap.jobBusinessUnit - 1] || "";
      var dateVal = row[headerMap.completionDate - 1] || "";
      var notesVal = row[headerMap.itemName - 1] || ""; // Using item name as notes
      
      // Extract bonus amount (handle different formats)
      var bonusAmountRaw = row[headerMap.bonusAmount - 1];
      var bonusAmt = 0;
      
      if (typeof bonusAmountRaw === 'string' && bonusAmountRaw.includes('$')) {
        bonusAmt = parseFloat(bonusAmountRaw.replace(/[^0-9.-]+/g,''));
      } else {
        bonusAmt = parseFloat(bonusAmountRaw || 0);
      }
      
      // Add to customer data if valid amount
      if (!isNaN(bonusAmt) && bonusAmt > 0) {
        totalSpiffAmount += bonusAmt;
        
        customerData.push({
          customerName: custName,
          jobBusinessUnit: busUnit,
          completionDate: dateVal,
          commission: bonusAmt,
          notes: notesVal
        });
      }
    }
    
    // --- 5. Find customer data section ---
    var customerHeaderRow = findSpiffCustomerDataSection(techSheet);
    if (customerHeaderRow <= 0) {
      console.error(`Could not find Customer section in ${technicianName}'s sheet`);
      setActionStatus(ratesSheet, triggerRow, triggerCol, 'Error: No Customer Section');
      return;
    }
    
    // --- 6. Clear existing Spiff rows BEFORE updating summary ---
    var rowsCleared = clearSpiffDataSection(techSheet, customerData);
    console.log(`Cleared ${rowsCleared} existing spiff rows before updating`);
    
    // --- 7. Update technician's top summary AFTER clearing rows ---
    updateTopSummarySpiffs(techSheet, totalSpiffAmount, customerData.length);
    
    // --- 8. Write new Spiff data ---
    writeSpiffDataToSheet(techSheet, customerHeaderRow, customerData);

    // --- 9. Create summary for popup ---
    summaryInfo.push("SPIFF Bonus Update for: " + technicianName);
    summaryInfo.push("Total Calculated SPIFF: $" + totalSpiffAmount.toFixed(2));
    summaryInfo.push("Number of SPIFF Entries: " + customerData.length);
    summaryInfo.push("Rows Cleared: " + rowsCleared);
    
    if (customerData.length > 0) {
      summaryInfo.push("\nSPIFF DETAILS:");
      customerData.forEach(function(entry, index) {
        var formattedDate = formatDate(entry.completionDate, 'MM/dd/yyyy', tz);
        
        summaryInfo.push("\nEntry #" + (index + 1) + ":");
        summaryInfo.push("• Customer: " + (entry.customerName || "N/A"));
        summaryInfo.push("• Unit: " + (entry.jobBusinessUnit || "N/A"));
        summaryInfo.push("• Date: " + formattedDate);
        summaryInfo.push("• Amount: $" + (entry.commission || 0).toFixed(2));
      });
    }
    
    ui.alert(summaryInfo.join("\n"));

    // --- 10. Set final status ---
    console.log(`Successfully processed Spiff/Bonus for: ${technicianName}`);
    setActionStatus(ratesSheet, triggerRow, triggerCol, 'Complete');

  } catch (e) {
    console.error(`Error during processSpiffAndBonus: ${e.message}`);
    ui.alert(`An error occurred processing Spiff/Bonus for ${technicianName}`);
    setActionStatus(ratesSheet, triggerRow, triggerCol, 'Error');
  }
} 