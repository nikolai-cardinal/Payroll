/**
* Cardinal Payroll System - Spiff/Bonus Utilities
* Contains general helper functions used by the Spiff/Bonus logic.
*/

/**
* Finds the first row within a specified range that exactly matches the given text in a specific column.
* Search is case-insensitive and trims whitespace.
*
* @param {Sheet} sheet - The sheet object to search in.
* @param {string} textToFind - The text to search for.
* @param {number} column_one_indexed - The 1-based column index to search within.
* @param {number} [startRow=1] - Optional 1-based start row for the search.
* @param {number} [endRow] - Optional 1-based end row for the search (defaults to sheet's last row).
* @param {boolean} [allowPartialMatch=false] - Whether to allow partial matches.
* @return {number} The 1-based row number where the text was found, or -1 if not found.
*/
function findRowWithText(sheet, textToFind, column_one_indexed, startRow, endRow, allowPartialMatch) {
  if (!sheet || !textToFind || !column_one_indexed || column_one_indexed < 1) {
    console.error("findRowWithText: Invalid parameters. Requires sheet, textToFind, and valid column_one_indexed.");
    return -1;
  }
  var searchCol = column_one_indexed;
  var begin = startRow || 1;
  var maxRow = endRow || sheet.getLastRow();
  var isPartialMatch = allowPartialMatch || false;
 
  if (begin > maxRow) {
      console.log(`findRowWithText: Start row (${begin}) is after end row (${maxRow}). No search performed.`);
      return -1;
  }
 
  // Optimize by getting values in a batch if searching multiple rows
  var numRowsToSearch = maxRow - begin + 1;
  if (numRowsToSearch <= 0) return -1;
 
  try {
    var range = sheet.getRange(begin, searchCol, numRowsToSearch, 1);
    var values = range.getValues();
    var searchTextLower = textToFind.trim().toLowerCase();
 
    for (var i = 0; i < values.length; i++) {
      var cellValue = values[i][0];
      if (cellValue && typeof cellValue === 'string') {
        var cellLower = cellValue.trim().toLowerCase();
        
        if ((isPartialMatch && cellLower.includes(searchTextLower)) || 
            (!isPartialMatch && cellLower === searchTextLower)) {
          return begin + i; // Return the 1-based row index
        }
      }
    }
  } catch (e) {
      console.error(`findRowWithText: Error getting range or values (Row ${begin}, Col ${searchCol}, NumRows ${numRowsToSearch}): ${e.message}`);
      // Fallback to row-by-row if batch fails (though unlikely for single column read)
      for (var r = begin; r <= maxRow; r++) {
          try {
              var val = sheet.getRange(r, searchCol).getValue();
              if (val && typeof val === 'string') {
                var valLower = val.trim().toLowerCase();
                if ((isPartialMatch && valLower.includes(searchTextLower)) || 
                    (!isPartialMatch && valLower === searchTextLower)) {
                  return r;
                }
              }
          } catch (singleRowError) {
              console.error(`findRowWithText: Error reading single cell (Row ${r}, Col ${searchCol}): ${singleRowError.message}`);
              // Potentially break or continue depending on desired error handling
          }
      }
  }
 
  return -1; // Not found
}
 
 
/**
* Attempts to parse a value (string, number, or Date object) into a valid JavaScript Date object.
* Handles common date formats like MM/DD/YYYY and ISO strings.
*
* @param {*} input - The value to parse (can be a string, number representing milliseconds, or a Date object).
* @return {Date|null} A valid Date object if parsing is successful, otherwise null.
*/
function tryParseDate(input) {
  if (!input) return null;
 
  // If it's already a valid Date object
  if (input instanceof Date && !isNaN(input.getTime())) {
    return input;
  }
 
  try {
    // Try direct parsing (handles ISO strings, potentially other formats)
    var d = new Date(input);
    if (!isNaN(d.getTime())) return d;
 
    // If it's a string, try common spreadsheet format (e.g., M/D/YYYY)
    if (typeof input === 'string') {
      var parts = input.split(/[/\-]/); // Split by slash, backslash, or hyphen
      if (parts.length === 3) {
        // Attempt MM/DD/YYYY or M/D/YYYY
        var year = parseInt(parts[2], 10);
        var month = parseInt(parts[0], 10);
        var day = parseInt(parts[1], 10);
 
        // Basic sanity check for year (e.g., 4 digits)
        if (year > 1000 && year < 3000 && month >= 1 && month <= 12 && day >= 1 && day <= 31) {
          // Note: JavaScript Date constructor month is 0-indexed
          d = new Date(year, month - 1, day);
          // Double-check that the constructed date matches the input parts (handles invalid dates like 2/30)
          if (!isNaN(d.getTime()) && d.getFullYear() === year && (d.getMonth() + 1) === month && d.getDate() === day) {
             return d;
          }
        }
      }
    }
 
    // Could add more specific parsing logic here if needed (e.g., for DD-MMM-YYYY)
 
  } catch(e) {
    // Ignore parsing errors, will return null below
    console.log(`tryParseDate: Error parsing input '${input}': ${e.message}`);
  }
 
  console.log(`tryParseDate: Could not parse '${input}' into a valid Date object.`);
  return null;
}
 
/**
* Formats a date value for display, handling various input types.
* @param {*} dateValue - The date to format (Date object, string, etc.)
* @param {string} [format='MM/dd/yyyy'] - The format to use (Utilities.formatDate pattern)
* @param {string} [timezone] - The timezone to use (defaults to script timezone)
* @return {string} The formatted date string or empty string if invalid
*/
function formatDate(dateValue, format, timezone) {
   if (!dateValue) return "";
   
   var dateObj = tryParseDate(dateValue);
   if (!dateObj) return dateValue.toString(); // Return original if parsing fails
   
   var fmt = format || 'MM/dd/yyyy'; // Default to MM/DD/YYYY format
   var tz = timezone || Session.getScriptTimeZone() || 'America/New_York';
   
   try {
     return Utilities.formatDate(dateObj, tz, fmt);
   } catch (e) {
     console.error("Error formatting date: " + e.message);
     return dateValue.toString(); // Fallback to string representation
   }
}
 
/**
* Converts a column number to letter reference (e.g., 1 -> A, 27 -> AA)
* @param {number} columnNumber - The 1-based column number to convert
* @return {string} The corresponding column letter(s)
*/
function columnToLetter(columnNumber) {
   if (!columnNumber || columnNumber < 1) return "A";
   
   var temp = columnNumber;
   var letter = '';
   
   while (temp > 0) {
     var modulo = (temp - 1) % 26;
     letter = String.fromCharCode(65 + modulo) + letter;
     temp = Math.floor((temp - modulo - 1) / 26);
   }
   
   return letter;
}
 
/**
* Returns a standard mapping object for columns in the "Hourly + Spiff Pay" sheet.
* This helps centralize the column definitions used across different functions.
*
* @return {Object} An object with keys for common fields (nameColumn, actionColumn, etc.)
*                  and values representing their 1-based column index and the data start row.
*/
function getRatesSheetMapping() {
  // These indices correspond to the columns in the 'Hourly + Spiff Pay' sheet
  return {
    nameColumn: 1,       // Column A: Technician Name
    positionColumn: 2,   // Column B: Position
    rateColumn: 4,       // Column D: Base Rate (example, might not be used by Spiff directly)
    actionColumn: 7,     // Column G: Action Dropdown
    dataStartRow: 3      // Row number where the actual technician data begins (below headers)
  };
}
 
/**
* Resets the "Action" dropdown to "Ready" in the 'Hourly + Spiff Pay' sheet,
* typically used after an error occurs during processing.
*
* @param {Sheet} ratesSheet - The 'Hourly + Spiff Pay' sheet object.
* @param {number} row - The 1-based row index containing the dropdown.
* @param {number} col - The 1-based column index containing the dropdown.
*/
function resetActionDropdown(ratesSheet, row, col) {
  if (!ratesSheet || !row || !col) {
    console.warn("resetActionDropdown called with invalid parameters.");
    return;
  }
  try {
    ratesSheet.getRange(row, col).setValue("Ready");
    console.log(`Reset action dropdown to 'Ready' for row ${row}, col ${col}.`);
  } catch(e) {
    console.error(`Failed to reset action dropdown for row ${row}, col ${col}: ${e.message}`);
    // SpreadsheetApp.getUi().alert("Failed to reset status dropdown for row " + row);
  }
}

/**
* Checks if a technician is Class 1 by examining column C in the Hourly + Spiff Pay sheet.
* @param {string} technicianName - The name of the technician to check
* @param {Sheet} [ratesSheet] - Optional. The Hourly + Spiff Pay sheet. If not provided, it will be fetched.
* @return {boolean} True if the technician is Class 1, false otherwise
*/
function isTechnicianClass1(technicianName, ratesSheet) {
  if (!technicianName) return false;
  
  try {
    // Get the rates sheet if not provided
    if (!ratesSheet) {
      const ss = SpreadsheetApp.getActiveSpreadsheet();
      ratesSheet = ss.getSheetByName('Hourly + Spiff Pay');
      if (!ratesSheet) {
        console.error("isTechnicianClass1: Hourly + Spiff Pay sheet not found");
        return false;
      }
    }
    
    // Get mapping to find technician row
    var ratesMapping = getRatesSheetMapping();
    
    // Find the technician row
    var techRow = findTechnicianRow(ratesSheet, technicianName, ratesMapping.dataStartRow);
    if (techRow <= 0) {
      console.warn(`isTechnicianClass1: Could not find row for technician ${technicianName}`);
      return false;
    }
    
    // Get the value in column C (position/class column)
    // Column C is index 3
    var positionValue = ratesSheet.getRange(techRow, 3).getValue();
    
    // Check if it contains "Class 1" (case insensitive)
    if (positionValue && typeof positionValue === 'string' && 
        positionValue.toString().toLowerCase().includes('class 1')) {
      console.log(`Technician ${technicianName} is Class 1 - will skip Spiff/Bonus processing`);
      return true;
    }
    
    return false;
  } catch (e) {
    console.error(`Error in isTechnicianClass1 for ${technicianName}: ${e.message}`);
    return false; // Default to not Class 1 in case of error
  }
} 