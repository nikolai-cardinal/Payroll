/**
* Payroll System - Yard Sign Main
* Main entry points for yard sign processing.
*/

/**
* Initializes the Yard Sign module.
* This should be called before any other functions in this module.
*/
function initYardSign() {
  // This function ensures that the module is properly initialized
  console.log("Yard Sign module initialized");
  return true;
}

/**
* Sets the status in the Action column of the rates sheet.
* Local version to avoid cross-file reference issues.
* @param {Sheet} ratesSheet The 'Hourly + Spiff Pay' sheet object.
* @param {number} row The 1-based row index.
* @param {number} col The 1-based column index (should be the Action column).
* @param {string} status The status to set (e.g., 'Complete', 'Error', 'Processing...').
*/
function yardSignSetActionStatus(ratesSheet, row, col, status) {
  if (!ratesSheet || !row || !col || !status) {
    console.error("yardSignSetActionStatus: Invalid parameters provided.");
    return;
  }
  
  try {
    // Make sure status is one of the allowed values for the data validation
    var allowedValues = ["Timesheet", "Spiff/Bonus", "Yard Sign", "PBP", "Complete", "Ready", "⚠️ Error"];
    
    // Default to "Ready" if status isn't in the allowed list
    if (allowedValues.indexOf(status) === -1) {
      if (status.startsWith("Error")) {
        status = "⚠️ Error";
      } else if (status.startsWith("Complete")) {
        status = "Complete";
      } else {
        status = "Ready";
      }
    }
    
    // Get the range first, then set the value to avoid validation issues
    var range = ratesSheet.getRange(row, col);
    SpreadsheetApp.flush(); // Force any pending changes to complete
    range.setValue(status);
  } catch (e) {
    console.error(`Failed to set status to '${status}' at row ${row}, col ${col}: ${e.message}`);
    // No need for alternative approach since we've already handled validation
  }
}

/**
* Updates yard sign data for a specific technician.
* This is called from the main onEdit function when "Yard Sign" is selected.
* @param {string} techName - The technician's name.
* @param {number} row - The row in the rates sheet where the action was triggered.
* @param {number} column - The column in the rates sheet where the action was triggered.
*/
function updateYardSignForTechnician(techName, row, column) {
  // Initialize the module
  initYardSign();
  
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var ratesSheet = ss.getSheetByName('Hourly + Spiff Pay');
  var ui = SpreadsheetApp.getUi();
  var summaryInfo = []; // Array to collect detailed information for the popup
  
  try {
    // First, set status to "Processing..." using our local function
    yardSignSetActionStatus(ratesSheet, row, column, 'Processing...');
    
    // Get or create yard sign sheet with proper structure
    var yardSignSheet;
    try {
      yardSignSheet = ensureYardSignSheetExists();
    } catch (sheetError) {
      console.error("Error ensuring Yard Sign sheet exists: " + sheetError.message);
      yardSignSetActionStatus(ratesSheet, row, column, 'Error');
      ui.alert("Error: Could not ensure Yard Sign sheet exists. " + sheetError.message);
      return;
    }
    
    // Log the name and existence of the sheet
    console.log("Found Yard Sign sheet: " + yardSignSheet.getName() + 
               " with " + yardSignSheet.getLastRow() + " rows and " + 
               yardSignSheet.getLastColumn() + " columns");
    
    // Get technician's sheet
    var techSheet = ss.getSheetByName(techName);
    if (!techSheet) {
      console.error("Technician sheet not found for: " + techName);
      yardSignSetActionStatus(ratesSheet, row, column, 'Error');
      ui.alert("Error: Technician sheet not found for " + techName);
      return;
    }
    
    // Calculate yard sign entries for this technician
    // Wrap in try/catch to prevent errors
    var result;
    try {
      // Skip validation here - calculateYardSignEntries will handle missing columns
      result = calculateYardSignEntries(techName, yardSignSheet);
    } catch (calcError) {
      console.error("Error calculating yard sign entries: " + calcError.message);
      yardSignSetActionStatus(ratesSheet, row, column, 'Error');
      ui.alert("Error calculating yard sign entries: " + calcError.message);
      return;
    }
    
    // If no entries found, show message
    if (!result || !result.entries || result.entries.length === 0) {
      console.log("No yard sign entries found for: " + techName);
      yardSignSetActionStatus(ratesSheet, row, column, 'Complete');
      ui.alert("No yard sign entries found for " + techName + " in the Yard Sign sheet for this period.");
      return;
    }
    
    // Write data to technician sheet
    // Wrap in try/catch to prevent errors
    try {
      writeYardSignDataToSheet(techSheet, result.entries, result.totalAmount);
    } catch (writeError) {
      console.error("Error writing yard sign data: " + writeError.message);
      yardSignSetActionStatus(ratesSheet, row, column, 'Error');
      ui.alert("Error writing yard sign data: " + writeError.message);
      return;
    }
    
    // Update status
    yardSignSetActionStatus(ratesSheet, row, column, 'Complete');
    
    console.log("Yard Sign update complete for: " + techName + 
               " - " + result.entries.length + " entries, $" + result.totalAmount.toFixed(2));
    
    // --- Prepare and Show Summary Popup ---
    summaryInfo.push("Yard Sign Update for: " + techName);
    summaryInfo.push("Total Yard Signs: " + result.entries.length);
    summaryInfo.push("Fixed Amount per Yard Sign: $25.00");
    summaryInfo.push("Total Amount: $" + (result.entries.length * 25).toFixed(2));
    
    summaryInfo.push("\nYARD SIGN DETAILS:");
    
    for (var k = 0; k < result.entries.length; k++) {
      var entry = result.entries[k];
      summaryInfo.push("\nEntry #" + (k+1) + ":");
      summaryInfo.push("• Customer: " + entry.customerName);
      
      // Format date
      var dateDisplay = "";
      if (entry.installDate instanceof Date) {
        dateDisplay = Utilities.formatDate(entry.installDate, Session.getScriptTimeZone(), "MM/dd/yyyy");
      } else {
        dateDisplay = entry.installDate || "N/A";
      }
      
      summaryInfo.push("• Date: " + dateDisplay);
      summaryInfo.push("• Job #: " + entry.location);
      summaryInfo.push("• Business Unit: " + (entry.businessUnit || "N/A"));
      summaryInfo.push("• Amount: $25.00");
    }
    
    ui.alert(summaryInfo.join("\n"));
    
  } catch (e) {
    console.error("Error in updateYardSignForTechnician: " + e.message);
    if (ratesSheet && row && column) {
      yardSignSetActionStatus(ratesSheet, row, column, 'Error');
    }
    ui.alert("Error updating yard signs: " + e.message);
  }
}

/**
* Processes yard signs for all technicians.
* Called from the custom menu.
*/
function processAllYardSigns() {
  // Initialize the module
  initYardSign();
  
  try {
    var ui = SpreadsheetApp.getUi();
    var result = ui.alert(
      'Process Yard Signs',
      'This will process yard sign data for all technicians. Continue?',
      ui.ButtonSet.YES_NO
    );
    
    if (result !== ui.Button.YES) {
      return;
    }
    
    // Make sure the Yard Sign sheet exists and has the proper structure
    try {
      var yardSignSheet = ensureYardSignSheetExists();
      console.log("Confirmed Yard Sign sheet exists with proper structure");
    } catch (sheetError) {
      console.error("Error with Yard Sign sheet: " + sheetError.message);
      ui.alert('Error', "Could not ensure Yard Sign sheet exists with proper structure. Error: " + sheetError.message, ui.ButtonSet.OK);
      return;
    }
    
    // Show processing message
    var statusMessage = ui.alert(
      'Processing',
      'Processing yard signs for all technicians. This may take a while.\n\nClick OK to continue in the background.',
      ui.ButtonSet.OK
    );
    
    // Call the utility function directly instead of through YardSignUtilities namespace
    var processResult = processAllYardSignsUtility(function(status) {
      console.log(status); // Log status updates
    });
    
    // Prepare detailed summary
    var summaryMessage = [];
    
    summaryMessage.push("YARD SIGN PROCESSING COMPLETE");
    
    if (processResult.success) {
      summaryMessage.push("\nSUMMARY:");
      
      // Extract information from the processResult
      var processed = processResult.processed || [];
      var totalCount = processResult.totalCount || 0;
      var totalAmount = totalCount * 25; // Fixed $25 per yard sign
      
      summaryMessage.push("• Total Technicians Processed: " + processed.length);
      summaryMessage.push("• Total Yard Signs Processed: " + totalCount);
      summaryMessage.push("• Total Amount: $" + totalAmount.toFixed(2));
      
      // If we have technician-specific details
      if (processed.length > 0) {
        summaryMessage.push("\nDETAILS BY TECHNICIAN:");
        
        for (var i = 0; i < processed.length; i++) {
          var techInfo = processed[i];
          var techAmount = techInfo.count * 25; // Fixed $25 per yard sign
          
          summaryMessage.push("\n" + techInfo.name + ":");
          summaryMessage.push("• Yard Signs: " + techInfo.count);
          summaryMessage.push("• Amount: $" + techAmount.toFixed(2));
        }
      }
      
      // If we have errors or skips
      if (processResult.errors && processResult.errors.length > 0) {
        summaryMessage.push("\nERRORS:");
        for (var j = 0; j < processResult.errors.length; j++) {
          summaryMessage.push("• " + processResult.errors[j]);
        }
      }
      
      // Show the complete detailed summary
      ui.alert('Success', summaryMessage.join("\n"), ui.ButtonSet.OK);
    } else {
      // Just show the error message
      ui.alert('Error', processResult.message, ui.ButtonSet.OK);
    }
  } catch (e) {
    console.error("Error in processAllYardSigns: " + e.message);
    SpreadsheetApp.getUi().alert("Error: " + e.message);
  }
} 