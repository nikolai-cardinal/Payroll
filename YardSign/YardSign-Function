/**
 * Payroll System - Yard Sign Functionality Documentation
 * 
 * This document explains how the Yard Sign functionality works in the Payroll system.
 */

/**
 * OVERVIEW:
 * The Yard Sign module processes yard sign installations completed by technicians,
 * calculates payments, and updates each technician's payroll sheet with the correct amounts.
 * Each yard sign installation is worth a fixed $25.00 payment to the technician.
 */

/**
 * TRIGGERS AND ENTRY POINTS:
 * 
 * 1. Manual Trigger - Menu Item:
 *    - User clicks "All Yard Signs" in the "Technician Tools" menu
 *    - This calls menuProcessAllYardSigns() in Main.js
 *    - Which then calls processAllYardSigns() after confirmation
 *    - On completion, displays a detailed summary popup of all processed yard signs
 * 
 * 2. Manual Trigger - Action Column:
 *    - User selects "Yard Sign" in column G (Action column) of "Hourly + Spiff Pay" sheet
 *    - This triggers the onEdit() function in Main.js
 *    - Which then calls updateYardSignForTechnician() for the specific technician
 *    - On completion, displays a detailed summary popup for that technician
 */

/**
 * WORKFLOW STEP BY STEP:
 * 
 * A.
 *  Initialization:
 *    1. The initYardSign() function is called to initialize the module
 *    2. The Yard Sign sheet is validated or created with ensureYardSignSheetExists()
 *    3. Required columns are checked (Customer Name, Job #, Business Unit, Completion Date, Jobs Total, Tags, Assigned Technicians)
 * B. For Single Technician (updateYardSignForTechnician):
 *    1. Sets Action status to "Processing..."
 *    2. Gets the Yard Sign sheet and validates it
 *    3. Gets the technician's sheet
 *    4. Calls calculateYardSignEntries() to find and calculate entries for this technician
 *    5. Writes data to technician's sheet with writeYardSignDataToSheet()
 *    6. Updates status to "Complete" or "Error"
 *    7. Displays a summary popup with details about the processed yard signs
 * 
 * C. For All Technicians (processAllYardSigns):
 *    1. Shows confirmation dialog
 *    2. Validates Yard Sign sheet
 *    3. Shows processing dialog
 *    4. Calls processAllYardSignsUtility() which loops through all technicians
 *    5. For each technician, performs similar steps as in single technician process
 *    6. Shows a comprehensive completion message with details on all processed yard signs
 */

/**
 * KEY FUNCTIONS AND THEIR ROLES:
 * 
 * 1. YardSignMain.js:
 *    - initYardSign(): Initializes the module
 *    - updateYardSignForTechnician(): Processes yard signs for one technician
 *    - processAllYardSigns(): Processes yard signs for all technicians
 *    - yardSignSetActionStatus(): Updates status in Action column
 * 
 * 2. YardSignUtilities.js:
 *    - validateYardSignSheet(): Checks if sheet has required columns
 *    - ensureYardSignSheetExists(): Creates/validates the Yard Sign sheet
 *    - processAllYardSignsUtility(): Core function for processing all technicians
 *    - safeOperation(): Safely performs spreadsheet operations
 * 
 * 3. YardSignCalculation.js:
 *    - calculateYardSignEntries(): Finds and calculates entries for a technician
 *    - findColumnIndex(): Locates columns with flexible matching
 *    - safeCalculationOperation(): Safely performs calculation operations
 * 
 * 4. YardSignSheetOperations.js:
 *    - writeYardSignDataToSheet(): Writes yard sign data to technician sheet
 *    - findExistingYardSignRows(): Locates existing yard sign entries in sheet
 *    - updateTopSummaryYardSignPay(): Updates summary section in tech sheet
 *    - writeRemainingYardSignEntries(): Adds new entries to tech sheet
 */

/**
 * DATA FLOW:
 * 
 * 1. Yard Sign sheet contains all yard sign installations with columns:
 *    - Customer Name: Who requested the yard sign
 *    - Job #: Identification number for the yard sign job
 *    - Business Unit: The business unit for the installation
 *    - Completion Date: When it was installed
 *    - Jobs Total: Payment amount for the installation
 *    - Tags: Additional tags or notes for the installation
 *    - Assigned Technicians: Who installed the yard sign
 * 
 * 2. When processed:
 *    - The system finds all yard signs assigned to each technician
 *    - Applies fixed payment of $25.00 per yard sign
 *    - Updates the technician's sheet with:
 *      a. Individual yard sign entries (Customer, Business Unit, Completion Date, Fixed $25 amount, "ST - Yard Sign Tag" note)
 *      b. Yard Sign Spiff in the summary section (row 12) with a fixed $25 per yard sign
 * 
 * 3. Existing yard sign entries are updated or removed as needed
 */

/**
 * ERROR HANDLING:
 * 
 * - The system uses multiple try/catch blocks to handle errors gracefully
 * - safeOperation() and safeCalculationOperation() prevent spreadsheet validation errors
 * - Each function logs detailed error messages to the console
 * - The Action column is updated with error status when problems occur
 * - Sheet validation ensures required columns exist before processing
 * - Error messages are displayed in user-friendly popup notifications
 */

/**
 * IMPLEMENTATION DETAILS:
 * 
 * - Flexible column matching allows for variations in column names
 * - Date handling accommodates various date formats
 * - Empty rows and missing data are handled gracefully with defaults
 * - The module maintains existing entries and only updates what's changed
 * - Invalid entries (missing data, etc.) are skipped automatically
 * - A fixed payment of $25.00 is applied for each yard sign
 * - Detailed summary popups display processing results
 */

/**
 * TECHNICIAN-SPECIFIC PROCESSING:
 * 
 * 1. Data Management in writeYardSignDataToSheet():
 *    - This function handles writing yard sign data to a technician's sheet
 *    - First updates the summary section with updateTopSummaryYardSignPay()
 *    - Then identifies existing yard sign entries with findExistingYardSignRows()
 *    - Prepares new data for writing with proper formatting
 * 
 * 2. Finding and Deleting Existing Entries:
 *    - The findExistingYardSignRows() function scans column J (index 10) for "yard sign" entries:
 *      a. Gets all values in column J up to the last row
 *      b. Identifies rows where column J contains "yard sign" (case-insensitive)
 *      c. Returns an array of row numbers that match this criteria
 *    - When existing entries are found:
 *      a. Updates rows that should be kept with new data
 *      b. If fewer new entries than existing rows, excess rows are cleared:
 *         ```
 *         for (var j = dataToWrite.length; j < existingYardSignRows.length; j++) {
 *           var excessRow = existingYardSignRows[j];
 *           techSheet.getRange(excessRow, 5, 1, 6).clearContent(); // Clears columns E-J
 *         }
 *         ```
 * 
 * 3. Adding New Entries:
 *    - If more entries than existing rows, writeRemainingYardSignEntries() is called:
 *      a. Finds the header row containing "Customer Name" in column E
 *      b. Searches for the first empty row after the header
 *      c. Writes each entry to the sheet starting at the identified row
 *      d. Applies proper formatting (date format, currency format)
 *    - For technicians like Jonathan Fuentes:
 *      a. Each entry includes customer name, business unit, completion date, fixed $25 amount
 *      b. Sets the note field (column I) to "ST - Yard Sign Tag"
 *      c. Sets the type field (column J) to "Yard Sign"
 *      d. Formats the date in column G as MM/dd/yyyy
 *      e. Formats the amount in column H as currency ($25.00)
 * 
 * 4. Data Validation and Error Handling:
 *    - Validates all required fields before processing
 *    - Handles missing data with appropriate defaults
 *    - Logs detailed information about the process
 *    - Uses try/catch blocks to prevent operation failures
 * 
 * 5. Summary Notification:
 *    - After processing, a detailed summary popup is displayed to the user
 *    - For single technician: Shows total yard signs, fixed amount, and details for each entry
 *    - For all technicians: Shows total technicians processed, total yard signs, total amount, 
 *      and breakdown by technician including any errors encountered
 */
