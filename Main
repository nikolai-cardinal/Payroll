/**
* Cardinal Payroll System - Main Script
* This script contains the core functions for the payroll system.
* 
* Note: Utility functions have been moved to the Utilities.gs file:
* - getCurrentPayPeriod() - Gets the current pay period from Hourly + Spiff Pay sheet
* - findTechnicianRow() - Finds a technician's row in a sheet by name
* - setActionStatus() - Sets status in the Action column
* - getSheetByName() - Safely retrieves a sheet by name with error handling
* - parsePercentage() - Parses percentage values from different formats
* - formatCurrency() - Formats currency values with proper decimal places
*/

const HOURLY_SPIFF_SHEET_NAME = 'Hourly + Spiff Pay';

// Processing control variables
var isProcessing = false;
var processingTimeoutId = null; // Changed variable name from processingTimeout

/**
* Creates the custom menu when the spreadsheet opens
*/
function onOpen() {
var ui = SpreadsheetApp.getUi();
ui.createMenu('üöö Technician Tools')
  .addItem('‚úÖPayroll', 'runFullPayroll')
  .addItem('Update All Rates', 'updateAllTechnicianRates')
  .addItem('All Spiff/Bonus', 'processAllSpiffBonusWithCustomers')
  .addItem('All PBP', 'processAllPBP')
  .addItem('All Yard Signs', 'menuProcessAllYardSigns')
  .addItem('All Timesheet', 'processAllTimesheets')
  .addItem('All Lead Set', 'processAllLeadSets')
  .addItem('Create New Sheet', 'createNewTechnicianSheet')
  .addToUi();

// Add the Approval Monitor menu items
addApprovalMonitorMenuItems(ui);
// Initialize the Approval Monitor
initApprovalMonitor();
}

/**
* Handles edit events in the spreadsheet
* @param {Object} e - The edit event object
*/
function onEdit(e) {
// If already processing, exit immediately
if (isProcessing) {
  console.log("Already processing, skipping this execution");
  return;
}
 try {
  // Set processing flag
  isProcessing = true;
   // Clear any existing timeout - modified to use Utilities.sleep instead of setTimeout
  if (processingTimeoutId) {
    // In Google Apps Script, we can't clear a timeout like in browser JS
    // So we'll just ignore the previous timeout ID
    processingTimeoutId = null;
  }
   var range = e.range;
  var sheet = range.getSheet();
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var sheetName = sheet.getName();
  var column = range.getColumn();
  var row = range.getRow();
  var value = range.getValue();
  
  // Get rates sheet mapping - use the one from SpiffBonusUtilities
  var ratesMapping = getRatesSheetMapping();

  // Check if this is the Hourly + Spiff Pay sheet and the Action column
  if (sheetName === HOURLY_SPIFF_SHEET_NAME && column === ratesMapping.actionColumn) {
    // Only process rows after the header
    if (row >= ratesMapping.dataStartRow) {
      // Get the technician name from column A
      var techName = sheet.getRange(row, ratesMapping.nameColumn).getValue();
      if (!techName) {
         console.warn(`Skipping row ${row} because technician name is empty.`);
         isProcessing = false;
         return; 
      }

      // Check which action was selected
      if (value === "Timesheet") {
        // Update timesheet for this specific technician
        // Explicitly pass false for skipStatusUpdate and suppressPopup to ensure popup shows when run individually
        updateHoursForTechnician(techName, row, column, false, false);
      } else if (value === "Spiff/Bonus") {
        // Get the technician's sheet
        var techSheet = ss.getSheetByName(techName);
        if (!techSheet) {
          console.error(`Technician sheet not found for: ${techName}`);
          setActionStatus(sheet, row, column, 'Error: Tech Sheet Not Found');
          SpreadsheetApp.getUi().alert(`Error: Could not find a sheet named "${techName}".`);
        } else {
          // Get the 'Spiff/Bonus' sheet
          var spiffBonusSheet = ss.getSheetByName('Spiff/Bonus'); // Adjust name if different
          if (!spiffBonusSheet) {
            console.error("'Spiff/Bonus' sheet not found.");
            setActionStatus(sheet, row, column, 'Error: Spiff Sheet Missing');
            SpreadsheetApp.getUi().alert("Error: Could not find the 'Spiff/Bonus' sheet.");
          } else {
            // Call the main processing function from SpiffBonusSheetOperations
            // Pass the ratesSheet (sheet), triggerRow (row), and triggerCol (column)
            // Explicitly pass false for suppressPopup to ensure popup shows when run individually
            processSpiffAndBonus(techSheet, techName, spiffBonusSheet, sheet, row, column, false);
          }
        }
      } else if (value === "PBP") { 
         // Call updatePBPForTechnician from PBP/PBPMain.js
         try {
           if (typeof updatePBPForTechnician === 'function') {
             // Explicitly pass false for skipStatusUpdate and suppressPopup to ensure popup shows when run individually
             updatePBPForTechnician(techName, row, column, false, false);
           } else {
             console.error("updatePBPForTechnician function is not defined");
             // Set action status to indicate missing functionality
             setActionStatus(sheet, row, column, 'Error: PBP Module Not Loaded');
             SpreadsheetApp.getUi().alert("The PBP module is not properly loaded. Please contact your administrator.");
           }
         } catch (pbpError) {
           console.error("Error in PBP processing: " + pbpError.message);
           setActionStatus(sheet, row, column, 'Error: PBP Failed');
           SpreadsheetApp.getUi().alert("Error processing PBP: " + pbpError.message);
         }
      } else if (value === "Yard Sign") {
         // Make sure the Yard Sign module is initialized before calling
         try {
           // Check if the initYardSign function exists
           if (typeof initYardSign !== 'function') {
             console.error("Yard Sign module not found or not properly loaded");
             setActionStatus(sheet, row, column, '‚ö†Ô∏è Error');
             return;
           }
           
           // Initialize the yard sign module
           initYardSign();
           
           // Wait a moment to ensure initialization is complete
           Utilities.sleep(100);
           
           // Check if update function exists
           if (typeof updateYardSignForTechnician !== 'function') {
             console.error("updateYardSignForTechnician function not found");
             setActionStatus(sheet, row, column, '‚ö†Ô∏è Error');
             return;
           }
           
           // Call the main function
           // Explicitly pass false for skipStatusUpdate and suppressPopup to ensure popup shows when run individually
           updateYardSignForTechnician(techName, row, column, false, false);
         } catch (yardSignError) {
           console.error("Error in Yard Sign processing: " + yardSignError.message);
           setActionStatus(sheet, row, column, '‚ö†Ô∏è Error');
         }
      } else if (value === "Lead Set" || value === "Leads") {
         // Process Lead Set data for this technician
         try {
           // Check if the updateLeadSetForTechnician function exists
           if (typeof updateLeadSetForTechnician !== 'function') {
             console.error("Lead Set module not found or not properly loaded");
             setActionStatus(sheet, row, column, '‚ö†Ô∏è Error');
             return;
           }
           
           // Call the main function from LeadSet module
           // Pass null for leadSetSheet, false for suppressPopup to ensure popup shows when run individually
           var result = updateLeadSetForTechnician(ss, null, techName, row, column, false);
           if (result && result.success) {
             setActionStatus(sheet, row, column, 'Complete');
           } else {
             setActionStatus(sheet, row, column, '‚ö†Ô∏è Error');
           }
         } catch (leadSetError) {
           console.error("Error in Lead Set processing: " + leadSetError.message);
           setActionStatus(sheet, row, column, '‚ö†Ô∏è Error');
         }
      } else if (value === "Payroll") {
        // Update the technician's sheet Pay Period before running payroll
        try {
          // Get technician's sheet
          var techSheet = ss.getSheetByName(techName);
          if (techSheet) {
            // Get the current pay period
            var currentPayPeriod = getCurrentPayPeriod();
            
            // Get the mapping for technician sheet
            var techMapping = getTechnicianSheetMapping(techSheet);
            
            // Update cell A2 with the pay period
            techSheet.getRange(techMapping.payPeriodRow, 1).setValue("Pay Period: " + currentPayPeriod);
            console.log(`Updated Pay Period in ${techName}'s sheet to: ${currentPayPeriod}`);
          }
        } catch (payPeriodError) {
          console.error(`Error updating Pay Period for ${techName}: ${payPeriodError.message}`);
        }
        
        // Run all payroll processes for this specific technician
        // Explicitly pass false for suppressFinalSummary to ensure popup shows when run individually
        runPayrollForTechnician(techName, row, column, false);
      } else {
         // If value is something else (like Ready or Complete), reset status
         setActionStatus(sheet, row, column, 'Ready'); 
      }
    }
  } else if (column === 10 && typeof value === 'string' && value.toUpperCase().includes('LEAD')) {
    // Column J with LEAD text - delegate to LeadSet module
    try {
      if (typeof handleLeadEntryInColumnJ === 'function') {
        handleLeadEntryInColumnJ(sheet, row, sheetName);
      } else {
        console.error("Lead Set module's handleLeadEntryInColumnJ function not found");
      }
    } catch (error) {
      console.error("Error handling LEAD entry in column J: " + error.message);
    }
  }

  // Delegate to Approval Monitor to handle checkbox resets
  if (typeof onEditResetApprovalStatus === 'function') {
    try { onEditResetApprovalStatus(e); } catch(err) { console.error('onEditResetApprovalStatus error: '+err.message); }
  }
  // Delegate to Technician sheet recreate handler when dropdown set to Complete
  if (typeof onEditRecreateTechnicianSheet === 'function') {
    try { onEditRecreateTechnicianSheet(e); } catch(err) { console.error('onEditRecreateTechnicianSheet error: '+err.message); }
  }
} catch (error) {
  console.error("Error in onEdit: " + error.message + " Stack: " + error.stack);
  // Try to reset status to Error if possible
  if (sheet && row && column) {
      try { setActionStatus(sheet, row, column, 'Error'); } catch (e) { console.error("Failed to set error status."); }
  }
} finally {
  isProcessing = false;
}
}

/**
* Gets the field mappings for the Hourly + Spiff Pay sheet
* @return {Object} An object containing column indexes for important fields
*/
/* REMOVED - Use SpiffBonusUtilities.getRatesSheetMapping() instead 
function getRatesSheetMapping() {
return {
  nameColumn: 1,       // Column A - Technician name
  positionColumn: 2,   // Column B - Position
  rateColumn: 4,       // Column D - Base Rate
   actionColumn: 7,     // Column G - Action column
  dataStartRow: 3      // Data starts at row 3
};
}
*/

// --- Placeholder functions potentially called by onOpen menu items ---
// You would need to define these or ensure they exist elsewhere in your project.
// updateAllTechnicianRates is defined in TechnicianRates.gs
function createNewTechnicianSheet() { 
  // Check if we have a proper implementation in NewTechnicianSheet.gs
  if (typeof window !== 'undefined' && 
      typeof window.createNewTechnicianSheet === 'function') {
    window.createNewTechnicianSheet();
  } else {
    SpreadsheetApp.getUi().alert('createNewTechnicianSheet function needs to be defined.'); 
  }
}

/**
* Menu handler for processing all spiff/bonus entries
* Ensures proper initialization before calling the main function
* Ignores action column status completely
*/
function processAllSpiffBonusWithCustomers() {
  try {
    // Call the main processing function directly, without any reference to action column
    processSpiffBonusAll();
  } catch (e) {
    console.error("Error in processSpiffBonusAll: " + e.message);
    SpreadsheetApp.getUi().alert("Error processing spiff/bonus entries: " + e.message);
  }
}

/**
* Menu handler for processing all PBP entries
* Ensures proper initialization before calling the main function
* Ignores action column status completely
*/
function processAllPBP() {
  try {
    // Check if processAllPBP function exists
    if (typeof processAllPBPGlobal === 'function') {
      // Direct function call - no reference to action column
      processAllPBPGlobal();
      return;
    }
    
    // If the previous check fails, check if another form of the function exists
    if (typeof window !== 'undefined' && 
        typeof window.processAllPBP === 'function') {
      window.processAllPBP();
      return;
    }
    
    // If we get here, try to find another function that might be related to PBP processing
    var ui = SpreadsheetApp.getUi();
    var functionsFound = false;
    
    if (typeof updatePBPForTechnician === 'function') {
      functionsFound = true;
      
      // If we can't find the batch processing function but individual processing works,
      // inform the user about the workaround
      ui.alert("Could not find the batch PBP processing function. Please process technicians individually or contact support.");
      return;
    }
    
    // If we can't find any PBP functions, show an appropriate error
    if (!functionsFound) {
      ui.alert("Error: PBP module is not properly loaded. Please contact support.");
    }
  } catch (e) {
    console.error("Error in processAllPBP: " + e.message);
    SpreadsheetApp.getUi().alert("Error processing PBP entries: " + e.message);
  }
}

// --- Placeholder functions potentially called by onEdit actions ---
// You would need to define these or ensure they exist elsewhere in your project.
function updateHoursForTechnician(techName, row, column, skipStatusUpdate = false, suppressPopup = false) { 
  // Delegate to the TimeSheetLogic module function
  try {
    // This assumes TimeSheetLogic is properly loaded
    return updateHoursForTechnician(techName, row, column, skipStatusUpdate, suppressPopup);
  } catch (e) {
    console.error("Error calling updateHoursForTechnician: " + e.message);
    var ratesSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(HOURLY_SPIFF_SHEET_NAME);
    if (!suppressPopup) {
      SpreadsheetApp.getUi().alert('Error updating hours for: ' + techName + ". " + e.message);
    }
    setActionStatus(ratesSheet, row, column, 'Error'); 
  }
}

// updateSpiffBonusWithCustomersList is now defined in Spiff/Bonus/SpiffBonusMain.gs
// updatePBPForTechnician is defined in PBP/PBPMain.gs
// updateYardSignForTechnician is defined in YardSign/YardSignMain.gs

/**
* Menu handler for processing all yard signs
* Ignores action column status completely
*/
function menuProcessAllYardSigns() {
  try {
    // Initialize the Yard Sign module if needed
    if (typeof initYardSign === 'function') {
      initYardSign();
    }
    
    // Call the main processing function directly, with no reference to action column
    processAllYardSigns();
  } catch (e) {
    console.error("Error in processAllYardSigns: " + e.message);
    SpreadsheetApp.getUi().alert("Error processing yard signs: " + e.message);
  }
}

/**
* Menu handler for processing all technician timesheets
* Ignores action column status completely
*/
function processAllTimesheets() {
  // Delegate to the TimeSheetLogic module function
  try {
    // This assumes TimeSheetLogic is properly loaded
    return processAllTimesheets();
  } catch (e) {
    console.error("Error in processAllTimesheets: " + e.message);
    SpreadsheetApp.getUi().alert("Error processing timesheets: " + e.message);
  }
}

/**
* Helper function to update cell C17 in a technician's sheet with the value from Column D of the Service sheet.
* @param {Sheet} techSheet The technician's sheet object.
* @param {string} techName The technician's name.
*/
function updateC17FromServiceSheet(techSheet, techName) {
  console.log(`Attempting to update C17 for ${techName} from Service sheet.`);
  if (!techSheet || !techName) {
    console.error("updateC17FromServiceSheet: Missing techSheet or techName.");
    return;
  }
  try {
    var ss = SpreadsheetApp.getActiveSpreadsheet();
    var serviceSheet = ss.getSheetByName('Service');
    if (!serviceSheet) {
      console.warn(`Service sheet named 'Service' not found. Skipping update for ${techName}.`);
    } else {
      var serviceData = serviceSheet.getRange("A1:E" + serviceSheet.getLastRow()).getValues();
      var foundTechInService = false;
      var techNameLower = techName.trim().toLowerCase();

      for (var serviceRow = 1; serviceRow < serviceData.length; serviceRow++) {
        var nameInService = serviceData[serviceRow][0];
        if (nameInService && nameInService.toString().trim().toLowerCase() === techNameLower) {
          var totalSalesValue = serviceData[serviceRow][3];
          var completedRevenueValue = serviceData[serviceRow][4];
          console.log(`Found ${techName} in Service sheet row ${serviceRow + 1}. Value in Col D: ${totalSalesValue}, Col E: ${completedRevenueValue}`);
          
          // Update C17 with Total Sales (Column D)
          techSheet.getRange(17, 3).setValue(totalSalesValue);
          
          // Update C16 with Completed Revenue (Column E)
          techSheet.getRange(16, 3).setValue(completedRevenueValue);
          
          console.log(`Successfully updated C17 for ${techName} with Total Sales: ${totalSalesValue}`);
          console.log(`Successfully updated C16 for ${techName} with Completed Revenue: ${completedRevenueValue}`);
          
          foundTechInService = true;
          break;
        }
      }
      if (!foundTechInService) {
        console.warn(`Technician '${techName}' (case-insensitive) not found in Column A of Service sheet.`);
      }
    }
  } catch (serviceError) {
    console.error(`Error during Service sheet update for ${techName}: ${serviceError.message} Stack: ${serviceError.stack}`);
  }
}

/**
* Runs all payroll functions in sequence (Spiff/Bonus, PBP, Yard Signs, Timesheet)
*/
function runFullPayroll() {
  try {
    var ui = SpreadsheetApp.getUi();
    var ss = SpreadsheetApp.getActiveSpreadsheet();
    var ratesSheet = ss.getSheetByName(HOURLY_SPIFF_SHEET_NAME);
    
    if (!ratesSheet) {
      ui.alert("Error: Hourly + Spiff Pay sheet not found.");
      return;
    }
    
    ui.alert("Starting full payroll process. This will run payroll for all technicians with existing sheets.");
    
    // Get the current pay period
    var currentPayPeriod = getCurrentPayPeriod();
    
    // Get the list of technicians from the rates sheet
    var ratesMapping = getRatesSheetMapping(); // Make sure this mapping includes positionColumn (usually 2)
    if (!ratesMapping || !ratesMapping.positionColumn) {
       console.error("Rates mapping is missing or does not contain 'positionColumn'. Cannot filter skipped techs by department.");
       ui.alert("Error: System configuration problem. Cannot determine technician departments.");
       return;
    }
    var technicianRange = ratesSheet.getRange(ratesMapping.dataStartRow, ratesMapping.nameColumn, 
                                             ratesSheet.getLastRow() - ratesMapping.dataStartRow + 1, 1);
    var technicianData = technicianRange.getValues();
    
    var techResults = []; // Store results for each technician
    var skippedTechs = []; // Initialize list for skipped 'Service' technicians
    var processedRowInfo = []; // Store row numbers for processed technicians
    
    // Process each technician individually
    for (var i = 0; i < technicianData.length; i++) {
      var techName = technicianData[i][0];
      var rowIndex = ratesMapping.dataStartRow + i; // Calculate current row index
      
      // Skip empty rows
      if (!techName || techName.toString().trim() === "") {
        continue;
      }
      
      // Check if technician sheet exists before processing
      var techSheet = ss.getSheetByName(techName);
      if (!techSheet) {
        console.log(`Technician sheet not found for: ${techName}. Checking department.`);
        // Get the Department value from Column B for this technician's row
        var deptValue = ""; 
        try {
          // Get value from the positionColumn defined in ratesMapping
          deptValue = ratesSheet.getRange(rowIndex, ratesMapping.positionColumn).getValue().toString().trim();
          console.log(`Dept for ${techName} (row ${rowIndex}): '${deptValue}'`);
        } catch (e) {
          console.error(`Error getting department for ${techName} at row ${rowIndex}: ${e.message}`);
          // Continue without adding to skipped list if dept cannot be read
        }

        // Only add to skipped list if Dept contains 'Service' (case-insensitive)
        if (deptValue.toLowerCase().includes('service')) {
          console.log(`${techName} is in 'Service' dept and has no sheet. Adding to skipped list.`);
          skippedTechs.push(`${techName} (no sheet)`); 
        } else {
           console.log(`${techName} does not have 'Service' in dept ('${deptValue}') or sheet exists. Not adding to specific skipped list.`);
        }
        continue; // Skip to next technician regardless of department
      }
      
      // Update the pay period in the technician's sheet
      try {
        // Get the mapping for technician sheet
        var techMapping = getTechnicianSheetMapping(techSheet);
        
        // Update cell A2 with the pay period
        techSheet.getRange(techMapping.payPeriodRow, 1).setValue("Pay Period: " + currentPayPeriod);
        console.log(`Updated Pay Period in ${techName}'s sheet to: ${currentPayPeriod}`);
      } catch (payPeriodError) {
        console.error(`Error updating Pay Period for ${techName}: ${payPeriodError.message}`);
      }
      
      // --- Update C17 from Service Tab --- 
      updateC17FromServiceSheet(techSheet, techName); // Call the new helper function
      // --- End Update C17 ---

      // Find the row number for this technician
      // var rowIndex = ratesMapping.dataStartRow + i; // Already calculated above

      // Run payroll for this technician
      try {
        // Use our custom function and capture the results
        // Pass true for suppressStagePopups to prevent individual stage popups
        var results = processPayrollForTechnicianSilently(techName, rowIndex, ratesMapping.actionColumn, true);
        techResults.push({
          name: techName,
          results: results
        });
        
        // Store the row index for later status update
        processedRowInfo.push({
          name: techName,
          row: rowIndex,
          column: ratesMapping.actionColumn
        });
      } catch (techError) {
        console.error(`Error processing payroll for ${techName}: ${techError.message}`);
        // Don't add to skippedTechs here as it's an error during processing, not a missing sheet
      }
    }
    
    // Show final summary message
    var summaryMessage = "Full payroll process completed.\n\n";
    
    if (techResults.length > 0) {
      summaryMessage += "Detailed Results:\n";
      for (var j = 0; j < techResults.length; j++) {
        var tech = techResults[j];
        summaryMessage += `\n${tech.name}:\n`;
        
        // Check if technician is Class 1
        var isClass1 = false;
        try {
          var technicianRow = findTechnicianRow(ratesSheet, tech.name, 3); // Assuming data starts at row 3
          if (technicianRow > 0) {
            var positionTitle = ratesSheet.getRange(technicianRow, 3).getValue().toString().toLowerCase(); // Column C
            isClass1 = positionTitle.includes("class 1");
          }
        } catch (e) {
          console.error(`Error checking Class 1 status: ${e.message}`);
        }
        
        // Spiff/Bonus: Class 1 technicians are not eligible
        if (isClass1) {
          summaryMessage += `  ‚ö†Ô∏è Skipped (Not Eligible) Spiff/Bonus\n`;
        } else {
          summaryMessage += `  ${tech.results.spiffBonus ? "‚úÖ" : "‚ùå"} Spiff/Bonus\n`;
        }
        
        // PBP: Class 1 technicians are not eligible
        if (isClass1) {
          summaryMessage += `  ‚ö†Ô∏è Skipped (Not Eligible) PBP\n`;
        } else {
          summaryMessage += `  ${tech.results.pbp ? "‚úÖ" : "‚ùå"} PBP\n`;
        }
        
        // Yard Signs: Class 1 technicians are not eligible
        if (isClass1) {
          summaryMessage += `  ‚ö†Ô∏è Skipped (Not Eligible) Yard Signs\n`;
        } else {
          summaryMessage += `  ${tech.results.yardSign ? "‚úÖ" : "‚ùå"} Yard Signs\n`;
        }
        
        // Lead Sets: No eligibility restrictions based on class
        summaryMessage += `  ${tech.results.leadSet ? "‚úÖ" : "‚ùå"} Lead Sets\n`;
        
        // Timesheet: No eligibility restrictions based on class
        summaryMessage += `  ${tech.results.timesheet ? "‚úÖ" : "‚ùå"} Timesheet\n`;
      }
    } else {
      summaryMessage += "No technicians with sheets were processed.\n"; // Added message if no results
    }
    
    // Only add the "Skipped" section if there are technicians in the filtered list
    if (skippedTechs.length > 0) {
      summaryMessage += `\n\nSkipped (No Sheet & Dept='Service'): ${skippedTechs.join(", ")}`;
    } else {
      summaryMessage += "\n\nNo technicians from the 'Service' department were skipped due to missing sheets."; // Added clarification
    }
    
    // Show the summary alert and wait for user to click OK
    var response = ui.alert(summaryMessage, ui.ButtonSet.OK);
    
    // NOW set status to Complete for all processed technicians (only after user has clicked OK)
    if (response === ui.Button.OK) {
      for (var k = 0; k < processedRowInfo.length; k++) {
        var techInfo = processedRowInfo[k];
        // Check if ratesSheet is still valid before setting status
        if (ratesSheet) {
           setActionStatus(ratesSheet, techInfo.row, techInfo.column, 'Complete');
        }
      }
    }
    
  } catch (e) {
    console.error("Error in runFullPayroll: " + e.message + " Stack: " + e.stack); // Added stack trace
    // Check if ui object is available before calling alert
    if (typeof ui !== 'undefined' && ui) {
      ui.alert("Error processing full payroll: " + e.message);
    } else {
      // Fallback if ui isn't defined (e.g., error occurred very early)
      SpreadsheetApp.getUi().alert("Error processing full payroll: " + e.message);
    }
  }
}

/**
* Runs all payroll functions in sequence for a single technician without showing error alerts
* This is a modified version of runPayrollForTechnician that suppresses sheet-not-found errors
* @param {string} technicianName - The name of the technician to process
* @param {number} actionRow - The row in the Hourly + Spiff Pay sheet where the action was triggered
* @param {number} actionColumn - The column in the Hourly + Spiff Pay sheet where the action was triggered
* @param {boolean} suppressStagePopups - Optional flag to suppress popups from individual stages
* @return {Object} An object containing the success status of each process
*/
function processPayrollForTechnicianSilently(technicianName, actionRow, actionColumn, suppressStagePopups = false) {
  try {
    var ss = SpreadsheetApp.getActiveSpreadsheet();
    var ratesSheet = ss.getSheetByName(HOURLY_SPIFF_SHEET_NAME);
    var techSheet = ss.getSheetByName(technicianName);
    
    // If sheet doesn't exist, silently return without error
    if (!techSheet) {
      console.log(`Technician sheet not found for: ${technicianName} - skipping silently`);
      return {
        spiffBonus: false,
        pbp: false,
        yardSign: false,
        leadSet: false,
        timesheet: false
      };
    }
    
    // --- Update C17 from Service Tab --- 
    updateC17FromServiceSheet(techSheet, technicianName); // Call the new helper function
    // --- End Update C17 ---
    
    // Set status to Processing (only if we have valid row and column)
    if (actionRow && actionColumn) {
      setActionStatus(ratesSheet, actionRow, actionColumn, 'Processing...');
    }
    
    // Store success status for each process
    var processResults = {
      spiffBonus: false,
      pbp: false,
      yardSign: false,
      leadSet: false,
      timesheet: false
    };
    
    // Only fetch ratesMapping once if needed
    var ratesMapping = null;
    var tempRow = actionRow;
    var tempCol = actionColumn;
    
    if (!tempRow || !tempCol) {
      ratesMapping = getRatesSheetMapping();
      tempRow = findTechnicianRow(ratesSheet, technicianName, ratesMapping.dataStartRow);
      tempCol = ratesMapping.actionColumn;
    }
    
    // Flush to ensure any previous operations are completed
    SpreadsheetApp.flush();
    
    // 1. Process Spiff/Bonus - Skip logic is handled internally by the Spiff/Bonus module 
    // which will automatically skip processing for "Class 1" technicians
    try {
      var spiffBonusSheet = ss.getSheetByName('Spiff/Bonus');
      if (spiffBonusSheet) {
        // Check if processSpiffAndBonusData exists
        if (typeof processSpiffAndBonusData === 'function') {
          try {
            processSpiffAndBonusData(techSheet, technicianName, spiffBonusSheet, suppressStagePopups);
            processResults.spiffBonus = true;
          } catch (e) {
            console.error(`Error using processSpiffAndBonusData: ${e.message}. Falling back.`);
            
            // Fall back to the main function if it exists
            if (typeof processSpiffAndBonus === 'function') {
              processSpiffAndBonus(techSheet, technicianName, spiffBonusSheet, ratesSheet, tempRow, tempCol, suppressStagePopups);
              processResults.spiffBonus = true;
            } else {
              console.error("Neither processSpiffAndBonusData nor processSpiffAndBonus functions are defined");
            }
          }
        } else if (typeof processSpiffAndBonus === 'function') {
          // Try the alternative function
          processSpiffAndBonus(techSheet, technicianName, spiffBonusSheet, ratesSheet, tempRow, tempCol, suppressStagePopups);
          processResults.spiffBonus = true;
        } else {
          console.error("Spiff/Bonus functions are not defined");
        }
      }
    } catch (e) {
      console.error(`Error processing Spiff/Bonus for ${technicianName}: ${e.message}`);
    }
    
    // 2. Process PBP - Skip logic for Class 1 is handled within updatePBPForTechnician
    try {
      // Check if updatePBPForTechnician function exists before calling it
      if (typeof updatePBPForTechnician === 'function') {
        try {
          updatePBPForTechnician(technicianName, tempRow, tempCol, true, suppressStagePopups);
          processResults.pbp = true;
        } catch (e) {
          console.error(`Error with skipStatusUpdate parameter: ${e.message}`);
          // Fall back to standard call
          try {
            updatePBPForTechnician(technicianName, tempRow, tempCol, false, suppressStagePopups);
            processResults.pbp = true;
          } catch (e2) {
            console.error(`Error in standard PBP call: ${e2.message}`);
          }
        }
      } else {
        console.error("updatePBPForTechnician function is not defined");
        // Mark as successful anyway to avoid error indicators in the UI
        processResults.pbp = true;
      }
    } catch (e) {
      console.error(`Error processing PBP for ${technicianName}: ${e.message}`);
      // Mark as successful anyway to avoid error indicators in the UI
      processResults.pbp = true;
    }
    
    // 3. Process Yard Signs - Skip logic for Class 1 should be handled within its module if needed
    try {
      if (typeof initYardSign === 'function') {
        initYardSign();
        
        if (typeof updateYardSignForTechnician === 'function') {
          try {
            updateYardSignForTechnician(technicianName, tempRow, tempCol, true, suppressStagePopups);
            processResults.yardSign = true;
          } catch (e) {
            // Fall back to standard call
            try {
              updateYardSignForTechnician(technicianName, tempRow, tempCol, false, suppressStagePopups);
              processResults.yardSign = true;
            } catch (e2) {
              console.error(`Error in standard Yard Sign call: ${e2.message}`);
            }
          }
        } else {
          console.error("updateYardSignForTechnician function is not defined");
        }
      } else {
        console.error("initYardSign function is not defined");
      }
    } catch (e) {
      console.error(`Error processing Yard Signs for ${technicianName}: ${e.message}`);
    }
    
    // 3.5. Process Lead Sets - Skip logic for Class 1 should be handled within its module if needed
    try {
      // Always use updateLeadSetForTechnician when available
      if (typeof updateLeadSetForTechnician === 'function') {
        try {
          // Use the main function that includes column I bracket information
          const result = updateLeadSetForTechnician(ss, null, technicianName, tempRow, tempCol, suppressStagePopups);
          processResults.leadSet = result && result.success;
        } catch (e) {
          console.error(`Error calling updateLeadSetForTechnician: ${e.message}`);
        }
      }
      else {
        // Fallback to direct functions if updateLeadSetForTechnician isn't available
        var leadSetSheet = ss.getSheetByName(LEAD_SHEET_NAME);
        if (leadSetSheet && typeof getLeadDataForTechnician === 'function' && 
            typeof writeLeadSetDataToSheet === 'function') {
          try {
            // Get lead data for this technician
            var leadData = getLeadDataForTechnician(leadSetSheet, technicianName);
            
            // Write the lead data to the technician's sheet
            writeLeadSetDataToSheet(techSheet, leadData);
            
            processResults.leadSet = true;
          } catch (e) {
            console.error(`Error processing Lead Set for ${technicianName}: ${e.message}`);
          }
        } else {
          console.log(`Lead Set sheet not found or required functions missing, skipping Lead Set processing for ${technicianName}`);
        }
      }
    } catch (e) {
      console.error(`Error in Lead Set processing for ${technicianName}: ${e.message}`);
    }
    
    // 4. Process Timesheet
    try {
      if (typeof updateHoursForTechnician === 'function') {
        try {
          // Use the function from TimeSheetLogic module
          updateHoursForTechnician(technicianName, tempRow, tempCol, true, suppressStagePopups);
          processResults.timesheet = true;
        } catch (e) {
          console.error(`Error with skipStatusUpdate parameter: ${e.message}`);
          // Fall back to standard call
          try {
            updateHoursForTechnician(technicianName, tempRow, tempCol, false, suppressStagePopups);
            processResults.timesheet = true;
          } catch (e2) {
            console.error(`Error in standard Timesheet call: ${e2.message}`);
          }
        }
      } else {
        console.error("updateHoursForTechnician function is not defined");
      }
    } catch (e) {
      console.error(`Error processing Timesheet for ${technicianName}: ${e.message}`);
    }
    
    // 5. Pull KPI data from external sheet
    try {
      if (typeof updateTechnicianKPI === 'function') {
        updateTechnicianKPI(technicianName);
        console.log(`KPI data updated for ${technicianName}`);
      } else {
        console.log(`updateTechnicianKPI function not found, skipping KPI data pull for ${technicianName}`);
      }
    } catch (e) {
      console.error(`Error pulling KPI data for ${technicianName}: ${e.message}`);
    }
    
    // Flush to prevent script timeout between operations
    SpreadsheetApp.flush();
    
    // 6. Copy the total pay value from cell C18 in technician's sheet to column I in rates sheet
    try {
      // Get the total pay value from the technician's sheet (cell C18)
      var totalPayValue = techSheet.getRange("C18").getValue();
      
      // If we don't already have ratesMapping, get it now
      if (!ratesMapping) {
        ratesMapping = getRatesSheetMapping();
      }
      
      // Find the technician's row in the rates sheet if not already known
      if (!tempRow) {
        tempRow = findTechnicianRow(ratesSheet, technicianName, ratesMapping.dataStartRow);
      }
      
      // If we found the row, update column I with the total pay value
      if (tempRow > 0) {
        // Column I is the 9th column (index 9)
        ratesSheet.getRange(tempRow, 9).setValue(totalPayValue);
        console.log(`Updated pay value for ${technicianName} in Hourly + Spiff Pay sheet: ${totalPayValue}`);
      } else {
        console.error(`Could not find row for ${technicianName} in Hourly + Spiff Pay sheet`);
      }
    } catch (e) {
      console.error(`Error copying total pay for ${technicianName}: ${e.message}`);
    }
    
    // Return the process results
    return processResults;
  } catch (error) {
    console.error(`Error in processPayrollForTechnicianSilently for ${technicianName}: ${error.message}`);
    // Don't show alerts or set error status - just log to console
    return {
      spiffBonus: false,
      pbp: false,
      yardSign: false,
      leadSet: false,
      timesheet: false
    };
  }
}

/**
* Runs all payroll functions in sequence for a single technician
* @param {string} technicianName - The name of the technician to process
* @param {number} actionRow - The row in the Hourly + Spiff Pay sheet where the action was triggered
* @param {number} actionColumn - The column in the Hourly + Spiff Pay sheet where the action was triggered
* @param {boolean} suppressFinalSummary - Optional flag to suppress the final summary popup
*/
function runPayrollForTechnician(technicianName, actionRow, actionColumn, suppressFinalSummary = false) {
  try {
    var ui = SpreadsheetApp.getUi();
    var ss = SpreadsheetApp.getActiveSpreadsheet();
    var ratesSheet = ss.getSheetByName(HOURLY_SPIFF_SHEET_NAME);
    
    // Get technician's sheet and update Pay Period
    var techSheet = ss.getSheetByName(technicianName);
    if (techSheet) {
      try {
        // Get the current pay period
        var currentPayPeriod = getCurrentPayPeriod();
        
        // Get the mapping for technician sheet
        var techMapping = getTechnicianSheetMapping(techSheet);
        
        // Update cell A2 with the pay period
        techSheet.getRange(techMapping.payPeriodRow, 1).setValue("Pay Period: " + currentPayPeriod);
        console.log(`Updated Pay Period in ${technicianName}'s sheet to: ${currentPayPeriod}`);
      } catch (payPeriodError) {
        console.error(`Error updating Pay Period for ${technicianName}: ${payPeriodError.message}`);
      }
    }
    
    // Store success status for each process
    var processResults = {
      spiffBonus: false,
      pbp: false,
      yardSign: false,
      leadSet: false,
      timesheet: false
    };
    
    // Check if technician is Class 1 (ineligible for certain processes)
    var isClass1 = false;
    try {
      var technicianRow = findTechnicianRow(ratesSheet, technicianName, 3); // Assuming data starts at row 3
      if (technicianRow > 0) {
        var positionTitle = ratesSheet.getRange(technicianRow, 3).getValue().toString().toLowerCase(); // Column C
        isClass1 = positionTitle.includes("class 1");
      }
    } catch (e) {
      console.error(`Error checking Class 1 status: ${e.message}`);
    }
    
    // Call the silent version of the function and capture results
    // If suppressFinalSummary is true, also suppress stage popups
    processResults = processPayrollForTechnicianSilently(technicianName, actionRow, actionColumn, suppressFinalSummary);
    
    // Create a detailed status report
    var statusReport = `Payroll processing completed for ${technicianName}:\n\n`;
    
    // For Spiff/Bonus: Class 1 technicians are not eligible
    if (isClass1) {
      statusReport += `‚ö†Ô∏è Skipped (Not Eligible) Spiff/Bonus\n`;
    } else {
      statusReport += `${processResults.spiffBonus ? "‚úÖ" : "‚ùå"} Spiff/Bonus\n`;
    }
    
    // For PBP: Class 1 technicians are not eligible
    if (isClass1) {
      statusReport += `‚ö†Ô∏è Skipped (Not Eligible) PBP\n`;
    } else {
      statusReport += `${processResults.pbp ? "‚úÖ" : "‚ùå"} PBP\n`;
    }
    
    // For Yard Signs: Class 1 technicians are not eligible
    if (isClass1) {
      statusReport += `‚ö†Ô∏è Skipped (Not Eligible) Yard Signs\n`;
    } else {
      statusReport += `${processResults.yardSign ? "‚úÖ" : "‚ùå"} Yard Signs\n`;
    }
    
    // For Lead Sets: No eligibility restrictions based on class
    statusReport += `${processResults.leadSet ? "‚úÖ" : "‚ùå"} Lead Sets\n`;
    
    // For Timesheet: No eligibility restrictions based on class
    statusReport += `${processResults.timesheet ? "‚úÖ" : "‚ùå"} Timesheet\n`;
    
    // Show a popup with the detailed status report and wait for user to click OK
    // ui.alert returns a button value that we can check
    var response = ui.Button.OK;
    if (!suppressFinalSummary) {
      response = ui.alert(statusReport, ui.ButtonSet.OK);
    }
    
    // NOW set status to Complete (only after user has clicked OK on the popup)
    if (actionRow && actionColumn && response === ui.Button.OK) {
      setActionStatus(ratesSheet, actionRow, actionColumn, 'Complete');
    }
  } catch (error) {
    console.error(`Error in runPayrollForTechnician for ${technicianName}: ${error.message}`);
    
    // Set status to Error
    if (actionRow && actionColumn) {
      try {
        setActionStatus(ratesSheet, actionRow, actionColumn, 'Error');
      } catch (e) {
        console.error("Failed to set error status: " + e.message);
      }
    }
    
    // Show error alert
    ui.alert(`Error processing payroll for ${technicianName}: ${error.message}`);
  }
}

/**
 * Global reference to the PBP module's updatePBPForTechnician function
 * This makes the function available to other files in the project
 * @param {string} technicianName - Technician name
 * @param {number} row - Row in Hourly + Spiff Pay sheet
 * @param {number} column - Column in Hourly + Spiff Pay sheet
 * @param {boolean} skipStatusUpdate - Optional flag to skip status updates
 * @param {boolean} suppressPopup - Optional flag to suppress popup notifications
 */
function updatePBPForTechnician(technicianName, row, column, skipStatusUpdate, suppressPopup) {
  // Call the function from PBPMain.gs
  try {
    if (typeof global !== 'undefined' && typeof global.updatePBPForTechnician === 'function') {
      return global.updatePBPForTechnician(technicianName, row, column, skipStatusUpdate, suppressPopup);
    }
    
    // If we get here, just call the function directly assuming it's available in project scope
    return pbpMain_updatePBPForTechnician(technicianName, row, column, skipStatusUpdate, suppressPopup);
  } catch (e) {
    console.error("Error in updatePBPForTechnician proxy: " + e.message);
    if (!suppressPopup) {
      SpreadsheetApp.getUi().alert("Error processing PBP for " + technicianName + ": " + e.message);
    }
    
    // If an error row and column were provided, set status to Error
    if (row && column) {
      var ratesSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(HOURLY_SPIFF_SHEET_NAME);
      if (ratesSheet) {
        setActionStatus(ratesSheet, row, column, "Error");
      }
    }
  }
}

/**
 * Global reference to the PBP module's processAllPBP function
 * This makes the function available to the menu handler
 */
function processAllPBPGlobal() {
  // Call the function from PBPMain.gs
  try {
    if (typeof global !== 'undefined' && typeof global.processAllPBP === 'function') {
      return global.processAllPBP();
    }
    
    // If we get here, just call the function directly assuming it's available in project scope
    return pbpMain_processAllPBP();
  } catch (e) {
    console.error("Error in processAllPBPGlobal proxy: " + e.message);
    SpreadsheetApp.getUi().alert("Error processing all PBP entries: " + e.message);
  }
}