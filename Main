/**
* Cardinal Payroll System - Main Script
* This script contains the core functions for the payroll system.
*/




// Processing control variables
var isProcessing = false;
var processingTimeoutId = null; // Changed variable name from processingTimeout




/**
* Creates the custom menu when the spreadsheet opens
*/
function onOpen() {
var ui = SpreadsheetApp.getUi();
ui.createMenu('Technician Tools')
  .addItem('Update All Rates', 'updateAllTechnicianRates')
  .addItem('Create New Sheet', 'createNewTechnicianSheet')
  .addItem('All Spiff/Bonus', 'processAllSpiffBonusWithCustomers')
  .addItem('All PBP', 'processAllPBP')
  .addItem('All Yard Signs', 'menuProcessAllYardSigns')
  .addToUi();
}




/**
* Handles edit events in the spreadsheet
* @param {Object} e - The edit event object
*/
function onEdit(e) {
// If already processing, exit immediately
if (isProcessing) {
  console.log("Already processing, skipping this execution");
  return;
}
 try {
  // Set processing flag
  isProcessing = true;
   // Clear any existing timeout - modified to use Utilities.sleep instead of setTimeout
  if (processingTimeoutId) {
    // In Google Apps Script, we can't clear a timeout like in browser JS
    // So we'll just ignore the previous timeout ID
    processingTimeoutId = null;
  }
   var range = e.range;
  var sheet = range.getSheet();
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var sheetName = sheet.getName();
  var column = range.getColumn();
  var row = range.getRow();
  var value = range.getValue();
  
  // Get rates sheet mapping - use the one from SpiffBonusUtilities
  var ratesMapping = getRatesSheetMapping();

  // Check if this is the Hourly + Spiff Pay sheet and the Action column
  if (sheetName === 'Hourly + Spiff Pay' && column === ratesMapping.actionColumn) {
    // Only process rows after the header
    if (row >= ratesMapping.dataStartRow) {
      // Get the technician name from column A
      var techName = sheet.getRange(row, ratesMapping.nameColumn).getValue();
      if (!techName) {
         console.warn(`Skipping row ${row} because technician name is empty.`);
         isProcessing = false;
         return; 
      }

      // Check which action was selected
      if (value === "Timesheet") {
        // Update timesheet for this specific technician
        updateHoursForTechnician(techName, row, column);
      } else if (value === "Spiff/Bonus") {
        // Get the technician's sheet
        var techSheet = ss.getSheetByName(techName);
        if (!techSheet) {
          console.error(`Technician sheet not found for: ${techName}`);
          setActionStatus(sheet, row, column, 'Error: Tech Sheet Not Found');
          SpreadsheetApp.getUi().alert(`Error: Could not find a sheet named "${techName}".`);
        } else {
          // Get the 'Spiff/Bonus' sheet
          var spiffBonusSheet = ss.getSheetByName('Spiff/Bonus'); // Adjust name if different
          if (!spiffBonusSheet) {
            console.error("'Spiff/Bonus' sheet not found.");
            setActionStatus(sheet, row, column, 'Error: Spiff Sheet Missing');
            SpreadsheetApp.getUi().alert("Error: Could not find the 'Spiff/Bonus' sheet.");
          } else {
            // Call the main processing function from SpiffBonusSheetOperations
            // Pass the ratesSheet (sheet), triggerRow (row), and triggerCol (column)
            processSpiffAndBonus(techSheet, techName, spiffBonusSheet, sheet, row, column);
          }
        }
      } else if (value === "PBP") { 
         // Call updatePBPForTechnician from PBP/PBPMain.js
         updatePBPForTechnician(techName, row, column);
      } else if (value === "Yard Sign") {
         // Make sure the Yard Sign module is initialized before calling
         try {
           // Check if the initYardSign function exists
           if (typeof initYardSign !== 'function') {
             console.error("Yard Sign module not found or not properly loaded");
             setActionStatus(sheet, row, column, '⚠️ Error');
             return;
           }
           
           // Initialize the yard sign module
           initYardSign();
           
           // Wait a moment to ensure initialization is complete
           Utilities.sleep(100);
           
           // Check if update function exists
           if (typeof updateYardSignForTechnician !== 'function') {
             console.error("updateYardSignForTechnician function not found");
             setActionStatus(sheet, row, column, '⚠️ Error');
             return;
           }
           
           // Call the main function
           updateYardSignForTechnician(techName, row, column);
         } catch (yardSignError) {
           console.error("Error in Yard Sign processing: " + yardSignError.message);
           setActionStatus(sheet, row, column, '⚠️ Error');
         }
      } else {
         // If value is something else (like Ready or Complete), reset status
         setActionStatus(sheet, row, column, 'Ready'); 
      }
    }
  }
} catch (error) {
  console.error("Error in onEdit: " + error.message + " Stack: " + error.stack);
  // Try to reset status to Error if possible
  if (sheet && row && column) {
      try { setActionStatus(sheet, row, column, 'Error'); } catch (e) { console.error("Failed to set error status."); }
  }
} finally {
  isProcessing = false;
}
}




/**
* Gets the field mappings for the Hourly + Spiff Pay sheet
* @return {Object} An object containing column indexes for important fields
*/
/* REMOVED - Use SpiffBonusUtilities.getRatesSheetMapping() instead 
function getRatesSheetMapping() {
return {
  nameColumn: 1,       // Column A - Technician name
  positionColumn: 2,   // Column B - Position
  rateColumn: 4,       // Column D - Base Rate
   actionColumn: 7,     // Column G - Action column
  dataStartRow: 3      // Data starts at row 3
};
}
*/




/**
* Gets the current pay period from Hourly + Spiff Pay sheet
* @return {string} The current pay period string
*/
function getCurrentPayPeriod() {
try {
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var ratesSheet = ss.getSheetByName('Hourly + Spiff Pay');
   if (!ratesSheet) {
    console.error("Hourly + Spiff Pay sheet not found!");
    return "Current Pay Period";
  }
   // Get pay period from cell F1
  var payPeriod = ratesSheet.getRange(1, 6).getValue();
   // If it's a date object, format it appropriately
  if (payPeriod instanceof Date) {
    payPeriod = Utilities.formatDate(payPeriod, Session.getScriptTimeZone(), "M/dd - M/dd Matisse");
  }
   return payPeriod.toString() || "Current Pay Period";
} catch (error) {
  console.error("Error in getCurrentPayPeriod: " + error.message);
  return "Current Pay Period";
}
}




/**
* Helper function to find a technician's row in the rates sheet
* @param {Sheet} sheet - The rates sheet to search in
* @param {string} techName - The technician name to find
* @param {number} startRow - The row to start searching from
* @return {number} The row number (1-based) or -1 if not found
*/
function findTechnicianRow(sheet, techName, startRow) {
if (!sheet) return -1;
 var nameColumn = 1; // Assuming technician name is in column A
var data = sheet.getRange(startRow, nameColumn, sheet.getLastRow() - startRow + 1, 1).getValues();
for (var i = 0; i < data.length; i++) {
  if (data[i][0] === techName) {
    return startRow + i; // Convert to actual row number
  }
}
 return -1; // Not found
}


// --- Placeholder functions potentially called by onOpen menu items ---
// You would need to define these or ensure they exist elsewhere in your project.
// updateAllTechnicianRates is defined in TechnicianRates.gs
function createNewTechnicianSheet() { SpreadsheetApp.getUi().alert('createNewTechnicianSheet function needs to be defined.'); }
// processAllSpiffBonusWithCustomers is now defined in Spiff/Bonus/SpiffBonusMain.gs
// processAllPBP is defined in PBP/PBPMain.gs
// processAllYardSigns is defined in YardSign/YardSignMain.gs

// --- Placeholder functions potentially called by onEdit actions ---
// You would need to define these or ensure they exist elsewhere in your project.
function updateHoursForTechnician(techName, row, column) { 
  var ratesSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Hourly + Spiff Pay');
  SpreadsheetApp.getUi().alert('updateHoursForTechnician function needs to be defined for: ' + techName);
  setActionStatus(ratesSheet, row, column, 'Error: Not Implemented'); 
}

// updateSpiffBonusWithCustomersList is now defined in Spiff/Bonus/SpiffBonusMain.gs
// updatePBPForTechnician is defined in PBP/PBPMain.gs
// updateYardSignForTechnician is defined in YardSign/YardSignMain.gs

/**
 * Sets the status in the Action column of the rates sheet.
 * @param {Sheet} ratesSheet The 'Hourly + Spiff Pay' sheet object.
 * @param {number} row The 1-based row index.
 * @param {number} col The 1-based column index (should be the Action column).
 * @param {string} status The status to set (e.g., 'Complete', 'Error', 'Processing...').
 */
function setActionStatus(ratesSheet, row, col, status) {
  if (!ratesSheet || !row || !col || !status) {
    console.error("setActionStatus: Invalid parameters provided.");
    return;
  }
  try {
    ratesSheet.getRange(row, col).setValue(status);
  } catch (e) {
    console.error(`Failed to set status to '${status}' at row ${row}, col ${col}: ${e.message}`);
    // Consider adding a UI alert here if this failure is critical
    // SpreadsheetApp.getUi().alert(`Failed to update status for row ${row}. Please check logs.`);
  }
}


// --- Helper Functions for Spiff/Bonus Update (These were moved to Spiff/Bonus folder) ---

/**
 * Finds the row number containing "Spiff [Customer Data]". - MOVED to SpiffBonusSheetOperations.gs
 * Searches column A for the text.
 * @param {Sheet} sheet The sheet object to search within.
 * @return {number} The 1-based row index of the section header, or -1 if not found.
 */
/* MOVED
function findSpiffCustomerDataSection(sheet) {
  // ... implementation moved ...
}
*/

/**
* Finds the row number of the *next* section header after the Spiff section. - MOVED TO APPROPRIATE FILE IF NEEDED, seems unused now.
* Assumes section headers are non-empty cells in column A.
* @param {Sheet} sheet The sheet object to search within.
* @param {number} spiffStartRow The 1-based row index of the "Spiff [Customer Data]" header.
* @return {number} The 1-based row index of the next section header, or -1 if not found soon after.
*/
/* MOVED or DELETED
function findNextSectionAfterSpiff(sheet, spiffStartRow) {
    // ... implementation moved or deleted ...
}
*/

/**
 * Updates the summary section at the top of the technician's sheet for Spiff and Yard Sign Pay. - MOVED to SpiffBonusSheetOperations.gs
 * IMPORTANT: This assumes the "Total Pay" cell already has a formula.
 * @param {Sheet} techSheet The technician's sheet object.
 * @param {number} totalSpiff The total calculated spiff amount.
 * @param {number} totalYard The total calculated yard sign amount.
 */
/* MOVED
function updateTopSummarySpiffYard(techSheet, totalSpiff, totalYard) {
  // ... implementation moved ...
}
*/


// Note: getRatesSheetMapping was moved to SpiffBonusUtilities.gs, but a copy might exist here still.
// Let's remove the duplicate from Main.gs if it exists.
/**
* Gets the field mappings for the Hourly + Spiff Pay sheet - REMOVING DUPLICATE
* @return {Object} An object containing column indexes for important fields
*/
/* REMOVING THIS BLOCK
function getRatesSheetMapping() {
return {
  nameColumn: 1,       // Column A - Technician name
  positionColumn: 2,   // Column B - Position
  rateColumn: 4,       // Column D - Base Rate
   actionColumn: 7,     // Column G - Action column
  dataStartRow: 3      // Data starts at row 3
};
}
*/

/**
* Gets the field mappings for a technician sheet - Keep this one as it seems generic/used by other parts?
* @param {Sheet} sheet - The technician sheet to map
* @return {Object} An object containing row and column indexes for important fields
*/
// ... existing code ...

/**
* Menu handler for processing all yard signs
* Ensures proper initialization before calling the main function
*/
function menuProcessAllYardSigns() {
  try {
    // Check if the YardSign module is available
    if (typeof initYardSign !== 'function') {
      console.error("YardSign module not found");
      SpreadsheetApp.getUi().alert("Error: YardSign module not properly loaded. Please reload the script editor and try again.");
      return;
    }
    
    // Initialize the Yard Sign module
    initYardSign();
    
    // Wait a moment to ensure initialization is complete
    Utilities.sleep(500);
    
    // Check if the processAllYardSigns function exists
    if (typeof processAllYardSigns !== 'function') {
      console.error("processAllYardSigns function not found");
      SpreadsheetApp.getUi().alert("Error: processAllYardSigns function not properly loaded. Please reload the script editor and try again.");
      return;
    }
    
    // Call the main processing function with error handling
    try {
      processAllYardSigns();
    } catch (e) {
      console.error("Error in processAllYardSigns: " + e.message);
      SpreadsheetApp.getUi().alert("Error processing yard signs: " + e.message);
    }
  } catch (e) {
    console.error("Error initializing Yard Sign processing: " + e.message);
    SpreadsheetApp.getUi().alert("Error: Could not initialize Yard Sign processing. See logs for details.");
  }
}