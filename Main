/**
* Cardinal Payroll System - Main Script
* This script contains the core functions for the payroll system.
*/




// Processing control variables
var isProcessing = false;
var processingTimeoutId = null; // Changed variable name from processingTimeout




/**
* Creates the custom menu when the spreadsheet opens
*/
function onOpen() {
var ui = SpreadsheetApp.getUi();
ui.createMenu('Technician Tools')
  .addItem('✅Payroll', 'runFullPayroll')
  .addItem('Update All Rates', 'updateAllTechnicianRates')
  .addItem('All Spiff/Bonus', 'processAllSpiffBonusWithCustomers')
  .addItem('All PBP', 'processAllPBP')
  .addItem('All Yard Signs', 'menuProcessAllYardSigns')
  .addItem('All Timesheet', 'processAllTimesheets')
  .addItem('All Lead Set', 'processAllLeadSets')
  .addItem('Create New Sheet', 'createNewTechnicianSheet')
  .addToUi();
}




/**
* Handles edit events in the spreadsheet
* @param {Object} e - The edit event object
*/
function onEdit(e) {
// If already processing, exit immediately
if (isProcessing) {
  console.log("Already processing, skipping this execution");
  return;
}
 try {
  // Set processing flag
  isProcessing = true;
   // Clear any existing timeout - modified to use Utilities.sleep instead of setTimeout
  if (processingTimeoutId) {
    // In Google Apps Script, we can't clear a timeout like in browser JS
    // So we'll just ignore the previous timeout ID
    processingTimeoutId = null;
  }
   var range = e.range;
  var sheet = range.getSheet();
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var sheetName = sheet.getName();
  var column = range.getColumn();
  var row = range.getRow();
  var value = range.getValue();
  
  // Get rates sheet mapping - use the one from SpiffBonusUtilities
  var ratesMapping = getRatesSheetMapping();

  // Check if this is the Hourly + Spiff Pay sheet and the Action column
  if (sheetName === 'Hourly + Spiff Pay' && column === ratesMapping.actionColumn) {
    // Only process rows after the header
    if (row >= ratesMapping.dataStartRow) {
      // Get the technician name from column A
      var techName = sheet.getRange(row, ratesMapping.nameColumn).getValue();
      if (!techName) {
         console.warn(`Skipping row ${row} because technician name is empty.`);
         isProcessing = false;
         return; 
      }

      // Check which action was selected
      if (value === "Timesheet") {
        // Update timesheet for this specific technician
        updateHoursForTechnician(techName, row, column);
      } else if (value === "Spiff/Bonus") {
        // Get the technician's sheet
        var techSheet = ss.getSheetByName(techName);
        if (!techSheet) {
          console.error(`Technician sheet not found for: ${techName}`);
          setActionStatus(sheet, row, column, 'Error: Tech Sheet Not Found');
          SpreadsheetApp.getUi().alert(`Error: Could not find a sheet named "${techName}".`);
        } else {
          // Get the 'Spiff/Bonus' sheet
          var spiffBonusSheet = ss.getSheetByName('Spiff/Bonus'); // Adjust name if different
          if (!spiffBonusSheet) {
            console.error("'Spiff/Bonus' sheet not found.");
            setActionStatus(sheet, row, column, 'Error: Spiff Sheet Missing');
            SpreadsheetApp.getUi().alert("Error: Could not find the 'Spiff/Bonus' sheet.");
          } else {
            // Call the main processing function from SpiffBonusSheetOperations
            // Pass the ratesSheet (sheet), triggerRow (row), and triggerCol (column)
            processSpiffAndBonus(techSheet, techName, spiffBonusSheet, sheet, row, column);
          }
        }
      } else if (value === "PBP") { 
         // Call updatePBPForTechnician from PBP/PBPMain.js
         updatePBPForTechnician(techName, row, column);
      } else if (value === "Yard Sign") {
         // Make sure the Yard Sign module is initialized before calling
         try {
           // Check if the initYardSign function exists
           if (typeof initYardSign !== 'function') {
             console.error("Yard Sign module not found or not properly loaded");
             setActionStatus(sheet, row, column, '⚠️ Error');
             return;
           }
           
           // Initialize the yard sign module
           initYardSign();
           
           // Wait a moment to ensure initialization is complete
           Utilities.sleep(100);
           
           // Check if update function exists
           if (typeof updateYardSignForTechnician !== 'function') {
             console.error("updateYardSignForTechnician function not found");
             setActionStatus(sheet, row, column, '⚠️ Error');
             return;
           }
           
           // Call the main function
           updateYardSignForTechnician(techName, row, column);
         } catch (yardSignError) {
           console.error("Error in Yard Sign processing: " + yardSignError.message);
           setActionStatus(sheet, row, column, '⚠️ Error');
         }
      } else if (value === "Lead Set" || value === "Leads") {
         // Process Lead Set data for this technician
         try {
           // Check if the updateLeadSetForTechnician function exists
           if (typeof updateLeadSetForTechnician !== 'function') {
             console.error("Lead Set module not found or not properly loaded");
             setActionStatus(sheet, row, column, '⚠️ Error');
             return;
           }
           
           // Call the main function from LeadSet module
           var result = updateLeadSetForTechnician(ss, null, techName);
           if (result && result.success) {
             setActionStatus(sheet, row, column, 'Complete');
           } else {
             setActionStatus(sheet, row, column, '⚠️ Error');
           }
         } catch (leadSetError) {
           console.error("Error in Lead Set processing: " + leadSetError.message);
           setActionStatus(sheet, row, column, '⚠️ Error');
         }
      } else if (value === "Payroll") {
        // Run all payroll processes for this specific technician
        runPayrollForTechnician(techName, row, column);
      } else {
         // If value is something else (like Ready or Complete), reset status
         setActionStatus(sheet, row, column, 'Ready'); 
      }
    }
  } else if (column === 10 && typeof value === 'string' && value.toUpperCase().includes('LEAD')) {
    // Column J with LEAD text - delegate to LeadSet module
    try {
      if (typeof handleLeadEntryInColumnJ === 'function') {
        handleLeadEntryInColumnJ(sheet, row, sheetName);
      } else {
        console.error("Lead Set module's handleLeadEntryInColumnJ function not found");
      }
    } catch (error) {
      console.error("Error handling LEAD entry in column J: " + error.message);
    }
  }
} catch (error) {
  console.error("Error in onEdit: " + error.message + " Stack: " + error.stack);
  // Try to reset status to Error if possible
  if (sheet && row && column) {
      try { setActionStatus(sheet, row, column, 'Error'); } catch (e) { console.error("Failed to set error status."); }
  }
} finally {
  isProcessing = false;
}
}




/**
* Gets the field mappings for the Hourly + Spiff Pay sheet
* @return {Object} An object containing column indexes for important fields
*/
/* REMOVED - Use SpiffBonusUtilities.getRatesSheetMapping() instead 
function getRatesSheetMapping() {
return {
  nameColumn: 1,       // Column A - Technician name
  positionColumn: 2,   // Column B - Position
  rateColumn: 4,       // Column D - Base Rate
   actionColumn: 7,     // Column G - Action column
  dataStartRow: 3      // Data starts at row 3
};
}
*/




/**
* Gets the current pay period from Hourly + Spiff Pay sheet
* @return {string} The current pay period string
*/
function getCurrentPayPeriod() {
try {
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var ratesSheet = ss.getSheetByName('Hourly + Spiff Pay');
   if (!ratesSheet) {
    console.error("Hourly + Spiff Pay sheet not found!");
    return "Current Pay Period";
  }
   // Get pay period from cell F1
  var payPeriod = ratesSheet.getRange(1, 6).getValue();
   // If it's a date object, format it appropriately
  if (payPeriod instanceof Date) {
    payPeriod = Utilities.formatDate(payPeriod, Session.getScriptTimeZone(), "M/dd - M/dd Matisse");
  }
   return payPeriod.toString() || "Current Pay Period";
} catch (error) {
  console.error("Error in getCurrentPayPeriod: " + error.message);
  return "Current Pay Period";
}
}




/**
* Helper function to find a technician's row in the rates sheet
* @param {Sheet} sheet - The rates sheet to search in
* @param {string} techName - The technician name to find
* @param {number} startRow - The row to start searching from
* @return {number} The row number (1-based) or -1 if not found
*/
function findTechnicianRow(sheet, techName, startRow) {
if (!sheet) return -1;
 var nameColumn = 1; // Assuming technician name is in column A
var data = sheet.getRange(startRow, nameColumn, sheet.getLastRow() - startRow + 1, 1).getValues();
for (var i = 0; i < data.length; i++) {
  if (data[i][0] === techName) {
    return startRow + i; // Convert to actual row number
  }
}
 return -1; // Not found
}


// --- Placeholder functions potentially called by onOpen menu items ---
// You would need to define these or ensure they exist elsewhere in your project.
// updateAllTechnicianRates is defined in TechnicianRates.gs
function createNewTechnicianSheet() { 
  // Check if we have a proper implementation in NewTechnicianSheet.gs
  if (typeof window !== 'undefined' && 
      typeof window.createNewTechnicianSheet === 'function') {
    window.createNewTechnicianSheet();
  } else {
    SpreadsheetApp.getUi().alert('createNewTechnicianSheet function needs to be defined.'); 
  }
}

/**
* Menu handler for processing all spiff/bonus entries
* Ensures proper initialization before calling the main function
* Ignores action column status completely
*/
function processAllSpiffBonusWithCustomers() {
  try {
    // Call the main processing function directly, without any reference to action column
    processSpiffBonusAll();
  } catch (e) {
    console.error("Error in processSpiffBonusAll: " + e.message);
    SpreadsheetApp.getUi().alert("Error processing spiff/bonus entries: " + e.message);
  }
}

/**
* Menu handler for processing all PBP entries
* Ensures proper initialization before calling the main function
* Ignores action column status completely
*/
function processAllPBP() {
  try {
    // If PBPMain.processAllPBP exists, call it directly
    try {
      // Direct function call - no reference to action column
      processAllPBP();
    } catch (e) {
      console.error("Error in processAllPBP: " + e.message);
      SpreadsheetApp.getUi().alert("Error processing PBP entries: " + e.message);
    }
  } catch (e) {
    console.error("Error initializing PBP processing: " + e.message);
    SpreadsheetApp.getUi().alert("Error: Could not initialize PBP processing. See logs for details.");
  }
}

// --- Placeholder functions potentially called by onEdit actions ---
// You would need to define these or ensure they exist elsewhere in your project.
function updateHoursForTechnician(techName, row, column) { 
  var ratesSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Hourly + Spiff Pay');
  SpreadsheetApp.getUi().alert('updateHoursForTechnician function needs to be defined for: ' + techName);
  setActionStatus(ratesSheet, row, column, 'Error: Not Implemented'); 
}

// updateSpiffBonusWithCustomersList is now defined in Spiff/Bonus/SpiffBonusMain.gs
// updatePBPForTechnician is defined in PBP/PBPMain.gs
// updateYardSignForTechnician is defined in YardSign/YardSignMain.gs

/**
 * Sets the status in the Action column of the rates sheet.
 * @param {Sheet} ratesSheet The 'Hourly + Spiff Pay' sheet object.
 * @param {number} row The 1-based row index.
 * @param {number} col The 1-based column index (should be the Action column).
 * @param {string} status The status to set (e.g., 'Complete', 'Error', 'Processing...').
 */
function setActionStatus(ratesSheet, row, col, status) {
  if (!ratesSheet || !row || !col || !status) {
    console.error("setActionStatus: Invalid parameters provided.");
    return;
  }
  try {
    ratesSheet.getRange(row, col).setValue(status);
  } catch (e) {
    console.error(`Failed to set status to '${status}' at row ${row}, col ${col}: ${e.message}`);
    // Consider adding a UI alert here if this failure is critical
    // SpreadsheetApp.getUi().alert(`Failed to update status for row ${row}. Please check logs.`);
  }
}


// --- Helper Functions for Spiff/Bonus Update (These were moved to Spiff/Bonus folder) ---

/**
 * Finds the row number containing "Spiff [Customer Data]". - MOVED to SpiffBonusSheetOperations.gs
 * Searches column A for the text.
 * @param {Sheet} sheet The sheet object to search within.
 * @return {number} The 1-based row index of the section header, or -1 if not found.
 */
/* MOVED
function findSpiffCustomerDataSection(sheet) {
  // ... implementation moved ...
}
*/

/**
* Finds the row number of the *next* section header after the Spiff section. - MOVED TO APPROPRIATE FILE IF NEEDED, seems unused now.
* Assumes section headers are non-empty cells in column A.
* @param {Sheet} sheet The sheet object to search within.
* @param {number} spiffStartRow The 1-based row index of the "Spiff [Customer Data]" header.
* @return {number} The 1-based row index of the next section header, or -1 if not found soon after.
*/
/* MOVED or DELETED
function findNextSectionAfterSpiff(sheet, spiffStartRow) {
    // ... implementation moved or deleted ...
}
*/

/**
 * Updates the summary section at the top of the technician's sheet for Spiff and Yard Sign Pay. - MOVED to SpiffBonusSheetOperations.gs
 * IMPORTANT: This assumes the "Total Pay" cell already has a formula.
 * @param {Sheet} techSheet The technician's sheet object.
 * @param {number} totalSpiff The total calculated spiff amount.
 * @param {number} totalYard The total calculated yard sign amount.
 */
/* MOVED
function updateTopSummarySpiffYard(techSheet, totalSpiff, totalYard) {
  // ... implementation moved ...
}
*/


// Note: getRatesSheetMapping was moved to SpiffBonusUtilities.gs, but a copy might exist here still.
// Let's remove the duplicate from Main.gs if it exists.
/**
* Gets the field mappings for the Hourly + Spiff Pay sheet - REMOVING DUPLICATE
* @return {Object} An object containing column indexes for important fields
*/
/* REMOVING THIS BLOCK
function getRatesSheetMapping() {
return {
  nameColumn: 1,       // Column A - Technician name
  positionColumn: 2,   // Column B - Position
  rateColumn: 4,       // Column D - Base Rate
   actionColumn: 7,     // Column G - Action column
  dataStartRow: 3      // Data starts at row 3
};
}
*/

/**
* Gets the field mappings for a technician sheet - Keep this one as it seems generic/used by other parts?
* @param {Sheet} sheet - The technician sheet to map
* @return {Object} An object containing row and column indexes for important fields
*/
// ... existing code ...

/**
* Menu handler for processing all yard signs
* Ignores action column status completely
*/
function menuProcessAllYardSigns() {
  try {
    // Initialize the Yard Sign module if needed
    if (typeof initYardSign === 'function') {
      initYardSign();
    }
    
    // Call the main processing function directly, with no reference to action column
    processAllYardSigns();
  } catch (e) {
    console.error("Error in processAllYardSigns: " + e.message);
    SpreadsheetApp.getUi().alert("Error processing yard signs: " + e.message);
  }
}

/**
* Menu handler for processing all technician timesheets
* Ignores action column status completely
*/
function processAllTimesheets() {
  try {
    var ui = SpreadsheetApp.getUi();
    var ss = SpreadsheetApp.getActiveSpreadsheet();
    var ratesSheet = ss.getSheetByName('Hourly + Spiff Pay');
    var timeSheet = ss.getSheetByName('Time Sheet');
    
    if (!ratesSheet) {
      ui.alert('Error: Could not find "Hourly + Spiff Pay" sheet.');
      return;
    }
    
    if (!timeSheet) {
      ui.alert('Error: Could not find "Time Sheet" sheet.');
      return;
    }
    
    // Get technicians with sheets
    var ratesMapping = getRatesSheetMapping();
    var dataRange = ratesSheet.getRange(ratesMapping.dataStartRow, ratesMapping.nameColumn, 
                                       ratesSheet.getLastRow() - ratesMapping.dataStartRow + 1, 1);
    var technicianNames = dataRange.getValues().flat().filter(function(name) {
      return name && typeof name === 'string' && name.trim() !== '';
    });
    
    if (technicianNames.length === 0) {
      ui.alert('No technicians found in Hourly + Spiff Pay sheet.');
      return;
    }
    
    var processed = [];
    var skipped = [];
    var errors = [];
    
    // Process each technician
    for (var i = 0; i < technicianNames.length; i++) {
      var techName = technicianNames[i];
      var techSheet = ss.getSheetByName(techName);
      
      if (!techSheet) {
        skipped.push(techName + ' (Sheet not found)');
        continue;
      }
      
      try {
        // Calculate hours for this technician
        var timeMapping = getTimeSheetMapping();
        var timeSheetData = timeSheet.getDataRange().getValues();
        var regHours = 0;
        var otHours = 0;
        var dtHours = 0;
        
        // Skip the header rows
        for (var j = timeMapping.dataStartRow - 1; j < timeSheetData.length; j++) {
          var row = timeSheetData[j];
          var name = row[timeMapping.nameColumn - 1];
          
          // Only process rows for this specific technician
          if (name === techName) {
            var regHoursValue = parseFloat(row[timeMapping.regHoursColumn - 1] || 0);
            var otHoursValue = parseFloat(row[timeMapping.otHoursColumn - 1] || 0);
            var dtHoursValue = parseFloat(row[timeMapping.dtHoursColumn - 1] || 0);
            
            regHours += regHoursValue;
            otHours += otHoursValue;
            dtHours += dtHoursValue;
          }
        }
        
        // Get the mapping for this technician sheet
        var mapping = getTechnicianSheetMappingForTimesheet(techSheet);
        
        // Get the current pay period
        var currentPayPeriod = getCurrentPayPeriod();
        
        // Update the Pay Period
        techSheet.getRange(mapping.payPeriodRow, 1).setValue("Pay Period: " + currentPayPeriod);
        
        // Update the Regular Hours
        techSheet.getRange(mapping.regHoursRow, mapping.valueColumn).setValue(regHours);
        
        // Update the Overtime Hours
        techSheet.getRange(mapping.otHoursRow, mapping.valueColumn).setValue(otHours);
        
        // Update the Double Time Hours
        techSheet.getRange(mapping.ptoHoursRow, mapping.valueColumn).setValue(dtHours);
        
        // Add to processed list
        processed.push({
          name: techName,
          regHours: regHours,
          otHours: otHours,
          dtHours: dtHours
        });
        
      } catch (err) {
        errors.push(techName + ': ' + err.message);
        console.error("Error processing " + techName + ": " + err.message);
      }
    }
    
    // Display summary message
    var summaryMessage = [];
    summaryMessage.push("TIMESHEET PROCESSING COMPLETE");
    summaryMessage.push("\nSUMMARY:");
    summaryMessage.push("• Total Technicians Processed: " + processed.length);
    
    if (processed.length > 0) {
      summaryMessage.push("\nDETAILS BY TECHNICIAN:");
      
      for (var k = 0; k < processed.length; k++) {
        var techInfo = processed[k];
        summaryMessage.push("\n" + techInfo.name + ":");
        summaryMessage.push("• Regular Hours: " + formatHoursToHM(techInfo.regHours));
        summaryMessage.push("• Overtime Hours: " + formatHoursToHM(techInfo.otHours));
        summaryMessage.push("• Double Time Hours: " + formatHoursToHM(techInfo.dtHours));
      }
    }
    
    // We'll still log skipped and errors to console but not show them in the UI
    if (skipped.length > 0) {
      console.log("Skipped technicians: " + skipped.join(", "));
    }
    
    if (errors.length > 0) {
      console.log("Errors: " + errors.join(", "));
    }
    
    // Show the detailed summary (without skipped/errors sections)
    ui.alert(summaryMessage.join("\n"));
    
  } catch (e) {
    console.error("Error in processAllTimesheets: " + e.message);
    SpreadsheetApp.getUi().alert("Error processing timesheets: " + e.message);
  }
}

/**
 * Formats decimal hours to H:m format
 * @param {number} decimalHours - The hours in decimal format
 * @return {string} The formatted time in H:m format
 */
function formatHoursToHM(decimalHours) {
  // Extract whole hours
  const hours = Math.floor(decimalHours);
  
  // Calculate minutes from decimal part
  const minutes = Math.round((decimalHours - hours) * 60);
  
  // Handle case where minutes rounds to 60
  if (minutes === 60) {
    return (hours + 1) + ":0";
  }
  
  // Format as H:m
  return hours + ":" + (minutes < 10 ? "0" + minutes : minutes);
}

/**
* Gets the field mappings for a technician sheet for timesheet processing
* @param {Sheet} sheet - The technician sheet to map
* @return {Object} An object containing row and column indexes for important fields
*/
function getTechnicianSheetMappingForTimesheet(sheet) {
  try {
    // Make sure sheet is defined
    if (!sheet) {
      console.error("Sheet is undefined in getTechnicianSheetMappingForTimesheet");
      return {
        hourlyRateRow: 5,
        regHoursRow: 6,
        otHoursRow: 7,
        ptoHoursRow: 8,
        totalHourlyPayRow: 9,
        totalSalesPayRow: 15,
        totalPayRow: 17,
        positionRow: 2,
        payPeriodRow: 3,
        valueColumn: 2,
        calculatedValueColumn: 3,
        ptoRateColumn: 14
      };
    }
    
    // Find rows by label text
    var mapping = {
      // Common fields in technician sheets
      hourlyRateRow: findRowByLabel(sheet, 'Hourly Rate'),
      regHoursRow: findRowByLabel(sheet, 'Regular Hours'),
      otHoursRow: findRowByLabel(sheet, 'Overtime Hours'),
      ptoHoursRow: findRowByLabel(sheet, 'PTO'),
      totalHourlyPayRow: findRowByLabel(sheet, 'Total Hourly Pay'),
      totalSalesPayRow: findRowByLabel(sheet, 'Total Sales Pay'),
      totalPayRow: findRowByLabel(sheet, 'Total Pay'),
      positionRow: findRowByLabel(sheet, 'Position'),
      payPeriodRow: 3 // Based on the structure, Pay Period is typically in row 3
    };

    // If any key fields are not found, fall back to the known structure
    if (mapping.hourlyRateRow === -1) mapping.hourlyRateRow = 5;
    if (mapping.regHoursRow === -1) mapping.regHoursRow = 6;
    if (mapping.otHoursRow === -1) mapping.otHoursRow = 7;
    if (mapping.ptoHoursRow === -1) mapping.ptoHoursRow = 8;
    if (mapping.totalHourlyPayRow === -1) mapping.totalHourlyPayRow = 9;
    if (mapping.totalSalesPayRow === -1) mapping.totalSalesPayRow = 15;
    if (mapping.totalPayRow === -1) mapping.totalPayRow = 17;
    if (mapping.positionRow === -1) mapping.positionRow = 2;
    
    // Set the standard columns (typically B for values, C for calculated amounts)
    mapping.valueColumn = 2;  // B column
    mapping.calculatedValueColumn = 3;  // C column
    
    // Find PTO Rate column
    mapping.ptoRateColumn = 14;  // Default to N column
    
    return mapping;
  } catch (error) {
    console.error("Error in getTechnicianSheetMappingForTimesheet: " + error.message);
    // Return default mapping
    return {
      hourlyRateRow: 5,
      regHoursRow: 6,
      otHoursRow: 7,
      ptoHoursRow: 8,
      totalHourlyPayRow: 9,
      totalSalesPayRow: 15,
      totalPayRow: 17,
      positionRow: 2,
      payPeriodRow: 3,
      valueColumn: 2,
      calculatedValueColumn: 3,
      ptoRateColumn: 14
    };
  }
}

/**
 * Helper function to find a row by its label in a specific column
 * @param {Sheet} sheet - The sheet to search in
 * @param {string} labelText - The text to search for
 * @param {number} searchColumn - The column index to search in (0-based)
 * @return {number} The row index (1-based) or -1 if not found
 */
function findRowByLabel(sheet, labelText, searchColumn = 0) {
  try {
    // Make sure sheet is defined
    if (!sheet) {
      console.error("Sheet is undefined in findRowByLabel");
      return -1;
    }
    
    // Get all data from the sheet
    var data = sheet.getDataRange().getValues();
    
    // Search for the label text
    for (var i = 0; i < data.length; i++) {
      if (data[i][searchColumn] === labelText) {
        return i + 1; // +1 because sheets are 1-indexed
      }
    }
    
    return -1; // Not found
  } catch (error) {
    console.error("Error in findRowByLabel: " + error.message);
    return -1;
  }
}

/**
* Gets the field mappings for the time sheet
* @return {Object} An object containing column indexes for important fields
*/
function getTimeSheetMapping() {
  try {
    var ss = SpreadsheetApp.getActiveSpreadsheet();
    var timeSheet = ss.getSheetByName('Time Sheet');
    
    if (!timeSheet) {
      console.error("Time Sheet not found!");
      return {
        nameColumn: 1,
        dateColumn: 2,
        regHoursColumn: 3,
        otHoursColumn: 4,
        dtHoursColumn: 5,
        dataStartRow: 2
      };
    }
    
    var headerRow = 1; // Assuming headers are in row 1
    var mapping = {
      nameColumn: findColumnByHeader(timeSheet, 'Employee Name', headerRow - 1),
      dateColumn: findColumnByHeader(timeSheet, 'Date', headerRow - 1),
      regHoursColumn: findColumnByHeader(timeSheet, 'Reg Hours', headerRow - 1),
      otHoursColumn: findColumnByHeader(timeSheet, 'OT Hours', headerRow - 1),
      dtHoursColumn: findColumnByHeader(timeSheet, 'DT Hours', headerRow - 1)
    };
    
    // If any columns are not found, fall back to the known structure
    if (mapping.nameColumn === -1) mapping.nameColumn = 1;  // A column
    if (mapping.dateColumn === -1) mapping.dateColumn = 2;  // B column
    if (mapping.regHoursColumn === -1) mapping.regHoursColumn = 3;  // C column
    if (mapping.otHoursColumn === -1) mapping.otHoursColumn = 4;  // D column
    if (mapping.dtHoursColumn === -1) mapping.dtHoursColumn = 5;  // E column
    
    mapping.dataStartRow = 2; // First row with actual data (after headers)
    
    return mapping;
  } catch (error) {
    console.error("Error in getTimeSheetMapping: " + error.message);
    // Return default mapping
    return {
      nameColumn: 1,
      dateColumn: 2,
      regHoursColumn: 3,
      otHoursColumn: 4,
      dtHoursColumn: 5,
      dataStartRow: 2
    };
  }
}

/**
 * Helper function to find a column by its header text in a specific row
 * @param {Sheet} sheet - The sheet to search in
 * @param {string} headerText - The text to search for
 * @param {number} searchRow - The row index to search in (0-based)
 * @return {number} The column index (1-based) or -1 if not found
 */
function findColumnByHeader(sheet, headerText, searchRow = 0) {
  try {
    // Make sure sheet is defined
    if (!sheet) {
      console.error("Sheet is undefined in findColumnByHeader");
      return -1;
    }
    
    // Get the data range for the header row
    var headerRange = sheet.getRange(searchRow + 1, 1, 1, sheet.getLastColumn());
    var headerValues = headerRange.getValues()[0];
    
    // Search for the header text
    for (var j = 0; j < headerValues.length; j++) {
      if (headerValues[j] === headerText) {
        return j + 1; // +1 because sheets are 1-indexed
      }
    }
    
    return -1; // Not found
  } catch (error) {
    console.error("Error in findColumnByHeader: " + error.message);
    return -1;
  }
}

/**
* Runs all payroll functions in sequence (Spiff/Bonus, PBP, Yard Signs, Timesheet)
*/
function runFullPayroll() {
  try {
    var ui = SpreadsheetApp.getUi();
    var ss = SpreadsheetApp.getActiveSpreadsheet();
    var ratesSheet = ss.getSheetByName('Hourly + Spiff Pay');
    
    if (!ratesSheet) {
      ui.alert("Error: Hourly + Spiff Pay sheet not found.");
      return;
    }
    
    ui.alert("Starting full payroll process. This will run payroll for all technicians with existing sheets.");
    
    // Get the list of technicians from the rates sheet
    var ratesMapping = getRatesSheetMapping();
    var technicianRange = ratesSheet.getRange(ratesMapping.dataStartRow, ratesMapping.nameColumn, 
                                             ratesSheet.getLastRow() - ratesMapping.dataStartRow + 1, 1);
    var technicianData = technicianRange.getValues();
    
    var processedTechs = [];
    var skippedTechs = [];
    
    // Process each technician individually
    for (var i = 0; i < technicianData.length; i++) {
      var techName = technicianData[i][0];
      
      // Skip empty rows
      if (!techName || techName.toString().trim() === "") {
        continue;
      }
      
      // Check if technician sheet exists before processing
      var techSheet = ss.getSheetByName(techName);
      if (!techSheet) {
        console.log(`Skipping ${techName} - sheet does not exist`);
        skippedTechs.push(`${techName} (no sheet)`);
        continue; // Skip to next technician
      }
      
      // Find the row number for this technician
      var rowIndex = ratesMapping.dataStartRow + i;
      
      // Run payroll for this technician
      try {
        // Use our custom function instead of default behavior to avoid alerts
        processPayrollForTechnicianSilently(techName, rowIndex, ratesMapping.actionColumn);
        processedTechs.push(techName);
      } catch (techError) {
        console.error(`Error processing payroll for ${techName}: ${techError.message}`);
        skippedTechs.push(techName);
      }
    }
    
    // Show final summary message
    var summaryMessage = "Full payroll process completed.\n\n";
    summaryMessage += `✅ Processed ${processedTechs.length} technicians successfully.`;
    
    if (processedTechs.length > 0) {
      summaryMessage += `\nProcessed: ${processedTechs.join(", ")}`;
    }
    
    ui.alert(summaryMessage);
  } catch (e) {
    console.error("Error in runFullPayroll: " + e.message);
    SpreadsheetApp.getUi().alert("Error processing full payroll: " + e.message);
  }
}

/**
* Runs all payroll functions in sequence for a single technician without showing error alerts
* This is a modified version of runPayrollForTechnician that suppresses sheet-not-found errors
* @param {string} technicianName - The name of the technician to process
* @param {number} actionRow - The row in the Hourly + Spiff Pay sheet where the action was triggered
* @param {number} actionColumn - The column in the Hourly + Spiff Pay sheet where the action was triggered
*/
function processPayrollForTechnicianSilently(technicianName, actionRow, actionColumn) {
  try {
    var ss = SpreadsheetApp.getActiveSpreadsheet();
    var ratesSheet = ss.getSheetByName('Hourly + Spiff Pay');
    var techSheet = ss.getSheetByName(technicianName);
    
    // If sheet doesn't exist, silently return without error
    if (!techSheet) {
      console.log(`Technician sheet not found for: ${technicianName} - skipping silently`);
      return;
    }
    
    // Set status to Processing (only if we have valid row and column)
    if (actionRow && actionColumn) {
      setActionStatus(ratesSheet, actionRow, actionColumn, 'Processing...');
    }
    
    // Store success status for each process
    var processResults = {
      spiffBonus: false,
      pbp: false,
      yardSign: false,
      leadSet: false,
      timesheet: false
    };
    
    // Only fetch ratesMapping once if needed
    var ratesMapping = null;
    var tempRow = actionRow;
    var tempCol = actionColumn;
    
    if (!tempRow || !tempCol) {
      ratesMapping = getRatesSheetMapping();
      tempRow = findTechnicianRow(ratesSheet, technicianName, ratesMapping.dataStartRow);
      tempCol = ratesMapping.actionColumn;
    }
    
    // Check if technician has 0% commission
    var has0PercentCommission = false;
    try {
      // First, initialize ratesMapping if not already done
      if (!ratesMapping) {
        ratesMapping = getRatesSheetMapping();
      }
      
      // Get the technician's row data
      var techRow = ratesSheet.getRange(tempRow, 1, 1, 10).getValues()[0];
      var techTitle = techRow[ratesMapping.positionColumn - 1] || "";
      var commissionPercentStr = techRow[7]; // Column H (0-based = 7)
      
      // Parse the commission percentage
      var commissionPercent = 0;
      if (typeof commissionPercentStr === "string" && commissionPercentStr.includes("%")) {
        commissionPercent = parseFloat(commissionPercentStr.replace("%", "")) || 0;
      } else if (typeof commissionPercentStr === "number") {
        commissionPercent = commissionPercentStr < 1 ? commissionPercentStr * 100 : commissionPercentStr;
      }
      
      // Check if it's any technician with 0% commission
      if (commissionPercent === 0) {
        has0PercentCommission = true;
        console.log(`Detected technician with 0% commission rate: ${technicianName}. Skipping PBP and Spiff/Bonus processing.`);
      }
    } catch (e) {
      console.error(`Error checking commission status: ${e.message}`);
      // Continue with processing to be safe
    }
    
    // 1. Process Spiff/Bonus - Only if not a technician with 0% commission
    if (!has0PercentCommission) {
      try {
        var spiffBonusSheet = ss.getSheetByName('Spiff/Bonus');
        if (spiffBonusSheet) {
          // Try the more direct function first
          try {
            processSpiffAndBonusData(techSheet, technicianName, spiffBonusSheet);
            processResults.spiffBonus = true;
          } catch (e) {
            console.error(`Error using processSpiffAndBonusData: ${e.message}. Falling back.`);
            
            // Fall back to the main function
            processSpiffAndBonus(techSheet, technicianName, spiffBonusSheet, ratesSheet, tempRow, tempCol);
            processResults.spiffBonus = true;
          }
        }
      } catch (e) {
        console.error(`Error processing Spiff/Bonus for ${technicianName}: ${e.message}`);
      }
    } else {
      // Mark as skipped but successful since it's intentional
      processResults.spiffBonus = true;
      console.log(`Skipped Spiff/Bonus processing for technician with 0% commission: ${technicianName}`);
    }
    
    // 2. Process PBP - Only if not a technician with 0% commission
    if (!has0PercentCommission) {
      try {
        // Try with skipStatusUpdate parameter
        try {
          updatePBPForTechnician(technicianName, tempRow, tempCol, true);
          processResults.pbp = true;
        } catch (e) {
          console.error(`Error with skipStatusUpdate parameter: ${e.message}`);
          // Fall back to standard call
          updatePBPForTechnician(technicianName, tempRow, tempCol);
          processResults.pbp = true;
        }
      } catch (e) {
        console.error(`Error processing PBP for ${technicianName}: ${e.message}`);
      }
    } else {
      // Mark as skipped but successful since it's intentional
      processResults.pbp = true;
      console.log(`Skipped PBP processing for technician with 0% commission: ${technicianName}`);
    }
    
    // 3. Process Yard Signs - Only if not a technician with 0% commission
    if (!has0PercentCommission) {
      try {
        if (typeof initYardSign === 'function') {
          initYardSign();
          
          if (typeof updateYardSignForTechnician === 'function') {
            try {
              updateYardSignForTechnician(technicianName, tempRow, tempCol, true);
              processResults.yardSign = true;
            } catch (e) {
              // Fall back to standard call
              updateYardSignForTechnician(technicianName, tempRow, tempCol);
              processResults.yardSign = true;
            }
          }
        }
      } catch (e) {
        console.error(`Error processing Yard Signs for ${technicianName}: ${e.message}`);
      }
    } else {
      // Mark as skipped but successful since it's intentional
      processResults.yardSign = true;
      console.log(`Skipped Yard Signs processing for technician with 0% commission: ${technicianName}`);
    }
    
    // 3.5. Process Lead Sets - Only if not a technician with 0% commission
    if (!has0PercentCommission) {
      try {
        var leadSetSheet = ss.getSheetByName('Lead Set');
        if (leadSetSheet) {
          try {
            // Get lead data for this technician
            var leadData = getLeadDataForTechnician(leadSetSheet, technicianName);
            
            // Write the lead data to the technician's sheet
            writeLeadSetDataToSheet(techSheet, leadData);
            
            processResults.leadSet = true;
          } catch (e) {
            console.error(`Error processing Lead Set for ${technicianName}: ${e.message}`);
          }
        } else {
          console.log(`Lead Set sheet not found, skipping Lead Set processing for ${technicianName}`);
        }
      } catch (e) {
        console.error(`Error in Lead Set processing for ${technicianName}: ${e.message}`);
      }
    } else {
      // Mark as skipped but successful since it's intentional
      processResults.leadSet = true;
      console.log(`Skipped Lead Set processing for technician with 0% commission: ${technicianName}`);
    }
    
    // 4. Process Timesheet - Simplified with better error handling
    try {
      try {
        updateHoursForTechnician(technicianName, tempRow, tempCol, true);
        processResults.timesheet = true;
      } catch (e) {
        // Fall back to standard call
        updateHoursForTechnician(technicianName, tempRow, tempCol);
        processResults.timesheet = true;
      }
    } catch (e) {
      console.error(`Error processing Timesheet for ${technicianName}: ${e.message}`);
    }
    
    // 5. Copy the total pay value from cell C18 in technician's sheet to column I in rates sheet
    try {
      // Get the total pay value from the technician's sheet (cell C18)
      var totalPayValue = techSheet.getRange("C18").getValue();
      
      // If we don't already have ratesMapping, get it now
      if (!ratesMapping) {
        ratesMapping = getRatesSheetMapping();
      }
      
      // Find the technician's row in the rates sheet if not already known
      if (!tempRow) {
        tempRow = findTechnicianRow(ratesSheet, technicianName, ratesMapping.dataStartRow);
      }
      
      // If we found the row, update column I with the total pay value
      if (tempRow > 0) {
        // Column I is the 9th column (index 9)
        ratesSheet.getRange(tempRow, 9).setValue(totalPayValue);
        console.log(`Updated pay value for ${technicianName} in Hourly + Spiff Pay sheet: ${totalPayValue}`);
        
        // Add warning emoji to Column D of technician's sheet (merged cell)
        techSheet.getRange("D2").setValue("⚠️");
      } else {
        console.error(`Could not find row for ${technicianName} in Hourly + Spiff Pay sheet`);
      }
    } catch (e) {
      console.error(`Error copying total pay for ${technicianName}: ${e.message}`);
    }
    
    // Set status to Complete (only if we have valid row and column)
    if (actionRow && actionColumn) {
      setActionStatus(ratesSheet, actionRow, actionColumn, 'Complete');
    }
    
    // No popup for individual technician processing when running bulk payroll
  } catch (error) {
    console.error(`Error in processPayrollForTechnicianSilently for ${technicianName}: ${error.message}`);
    // Don't show alerts or set error status - just log to console
  }
}

/**
* Runs all payroll functions in sequence for a single technician
* @param {string} technicianName - The name of the technician to process
* @param {number} actionRow - The row in the Hourly + Spiff Pay sheet where the action was triggered
* @param {number} actionColumn - The column in the Hourly + Spiff Pay sheet where the action was triggered
*/
function runPayrollForTechnician(technicianName, actionRow, actionColumn) {
  try {
    var ui = SpreadsheetApp.getUi();
    var ss = SpreadsheetApp.getActiveSpreadsheet();
    var ratesSheet = ss.getSheetByName('Hourly + Spiff Pay');
    
    // Call the silent version of the function
    processPayrollForTechnicianSilently(technicianName, actionRow, actionColumn);
    
    // Show a popup for individual technician processing
    ui.alert(`Payroll processing completed for ${technicianName}.`);
  } catch (error) {
    console.error(`Error in runPayrollForTechnician for ${technicianName}: ${error.message}`);
    
    // Set status to Error
    if (actionRow && actionColumn) {
      try {
        setActionStatus(ratesSheet, actionRow, actionColumn, 'Error');
      } catch (e) {
        console.error("Failed to set error status: " + e.message);
      }
    }
    
    // Show error alert
    ui.alert(`Error processing payroll for ${technicianName}: ${error.message}`);
  }
}