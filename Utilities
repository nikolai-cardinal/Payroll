/**
* Cardinal Payroll System - Utilities
* This script contains utility functions used across the payroll system.
*/

/**
 * Sets the status in the Action column of the rates sheet.
 * @param {Sheet} ratesSheet The 'Hourly + Spiff Pay' sheet object.
 * @param {number} row The 1-based row index.
 * @param {number} col The 1-based column index (should be the Action column).
 * @param {string} status The status to set (e.g., 'Complete', 'Error', 'Processing...').
 */
function setActionStatus(ratesSheet, row, col, status) {
  if (!ratesSheet || !row || !col || !status) {
    console.error("setActionStatus: Invalid parameters provided.");
    return;
  }
  try {
    ratesSheet.getRange(row, col).setValue(status);
  } catch (e) {
    console.error(`Failed to set status to '${status}' at row ${row}, col ${col}: ${e.message}`);
    // Consider adding a UI alert here if this failure is critical
    // SpreadsheetApp.getUi().alert(`Failed to update status for row ${row}. Please check logs.`);
  }
}

/**
* Gets the current pay period from Hourly + Spiff Pay sheet
* @return {string} The current pay period string
*/
function getCurrentPayPeriod() {
  try {
    var ss = SpreadsheetApp.getActiveSpreadsheet();
    var ratesSheet = ss.getSheetByName(HOURLY_SPIFF_SHEET_NAME);
    
    if (!ratesSheet) {
      console.error("Hourly + Spiff Pay sheet not found!");
      return "Current Pay Period";
    }
    
    // Get pay period from cell F1
    var payPeriod = ratesSheet.getRange(1, 6).getValue();
    
    // If it's a date object, format it appropriately
    if (payPeriod instanceof Date) {
      payPeriod = Utilities.formatDate(payPeriod, Session.getScriptTimeZone(), "M/dd - M/dd Matisse");
    }
    
    return payPeriod.toString() || "Current Pay Period";
  } catch (error) {
    console.error("Error in getCurrentPayPeriod: " + error.message);
    return "Current Pay Period";
  }
}

/**
* Helper function to find a technician's row in the rates sheet
* @param {Sheet} sheet - The rates sheet to search in
* @param {string} techName - The technician name to find
* @param {number} startRow - The row to start searching from
* @return {number} The row number (1-based) or -1 if not found
*/
function findTechnicianRow(sheet, techName, startRow) {
  if (!sheet) return -1;
  
  var nameColumn = 1; // Assuming technician name is in column A
  var data = sheet.getRange(startRow, nameColumn, sheet.getLastRow() - startRow + 1, 1).getValues();
  for (var i = 0; i < data.length; i++) {
    if (data[i][0] === techName) {
      return startRow + i; // Convert to actual row number
    }
  }
  
  return -1; // Not found
}

/**
 * Safe method to get a sheet by name with error handling
 * @param {string} sheetName - The name of the sheet to retrieve
 * @param {boolean} suppressAlert - If true, will not display alert for missing sheet
 * @return {Sheet|null} The sheet object or null if not found
 */
function getSheetByName(sheetName, suppressAlert) {
  try {
    var ss = SpreadsheetApp.getActiveSpreadsheet();
    var sheet = ss.getSheetByName(sheetName);
    
    if (!sheet && !suppressAlert) {
      console.error(`Sheet not found: ${sheetName}`);
      SpreadsheetApp.getUi().alert(`Could not find the '${sheetName}' sheet. Please check if it exists.`);
    }
    
    return sheet;
  } catch (e) {
    console.error(`Error getting sheet '${sheetName}': ${e.message}`);
    if (!suppressAlert) {
      SpreadsheetApp.getUi().alert(`Error accessing '${sheetName}' sheet: ${e.message}`);
    }
    return null;
  }
}

/**
 * Safely parses a percentage value from various formats
 * @param {string|number} percentValue - The percentage value to parse
 * @return {number} The percentage as a number (e.g., 50 for 50%)
 */
function parsePercentage(percentValue) {
  if (percentValue === null || percentValue === undefined) {
    return 0;
  }
  
  try {
    // If it's already a number
    if (typeof percentValue === "number") {
      // If it's less than 1, assume it's a decimal percentage (e.g., 0.5 for 50%)
      return percentValue < 1 ? percentValue * 100 : percentValue;
    }
    
    // If it's a string with % sign
    if (typeof percentValue === "string" && percentValue.includes("%")) {
      return parseFloat(percentValue.replace("%", "")) || 0;
    }
    
    // If it's a string with just a number
    if (typeof percentValue === "string") {
      return parseFloat(percentValue) || 0;
    }
    
    return 0;
  } catch (e) {
    console.error(`Error parsing percentage value '${percentValue}': ${e.message}`);
    return 0;
  }
}

/**
 * Safely formats a currency value
 * @param {number} value - The value to format as currency
 * @param {boolean} includeSymbol - Whether to include the $ symbol
 * @return {string} The formatted currency string
 */
function formatCurrency(value, includeSymbol) {
  if (value === null || value === undefined || isNaN(value)) {
    return includeSymbol ? "$0.00" : "0.00";
  }
  
  try {
    var formatter = new Intl.NumberFormat('en-US', {
      style: includeSymbol ? 'currency' : 'decimal',
      currency: 'USD',
      minimumFractionDigits: 2,
      maximumFractionDigits: 2
    });
    
    return formatter.format(value);
  } catch (e) {
    // If Intl is not available (older GAS versions), fallback to manual formatting
    var formattedValue = Math.round(value * 100) / 100;
    formattedValue = formattedValue.toFixed(2);
    
    if (includeSymbol) {
      return "$" + formattedValue;
    }
    
    return formattedValue;
  }
} 