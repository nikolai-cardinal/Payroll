/**
 * Cardinal Payroll System - Technician Rates
 * This script handles updating technician hourly rates.
 */

/**
 * Updates hourly rates for all technician sheets 
 * Ignores the action column status completely
 */
function updateAllTechnicianRates() {
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var ratesSheet = ss.getSheetByName('Hourly + Spiff Pay');
  
  if (!ratesSheet) {
    SpreadsheetApp.getUi().alert('Hourly + Spiff Pay sheet not found!');
    return;
  }
  
  // Get mapping for rates sheet
  var ratesMapping = getRatesSheetMapping();
  
  // Get all data from the rates sheet
  var ratesData = ratesSheet.getDataRange().getValues();
  
  // Create lookup objects for quick access
  var techRates = {};
  var techPositions = {};
  
  // Start from data start row (skipping headers)
  for (var i = ratesMapping.dataStartRow - 1; i < ratesData.length; i++) {
    var row = ratesData[i];
    var techName = row[ratesMapping.nameColumn - 1];
    var techPosition = row[ratesMapping.positionColumn - 1];
    var techRate = row[ratesMapping.rateColumn - 1];
    
    // Skip empty rows
    if (!techName) continue;
    
    techRates[techName] = techRate;
    techPositions[techName] = techPosition;
  }
  
  // Get the current pay period
  var currentPayPeriod = getCurrentPayPeriod();
  
  // Get all sheets in the spreadsheet
  var sheets = ss.getSheets();
  
  // List of sheets to exclude (not technician sheets)
  var excludedSheets = [
    'Hourly + Spiff Pay', 'PLB Install PBP', 'Spiff', 'Sample', 
    'Summary', 'Time Sheet', 'Spiff/Bonus', 'Service', 'Yard Sign', 
    'Sheet2', 'Template for Service'
  ];
  
  var updatedCount = 0;
  var skippedCount = 0;
  var processedTechs = [];
  var errors = [];
  
  // Go through each sheet
  for (var i = 0; i < sheets.length; i++) {
    var sheet = sheets[i];
    var sheetName = sheet.getName();
    
    // Skip sheets that aren't technician sheets
    if (excludedSheets.includes(sheetName)) {
      continue;
    }
    
    // Check if this sheet name matches a technician
    if (techRates[sheetName]) {
      try {
        console.log('Processing ' + sheetName + ' with rate: ' + techRates[sheetName]);
        
        // Get mapping for this technician sheet (for position and pay period rows)
        var mapping = getTechnicianSheetMapping(sheet);
        
        // Update the position
        sheet.getRange(mapping.positionRow, 1).setValue(techPositions[sheetName]);
        
        // Update hourly rate directly in B5
        sheet.getRange(5, 2).setValue(techRates[sheetName]);
        
        // Update PTO rate (if applicable) - directly reference the cell if needed
        if (mapping.ptoRateColumn) {
          sheet.getRange(5, mapping.ptoRateColumn).setValue(techRates[sheetName]);
        }
        
        // Update pay period
        sheet.getRange(mapping.payPeriodRow, 1).setValue("Pay Period: " + currentPayPeriod);
        
        updatedCount++;
        processedTechs.push({
          name: sheetName,
          rate: techRates[sheetName]
        });
        console.log('Updated rates for ' + sheetName);
      } catch (error) {
        console.error("Error updating rates for " + sheetName + ": " + error.message);
        errors.push(sheetName + ": " + error.message);
        skippedCount++;
      }
    } else {
      skippedCount++;
      console.log('Skipped ' + sheetName + ' - Not found in Hourly + Spiff Pay sheet');
    }
  }
  
  // Build a pretty summary message
  var summaryMessage = [];
  summaryMessage.push("RATE UPDATE COMPLETE");
  
  // Add summary section
  summaryMessage.push("\nSUMMARY:");
  summaryMessage.push("• Total Technicians Updated: " + updatedCount);
  if (skippedCount > 0) {
    summaryMessage.push("• Technicians Skipped: " + skippedCount);
  }
  
  // Add technician details section
  if (processedTechs.length > 0) {
    summaryMessage.push("\nDETAILS BY TECHNICIAN:");
    
    for (var t = 0; t < processedTechs.length; t++) {
      var tech = processedTechs[t];
      summaryMessage.push("\n" + tech.name + ":");
      summaryMessage.push("• New Rate: $" + tech.rate.toFixed(2) + "/hr");
    }
  }
  
  // Add errors section if we have any
  if (errors.length > 0) {
    summaryMessage.push("\nERRORS:");
    for (var e = 0; e < errors.length; e++) {
      summaryMessage.push("• " + errors[e]);
    }
  }
  
  // Show the popup
  SpreadsheetApp.getUi().alert(summaryMessage.join("\n"));
}