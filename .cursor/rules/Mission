Do *not* add new business logic in this document; reference it from modules.

# Micro-step Migration Plan (v2)
This plan breaks the original four-phase migration into **actionable micro steps** for **every file** listed in _DesiredFileStructure_. Each micro step is paired with an **explicit instruction for Cursor's AI** so you can copy-paste directly into the chat to perform the step.

>  Follow the rules in `.cursor/rules/Rules` at all times (no duplicate triggers, keep files < 500 lines, update documentation, etc.).

---
## Phase 0 â€“ Pre-flight audit (read-only)
1. [ ] **Inventory current codebase**  
   Cursor AI â†’ _"Search the workspace for all `.gs` files and list their paths in a table so we can spot anything that is not present in DesiredFileStructure."_
2. [ ] **Locate duplicate triggers** (`onOpen`, `onEdit`)  
   Cursor AI â†’ _"Search all files for `function on(Open|Edit)` to count how many exist and display their containing paths."_
3. [ ] **Find hard-coded sheet names**  
   Cursor AI â†’ _"Search the workspace for the string `'Hourly + Spiff Pay'` and `'Main'` to see where they are still hard-coded."_


---
## Phase 1 â€“ Directory & stub scaffolding (zero-logic moves)
Use `mkdir -p` & empty stub files **only when missing**. Skip if the path already exists.

### 1.1 Create top-level tree
- [ ] `/src/core`
- [ ] `/src/shared`
- [ ] `/src/modules/<name>` for every module in DesiredFileStructure.
  Cursor AI â†’ _"Ensure each directory exists; create if absent."_

### 1.2 Stub files (one per upcoming real file)
Create the following **only if they do not already exist**. Each stub must initialise the namespace and do **nothing else**.
```
var Modules = Modules || {};
Modules.<Namespace> = Modules.<Namespace> || {};
```
| Stub Path | Namespace |
|-----------|-----------|
| src/core/Main.gs          | Main          |
| src/core/Menu.gs          | Menu          |
| src/core/Utilities.gs     | Utilities     |
| src/core/TechnicianRates.gs | TechnicianRates |
| src/core/Constants.gs     | Constants     |
| src/core/Proxies.gs       | Proxies       |
| src/shared/SheetUtils.gs  | SheetUtils    |
| src/shared/DateUtils.gs   | DateUtils     |
| src/shared/ErrorHandlers.gs | ErrorHandlers |
| src/shared/Cache.gs       | Cache         |
| â€¦one `index.gs` inside every module folder | e.g. `Modules.ApprovedMonitor` |

Cursor AI â†’ _"For each row in the table, create the file if absent and drop the 3-line namespace stub."_

### 1.3 Update manifest (Apps Script load order)
- [âœ…] Verify that the project manifest includes the new `src/**` paths **alphabetically** before legacy ones so stubs load first.  
  Cursor AI â†’ _"Open the manifest (`appsscript.json`) and ensure `src/` file paths appear early enough for Apps Script evaluation order."_


---
## Phase 2 â€“ Core extraction (file-by-file)
Below is a **checklist per core file**. Complete all check-boxes _inside_ a file before moving to the next one.

### 2.1 File: `src/core/Constants.gs`
1. [âœ…] Define immutable objects `SHEET` & `MENU` as per Functions_Documentation.  
   Cursor AI â†’ _"Insert:
   ```js
   const SHEET = Object.freeze({
     MAIN: 'Main',
     SPIFF: 'Spiff/Bonus',
     SERVICE: 'Service',
   });
   const MENU = Object.freeze({ ROOT: 'ðŸšš Technician Tools' });
   Modules.Constants = { SHEET, MENU };
   ```"_
2. [âœ…] Search entire codebase for hard-coded sheet/menu strings; replace with `Modules.Constants.SHEET.*` / `MENU.*`.  
   Cursor AI â†’ _"Search-and-replace all `'Main'`, `'Spiff/Bonus'`, etc., with the constant."_
3. [âœ…] Update Functions_Documentation section **5. Constants** if new sheets are added.

### 2.2 File: `src/core/Main.gs`
1. [âœ…] Collect **all** existing `onOpen` & `onEdit` definitions; keep only **one** of each here.  
   Cursor AI â†’ _"Move any trigger code from legacy files into this file, deleting the duplicates afterwards."_
2. [âœ…] Strip out any business logic; delegate through `Modules.<Module>.handleEdit` and `addMenuEntries` as documented.  
   Cursor AI â†’ _"Replace in-file calculations with calls like `Modules.SpiffBonus.handleEdit(e)`. Preserve order documented in Functions_Documentation."_
3. [âœ…] Ensure file â‰¤ 500 lines, add explanatory JSDoc.  
   Cursor AI â†’ _"Remove comments or extract helpers to keep under limit."_

### 2.3 File: `src/core/Menu.gs`
1. [âœ…] Create single function `buildRootMenu(ui)` that iterates over `Modules.<Module>.addMenuEntries(ui)`.  
   Cursor AI â†’ _"Implement and call it from `onOpen`."_
1. [âœ…] Search for common one-off helpers duplicated across modules (e.g. logging, array flatten).   
2. [âœ…] Remove any redundant menu-building code scattered in modules once delegation works.

### 2.4 File: `src/core/Utilities.gs`
1. [âœ…] Search for common one-off helpers duplicated across modules (e.g. logging, array flatten).  
   Cursor AI â†’ _"Extract any generic helpers found and place them here."_
2. [âœ…] Ensure nothing here overlaps with dedicated shared utils (Sheet/Date/Error/Cache).

### 2.5 File: `src/core/TechnicianRates.gs`
1. [âœ…] Move any technician rate lookup tables or constants here from legacy scripts.  
   Cursor AI â†’ _"Locate arrays like `TECH_RATES` and relocate."_

### 2.6 File: `src/core/Proxies.gs`
1. [âœ…] Add wrappers needed for backward-compatibility (e.g. `processAllPBPGlobal`).  
   Cursor AI â†’ _"For each deleted global function, create a thin wrapper that calls the new module API."_


---
## Phase 3 â€“ Shared utilities consolidation
### 3.1 `src/shared/SheetUtils.gs`
- [âœ…] Implement `getSheetByName`, `findRowByValue`, `setActionStatus` exactly once.  
  Cursor AI â†’ _"Find duplicates across modules; extract and centralise."_

### 3.2 `src/shared/DateUtils.gs`
- [âœ…] Implement `parseDate`, `formatDate`, `getCurrentPayPeriod`.  

### 3.3 `src/shared/ErrorHandlers.gs`
- [âœ…] Implement `withErrorAlert(fn, context)` wrapper.  

### 3.4 `src/shared/Cache.gs`
- [âœ…] Create lightweight in-memory cache (`PropertiesService`) if repeated expensive reads exist.  

After each util is stable, **remove duplicated code** from modules and update their imports.


---
## Phase 4 â€“ Module migration (repeat for every module)
Perform the following sub-steps inside **each** `/src/modules/<module>/` directory.

>  Use the template below; substitute `<Module>` with the real module name (ApprovedMonitor, TimeSheet, SpiffBonus, PBP, YardSign, LeadSet, NewTechnician).

### Template â€‘ per module
1. [âœ…] **index.gs** â€“ public entry
    - Ensure it exports exactly: `addMenuEntries`, `handleEdit`, `processAll` (if batch function exists).  
      Cursor AI â†’ _"Move these from legacy files or create thin wrappers that call internal logic."_
2. [âœ…] **Move internal files**
    - Relocate algorithmic files (e.g. `<Module>MainProcessor`, `<Module>Utilities`, etc.) from legacy folders into this module folder.  
      Cursor AI â†’ _"Physically move code or copy-paste, then delete original to avoid duplicates."_
3. [âœ…] **Remove global namespace pollution**
    - Wrap internal helpers in an IIFE or keep them file-scoped; expose only via the index.  
      Cursor AI â†’ _"Replace any `globalVariable = ...` with module-scoped consts."_
4. [âœ…] **Constants & shared utils**
    - Replace hard-coded sheet names with `Modules.Constants.SHEET.*`.  
      Cursor AI â†’ _"Search-and-replace within module."_
5. [âœ…] **Documentation**
    - Append/update module API section in `Functions_Documentation`.  
      Cursor AI â†’ _"Add new or renamed public functions under the correct heading."_

### Modules checklist
| Module | Internal Files to migrate | Status 4.3 | Status 4.4 | Status 4.5 |
|--------|--------------------------|------------|------------|------------|
| approvedMonitor | ApprovedMonitor, MonitorLoader, ReportUpload | âœ… | âœ… | âœ… |
| timeSheet | TimeSheetLogic, TimesheetActions | âœ… | âœ… | âœ… |
| spiffBonus | SpiffBonusMainProcessor, SpiffBonusDataHandler, SpiffBonusUtilities, SpiffBonusSectionHandlers, SpiffBonusSummaryUpdater, SpiffBonusHeaderMap | âœ… | âœ… | âœ… |
| pbp | PBPCalculation, PBPSheetOperations, PBPUtilities | âœ… | âœ… | âœ… |
| yardSign | YardSignMain, YardSignCalculation, YardSignSheetOperations, YardSignUtilities | âœ… | âœ… | âœ… |
| leadSet | LeadSetMain, LeadSetCalculation, LeadSetSheetOperations, LeadSetUtilities | âœ… | âœ… | âœ… |
| newTechnician | NewTechnicianSheet | âœ… | âœ… | âœ… |

Cursor AI â†’ _"Iterate over the table; for each row apply the template steps 1-5."_


---
## Phase 5 â€“ Data & Docs alignment
- [ ] Move static data files (`CallByCall`, `CallByCallData`, `SpiffBonusDirectoryExplanation`) to `/src/data`.  
   Cursor AI â†’ _"Relocate files; update any code that reads them."_
- [ ] Ensure `/docs` contains updated README and `popup_debrief_modification_guide`.  
   Cursor AI â†’ _"Search for outdated relative paths inside docs and fix."_


---
## Phase 6 â€“ Cleanup & validation
1. [ ] **Smoke-test after every module** (spreadsheet UI + trigger functions).  
   Cursor AI â†’ _"Run unit smoke tests or manual tests for each migrated module."_
2. [ ] Delete legacy root-level directories once their code is confirmed migrated.  
   Cursor AI â†’ _"Double-check no remaining references before deletion."_
3. [ ] Re-run duplicate trigger & hard-coded string searches â€“ expect **zero results**.  
   Cursor AI â†’ _"Repeat searches from Phase 0."_

---
## Phase 7 â€“ Final polish
1. [ ] **Ensure every file < 500 lines**, split further if necessary.  
2. [ ] **Run ESLint / clasp push dry-run** for syntax errors.  
3. [ ] **Update Function_Documentation** for any late changes.  
4. [ ] Celebrate â€“ codebase now minimal, robust, and modular!  

---
### End of Micro-step Plan
Copy each *Cursor AI* instruction one by one; after the AI completes it, tick the checkbox and proceed to the next. This guarantees a safe, incremental migration without feature loss.
