1. Always before writing a new code make sure there are no existing code available that doing the simulair option.
2. Make sure your code is minimal and don't contains extra unnessary script. 
3. Always double check the script before providing it to me.   
4. Don't ever create a new files only inless receive explisit direction to do so. 
5. If you ever create the new file allways update @FILE_STRUCTURE file to be updated version. 
6. When adding triggers (e.g. `onOpen`, `onEdit`) or building menus, first search the codebase for existing definitions and extend them or expose helper functions instead of introducing duplicate trigger functions to prevent menu collisions. 
7. The sheet previously named 'Hourly + Spiff Pay' has been renamed to 'Main'. Always reference the sheet as 'Main' and update any existing occurrences of the old name when modifying or adding code. 
8. Make sure that Main and any file do not Exceed 500 lines of code. 
9. `Main` must contain only trigger functions and high-level delegation; no business logic. 500-line hard limit.
10. Each functional module must expose a single public entry file named `index` that `Main` calls.
11. All sheet names and global constants live in `src/core/Constants`. `Main` should import/reference them instead of hardcoding.
12. Any backward-compatibility wrapper functions belong in `src/core/Proxies`, never in `Main`. 
13. Always edit function documentation file. 
14. `src/core/Constants` must export immutable objects `SHEET` (sheet names) and `MENU` (UI labels) and attach them to `Modules.Constants` for global access. 
15. Make sure that wihen you modifying the code the features that are existing in the existing code are never erased. 
16. When looking for the files never look with the file name.gs. Only look for file mane without .gs
17. Only files without the .gs extension in their filenames are loaded to Google Apps Script. When referring to files in the codebase, always use the base name without the .gs extension.
18. IMPORTANT: Always review files in @core, @shared, and any related utility modules (like TechnicianUtils) when troubleshooting errors or developing new functionality. These contain critical shared functionality and utilities that many modules depend on.
19. When implementing code that references another module, always check if that module exists and has the expected functions before calling them. Implement appropriate fallbacks when necessary.
20. Pay special attention to code in src/core/Proxies as it contains backward-compatibility wrappers that may hide the actual implementation location.
21. Module dependencies should always be clearly documented at the top of each file, especially for shared utilities and helpers.
22. NEVER add duplicate menu items. Before adding any menu entry in a module's `addMenuEntries` function, check src/core/Menu to ensure it's not already defined there. If core Menu already defines an entry (like 'All PBP'), the module should NOT add a similar entry (like 'Process PBP').
23. When delegating to module functionality from `Main` or elsewhere, search and consider functions in sub-namespaces (e.g. `Modules.<Module>.Main.*`) as valid targets. Always include these nested implementations in your fallback chain to avoid "No valid function found" errors.