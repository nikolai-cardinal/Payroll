// Integration smoke test for Progress panel during runFullPayroll
/* global Modules, Logger, CacheService, SpreadsheetApp, HtmlService */

function testFullPayrollProgress() {
  if (!Modules || !Modules.Shared || !Modules.Shared.Progress) {
    throw new Error('Modules.Shared.Progress missing');
  }

  // Backup real modules to restore later
  var moduleNames = ['SpiffBonus', 'PBP', 'TechKPI', 'YardSign', 'TimeSheet', 'LeadSet'];
  var moduleBackups = {};
  moduleNames.forEach(function (n) {
    moduleBackups[n] = Modules[n];
    // Stub with lightweight processAll to avoid side-effects
    Modules[n] = {
      processAll: function () {
        Modules.Shared.Progress.log(n + ' stub complete');
      },
    };
  });

  // Stub Utilities needed by runFullPayroll
  var utilBackup = Modules.Utilities;
  Modules.Utilities = {
    getPayPeriodTextFromMain: function () {
      return 'Test Period';
    },
    syncPayPeriodHeaderForAllTechnicians: function () {},
  };

  // Stub Spreadsheet UI (alert + modeless)
  var uiStub = {
    alert: function (msg) {
      Logger.log('UI.alert stub: ' + msg);
      return { getSelectedButton: function () {}, getResponseText: function () { return ''; } };
    },
    showModelessDialog: function () {},
  };
  var ssApp = SpreadsheetApp;
  var originalGetUi = ssApp.getUi;
  ssApp.getUi = function () {
    return uiStub;
  };

  try {
    Modules.Shared.Progress.clear();

    runFullPayroll(); // Execute the real function

    var logs = Modules.Shared.Progress.get();
    if (logs.length === 0) {
      throw new Error('Progress log remained empty after runFullPayroll');
    }
    Logger.log('âœ“ Integration test: runFullPayroll produced ' + logs.length + ' log entries');
  } finally {
    // Restore originals
    moduleNames.forEach(function (n) {
      Modules[n] = moduleBackups[n];
    });
    Modules.Utilities = utilBackup;
    ssApp.getUi = originalGetUi;
  }
} 