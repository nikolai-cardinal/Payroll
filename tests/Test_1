// BonusMain – minimal implementation replicating Spiff Bonus logic described
// Depends on BonusUtilities located in the same folder.

/**
 * Processes BONUS entries for a single technician and writes results to their sheet.
 *
 * Logic (adapted to new Spiff/Bonus sheet layout):
 *   1. Qualifying row when
 *        (a) Technician appears in both Sold By (col E) AND Technician (col F)
 *            OR
 *        (b) Sold By is blank AND technician appears in Technician (F) *or* in
 *            Assigned Technicians (G)
 *   2. Commission taken from column K ($ Bonus).
 */
function Bonus_updateForTechnician(technicianName, opt_actionRow, opt_actionCol, opt_suppressPopup) {
    if (!technicianName) return;
    technicianName = String(technicianName).trim();
    var techLower = technicianName.toLowerCase();
  
    var ss          = SpreadsheetApp.getActiveSpreadsheet();
    var bonusSheet  = ss.getSheetByName('Spiff/Bonus');
    var ratesSheet  = ss.getSheetByName('Main'); // renamed sheet (was "Hourly + Spiff Pay")
    var techSheet   = ss.getSheetByName(technicianName);
    var ui          = SpreadsheetApp.getUi();
  
    if (!bonusSheet || !techSheet) {
      ui.alert('Required sheet missing (Spiff/Bonus or technician sheet)');
      return;
    }
  
    // Map headers → indices ------------------------------------------------------
    var map = Bonus_getHeaderMap(bonusSheet);
  
    // Grab data (including header) once -----------------------------------------
    var data = bonusSheet.getDataRange().getValues();
    if (data.length < 2) return; // nothing
  
    // Iterate rows, collect qualifying entries ----------------------------------
    var entries   = [];
    var totalPay  = 0;
  
    for (var r = 1; r < data.length; r++) { // skip header row 0
      var row = data[r];
      var soldBy        = (row[map.soldBy - 1]       || '').toString().trim();
      var primaryTech   = (row[map.technician - 1]    || '').toString().trim();
      var assignedStr   = (row[map.assignedTechs - 1] || '').toString();
  
      var assignmentMatch = primaryTech.toLowerCase() === techLower ||
                            Bonus_parseTechnicianNames(assignedStr).some(function(n){return n.toLowerCase() === techLower;});
      var soldByMatch     = soldBy.toLowerCase() === techLower;
  
      var qualifies = (soldByMatch && assignmentMatch) || (!soldBy && assignmentMatch);
      if (!qualifies) continue;
  
      var amountRaw = row[map.bonusAmount - 1];
      var amount = parseFloat(String(amountRaw).replace(/[^0-9.+-]/g, '')) || 0;
      if (!amount) continue;
  
      totalPay += amount;
      entries.push({
        customer:       row[map.customerName - 1]   || '',
        businessUnit:   row[map.businessUnit - 1]   || '',
        date:           row[map.completionDate - 1] || '',
        amount:         amount,
        itemName:       row[map.itemName - 1]       || '',
        soldBy:         soldBy                               // preserve original sold-by tech name
      });
    }
  
    // --- Update technician sheet ------------------------------------------------
    // 1. Update summary (row with label "Bonus") — A13 in template
    var bonusRow = Bonus_findRowByColA(techSheet, 'Bonus');
    if (bonusRow > 0) {
      techSheet.getRange(bonusRow, 2).setValue(entries.length); // column B – quantity
      techSheet.getRange(bonusRow, 3).setValue(totalPay);       // column C – total amount
    }
  
    // 2. Append detailed lines to technician sheet (columns E:J) ---------------
    if (entries.length) {
      _Bonus_writeToTechSheet(techSheet, entries);
    }
  
    // 3. Mark action column complete if provided --------------------------------
    if (ratesSheet && opt_actionRow && opt_actionCol) {
      try {
        ratesSheet.getRange(opt_actionRow, opt_actionCol).setValue('Complete');
      } catch (ignore) {}
    }
  
    // Popup summary (only when not suppressed) ----------------------------------
    if (!opt_suppressPopup) {
      ui.alert('Bonus processed for ' + technicianName + '. Total: $' + totalPay.toFixed(2) + ' (' + entries.length + ' entries)');
    }
  
    return totalPay;
  }
  
  /**
   * Processes BONUS for every technician listed on the Main sheet that has an
   * individual sheet.
   */
  function Bonus_runBatch(opt_suppressPopup) {
    var silent = !!opt_suppressPopup;
    var ss   = SpreadsheetApp.getActiveSpreadsheet();
    var main = ss.getSheetByName('Main');
    if (!main) {
      var msgMain = 'Main sheet not found';
      if (silent) return { ok:false, message:msgMain };
      return SpreadsheetApp.getUi().alert(msgMain);
    }
  
    var map = { nameColumn: 1, actionColumn: 7, dataStartRow: 3 }; // mirrors getRatesSheetMapping fallback
    var data = main.getRange(map.dataStartRow, map.nameColumn, main.getLastRow() - map.dataStartRow + 1, 1).getValues();
  
    var names = data.map(function(r){return String(r[0]).trim();}).filter(Boolean);
    var processed = 0,
        total = 0,
        details = [];
  
    names.forEach(function(name){
      if (!ss.getSheetByName(name)) return; // skip if no individual sheet
      var pay = Bonus_updateForTechnician(name, null, null, true) || 0;
      processed++;
      total += pay;
      details.push({name:name, total:pay});
    });
  
    var ui = SpreadsheetApp.getUi();
  
    if (!processed) {
      var noneTech = 'No technician sheets processed.';
      if (silent) return { ok:false, message:noneTech };
      return ui.alert(noneTech);
    }
  
    var msg = [
      'BONUS PROCESSING COMPLETE',
      '',
      'Total Technicians Processed: ' + processed,
      'Total Paid: $' + total.toFixed(2),
      '',
      'DETAILS BY TECHNICIAN:'
    ];
  
    details.forEach(function(d){
      msg.push('\n' + d.name + ': $' + d.total.toFixed(2));
    });
  
    var summary = msg.join('\n');
    if (silent) return { ok:true, message:summary };
    ui.alert(summary);
  }
  
  // -----------------------------------------------------------------------------
  // Helper – append Bonus detail rows to technician sheet (cols E-J) -----------
  // ----------------------------------------------------------------------------
  function _Bonus_writeToTechSheet(sheet, entries) {
    // Find the header row that starts the Bonus detail section by searching
    // for the text "Customer Name" in column E (within the first ~50 rows).
    var headerRow = -1;
    var colE = sheet.getRange(1, 5, 50, 1).getValues();
    for (var r = 0; r < colE.length; r++) {
      if (String(colE[r][0]).trim().toLowerCase() === 'customer name') {
        headerRow = r + 1;
        break;
      }
    }
    if (headerRow < 0) {
      Logger.log('[BONUS] Could not locate detail section on sheet "' + sheet.getName() + '"');
      return;
    }
  
    // Determine the first empty row below the header so that new Bonus entries
    // are appended – never overwrite previously written data from earlier runs.
    var startRow = headerRow + 1;
    var scanRow  = startRow;
    while (scanRow <= sheet.getLastRow() && sheet.getRange(scanRow, 5).getValue() !== '') {
      scanRow++;
    }
    startRow = scanRow;
  
    // Transform entries into the 6-column structure expected by the technician
    // template (E → J). We show Business Unit + Item Name together in column F
    // similar to PBP to keep columns concise.
    var data = entries.map(function (e) {
      var combinedBI = '';
      if (e.businessUnit && e.itemName)      combinedBI = e.businessUnit + ' – ' + e.itemName;
      else if (e.businessUnit)               combinedBI = e.businessUnit;
      else if (e.itemName)                   combinedBI = e.itemName;
  
      return [
        e.customer,                   // Column E – Customer Name
        combinedBI,                   // Column F – Business Unit / Item
        _Bonus_fmtDate(e.date),       // Column G – Completion Date
        e.amount,                     // Column H – Bonus Amount
        (e.soldBy ? ('Sold By: ' + e.soldBy) : ''), // Column I – Sold By note
        'Bonus'                       // Column J – Type label
      ];
    });
  
    sheet.getRange(startRow, 5, data.length, 6).setValues(data);
    sheet.getRange(startRow, 8, data.length, 1).setNumberFormat('$#,##0.00');
  
    // Update summary quantity & total (row labelled "Bonus" – handled earlier)
  }
  
  function _Bonus_fmtDate(d) {
    if (d instanceof Date) {
      return Utilities.formatDate(d, Session.getScriptTimeZone(), 'MM/dd/yyyy');
    }
    return d;
  }