/**
 * @LeadSet Documentation
 * For Google Apps Script implementation in Google Sheets
 */

/**
 * 1. OVERVIEW
 * ------------
 * The Lead Set feature automates the calculation and distribution of lead-based commissions
 * for technicians based on job revenue data processed from the 'Lead Set' sheet.
 * It applies a tiered commission structure, integrates with the payroll workflow,
 * and writes detailed results to individual technician sheets.
 *
 * Key Capabilities:
 * - Automated calculation of lead commissions using a tiered percentage structure (2%, 3%, 4%).
 * - Data retrieval from the 'Lead Set' sheet, matching leads to technicians ('Lead Generated By' column).
 * - Writing calculated commission details to corresponding technician sheets.
 * - Smart data handling: Clears previous lead entries ('L-E-A-D' marker in Col J) before writing new ones.
 * - Batch processing capability via the 'All Lead Set' menu item.
 * - Updates summary totals (Lead Count, Total Commission) on technician sheets.
 * - Integration into the 'Technician Tools' > 'Payroll' menu.
 * - Option to trigger processing for a single technician via the 'Hourly + Spiff Pay' sheet's action column (setting to "leads").
 */

/**
 * 2. USAGE INSTRUCTIONS
 * ---------------------
 * 2.1 Accessing the Feature
 *     - Via Menu: Navigate to 'Technician Tools' > 'Payroll' > 'All Lead Set'. This processes leads for ALL technicians listed in 'Hourly + Spiff Pay'.
 *     - Via Action Column: In the 'Hourly + Spiff Pay' sheet, set a technician's action (Column G by default) to "leads". This triggers processing *only* for that specific technician.
 *
 * 2.2 Pre-requisites
 *     - A sheet named 'Lead Set' must exist.
 *     - Essential columns must be present in the 'Lead Set' sheet (though the script attempts to find them dynamically, the expected columns are):
 *         - Customer Name (e.g., Column C)
 *         - Job Total Revenue (or similar like 'Total') (e.g., Column E)
 *         - Lead Generated By (Technician Name) (e.g., Column G)
 *         - Completion Date (e.g., Column B) - Optional but recommended
 *         - Business Unit (e.g., Column D) - Optional but recommended
 *     - Individual sheets must exist for each technician, named exactly as they appear in the 'Lead Generated By' column of the 'Lead Set' sheet and the 'Hourly + Spiff Pay' sheet.
 *     - Technician sheets must have a recognizable structure:
 *         - A header row containing "Customer Name" (usually in Column E).
 *         - A designated column for the "L-E-A-D" marker (Column J by default).
 *         - A summary section (typically around row 14 or detected near "Lead Total") to display total leads and commission.
 *     - A sheet named 'Hourly + Spiff Pay' must exist for the 'All Lead Set' function and action column trigger, listing technician names (Column A by default).
 *
 * 2.3 Process Flow (All Lead Set Menu)
 *     1. User selects 'All Lead Set' from the menu.
 *     2. Script verifies the 'Lead Set' and 'Hourly + Spiff Pay' sheets exist.
 *     3. Script retrieves the list of technician names from 'Hourly + Spiff Pay'.
 *     4. For each technician:
 *         a. Finds the corresponding technician sheet.
 *         b. Reads the 'Lead Set' sheet and filters data for that technician using the 'Lead Generated By' column.
 *         c. If leads are found:
 *             i. Calculates commission for each lead based on 'Job Total Revenue' using tiered rates (`calculateLeadCommission` / `determineLeadSetAmount`).
 *             ii. Clears *only* previous lead entries (marked 'L-E-A-D' in Col J, typically clearing data in Cols E-J) in the technician sheet (`clearLeadDataInInstallSection` / `clearExistingLeadEntries`).
 *             iii. Writes the new calculated lead details (Customer, Date, Amount, Notes, 'L-E-A-D' marker) into the technician sheet, starting from the first empty row after the headers (`writeNewLeadEntries` / `smartWriteLeadDataToSheet`).
 *             iv. Updates the summary section (e.g., Row 14, Cols B & C) with the total count and commission amount (`updateTopSummaryLeadSet` / `updateLeadSummaryInfo`).
 *         d. If no leads are found, ensures the lead section and summary are cleared/zeroed.
 *     5. Displays a summary report to the user.
 *
 * 2.4 Process Flow (Action Column Trigger)
 *     1. User sets action column (e.g., Column G) in 'Hourly + Spiff Pay' to "leads" for a specific technician row.
 *     2. The `onEdit` trigger (in Main.js, not detailed here) calls `updateLeadSetForTechnician`.
 *     3. Script verifies the 'Lead Set' sheet and the specific technician's sheet exist.
 *     4. Performs steps 4.b through 4.d (above) for *only* the specified technician.
 *     5. Updates the action cell status (e.g., "Processing...", "Complete", "Error").
 *
 * 2.5 Menu Integration Position
 *     - Update All Rates
 *     - All Spiff/Bonus
 *     - All PBP
 *     - All Yard Signs
 *     - All Timesheet
 *     - All Lead Set  <- New Item Position
 *     - Create New Sheet
 */

/**
 * 3. TECHNICAL SPECIFICATIONS & DATA MAPPING
 * ------------------------------------------
 * 3.1 Commission Structure (`LeadSetCalculation.js::determineCommissionPercentage`)
 *     - 2% for Job Total Revenue $1 - $9,999.99
 *     - 3% for Job Total Revenue $10,000 - $29,999.99
 *     - 4% for Job Total Revenue $30,000+
 *
 * 3.2 Data Mapping
 *
 *     'Lead Set' Sheet (Source Data):
 *     ---------------------------------
 *     | Header Contains    | Example Col | Used For                             | Notes                                     |
 *     |--------------------|-------------|--------------------------------------|-------------------------------------------|
 *     | 'Lead Generated By'| G           | Matching leads to Technician Name    | **Required**. Exact match needed.         |
 *     | 'Revenue' / 'Total'| E           | Calculating commission amount        | **Required**. Must be numeric > 0.        |
 *     | 'Customer'         | C           | Populating Technician Sheet (Col E)  | **Required** for output.                  |
 *     | 'Completion Date'  | B           | Populating Technician Sheet (Col G)  | Recommended. Formatted as Date.           |
 *     | 'Business Unit'    | D           | Populating Technician Sheet (Col F)  | Recommended.                               |
 *     *Note: Script attempts to find columns dynamically (`findLeadSetColumnIndices`), but defaults may apply if headers unclear.*
 *
 *     Technician Sheet (Output Data):
 *     --------------------------------
 *     | Section / Row | Column | Content                     | Populated From ('Lead Set' Col Header) | Function Responsible              |
 *     |---------------|--------|-----------------------------|----------------------------------------|-----------------------------------|
 *     | Header Row    | E      | "Customer Name" (Expected)  | N/A (Used for finding data start)    | `findCustomerNameHeaderRow`       |
 *     | Data Rows     | E      | Customer Name               | 'Customer'                             | `writeNewLeadEntries`, etc.       |
 *     | Data Rows     | F      | Business Unit               | 'Business Unit'                        | `writeNewLeadEntries`, etc.       |
 *     | Data Rows     | G      | Completion Date             | 'Completion Date'                      | `writeNewLeadEntries`, etc.       |
 *     | Data Rows     | H      | Calculated Commission Amt   | 'Revenue' / 'Total' (via Calculation)| `calculateLeadCommission`, `write...` |
 *     | Data Rows     | I      | Calculation Notes           | 'Revenue' / 'Total' (via Calculation)| `calculateLeadCommissions`, `write...`|
 *     | Data Rows     | J      | "L-E-A-D" Marker            | N/A (Hardcoded Marker)                 | `writeNewLeadEntries`, etc.       |
 *     | Summary Area  | B      | Total Lead Count            | Count of processed leads               | `updateTopSummaryLeadSet`, etc.   |
 *     | Summary Area  | C      | Total Commission Amount     | Sum of calculated amounts              | `updateTopSummaryLeadSet`, etc.   |
 *     *Note: Summary Area (e.g., Row 14) is typically fixed but `updateLeadSummaryInfo` attempts detection.*
 *
 *     'Hourly + Spiff Pay' Sheet (Used for Triggering):
 *     -------------------------------------------------
 *     | Header Contains    | Example Col | Used For                                   |
 *     |--------------------|-------------|--------------------------------------------|
 *     | Technician Name    | A           | Identifying technicians for 'All Lead Set' |
 *     | Action             | G           | Triggering single technician update ('leads')|
 *
 * 3.3 Implementation Files
 *     - `LeadSetMain.js`: Main entry points (`menuProcessAllLeadSet`, `updateLeadSetForTechnician`), menu setup (`addLeadSetMenuItem`), top-level orchestration (`processAllLeadSet`, `processLeadData`).
 *     - `LeadSetCalculation.js`: Core commission calculation logic (`calculateLeadCommission`, `determineCommissionPercentage`, `determineLeadSetAmount`).
 *     - `LeadSetSheetOperations.js`: Handles reading from 'Lead Set' sheet (`getLeadDataForTechnician`), writing to technician sheets (`writeNewLeadEntries`, `updateTopSummaryLeadSet`), clearing old data (`clearLeadDataInInstallSection`, `findExistingLeadSetRows`), finding insertion points (`findFirstEmptyRow`). Contains `processAndWriteLeadData`.
 *     - `LeadSetUtilities.js`: Helper functions like finding/validating sheets (`findLeadSetSheet`, `validateLeadSetSheet`), finding columns (`findLeadSetColumnIndices`), getting technician list (`getTechnicianSheets`), formatting (`formatDate`, `formatCurrency`).
 *     - `LeadSet-Function`: This documentation file.
 *
 * 3.4 Key Functions & Logic Flow
 *     - `menuProcessAllLeadSet` -> `processAllLeadSet` -> `processLeadData` (loops through techs) -> `updateLeadSetForTechnician`
 *     - `updateLeadSetForTechnician` (single tech):
 *         - Finds sheets (`getSheetByName`, `findLeadSetSheet`).
 *         - Clears old data (`clearLeadDataInInstallSection`).
 *         - Calls `processAndWriteLeadData`:
 *             - Gets leads (`getLeadDataForTechnician`).
 *             - Calculates commissions (`calculateLeadCommissions`).
 *             - Writes new data (`writeNewLeadEntries`).
 *             - Updates summary (`updateTopSummaryLeadSet`).
 *     - `calculateLeadCommissions`: Iterates leads, calls `getCommissionCalculation` (which calls `calculateLeadCommission` or fallback `localCalculateLeadCommission`), formats notes.
 *     - `determineCommissionPercentage`: Implements the 3-tier logic (2%/3%/4%).
 *     - `getLeadDataForTechnician`: Reads 'Lead Set' sheet, finds columns (`findLeadSetColumnIndices`), filters rows by technician name.
 *     - `clearLeadDataInInstallSection`: Finds rows with "L-E-A-D" in Column J and clears content in specific columns (E-J usually).
 *     - `writeNewLeadEntries`: Finds the starting row (`findFirstEmptyRow`), prepares data array, writes in batch (`setValues`), formats cells.
 */

/**
 * 4. ERROR HANDLING & TROUBLESHOOTING
 * -------------------------------------
 * 4.1 Common Error Messages & Causes
 *     - "Lead Set sheet not found": The 'Lead Set' sheet is missing, renamed, or inaccessible.
 *     - "Technician sheet not found for: [Name]": No sheet exists with that exact name. Check spelling and case.
 *     - "Required columns (...) not found in Lead Set sheet headers": Check 'Lead Set' sheet for headers containing 'Lead Generated By', 'Revenue'/'Total', 'Customer'.
 *     - "Revenue must be a valid number" / "Revenue must be greater than zero": Invalid data in the 'Revenue'/'Total' column of 'Lead Set' sheet. Check for text, blanks, or non-positive numbers.
 *     - "Error: No LeadSet" / "Error: No Sheet" / "Error: Process" (in Action Column status): Indicates failure during single tech processing. Check Logs.
 *     - Timeout Errors: May occur with very large datasets or many technicians. Consider running in smaller batches if possible.
 *
 * 4.2 Troubleshooting Steps
 *     1. **Check Sheet Names:** Ensure 'Lead Set', 'Hourly + Spiff Pay', and all technician sheets exist and are named correctly (case-sensitive).
 *     2. **Verify 'Lead Set' Headers:** Confirm the 'Lead Set' sheet has headers for Technician Name ('Lead Generated By'), Revenue ('Job Total Revenue' or 'Total'), and Customer Name.
 *     3. **Inspect 'Lead Set' Data:** Look for non-numeric or zero/negative values in the Revenue column. Ensure technician names in 'Lead Generated By' exactly match sheet names.
 *     4. **Check Technician Sheet Structure:** Verify the "Customer Name" header exists (Col E default) and the sheet isn't drastically different from the template.
 *     5. **Review Execution Logs:** Go to 'Apps Script' > 'Executions'. Find the failed execution and check the logs for specific error messages and line numbers.
 *     6. **Permissions:** Ensure the script has the necessary permissions to read/write to the spreadsheet. Re-authorize if needed.
 */

/**
 * 5. MAINTENANCE & MODIFICATION
 * -----------------------------
 * 5.1 Code Structure Principles
 *     - Modularity: Functions are grouped by purpose into different `.js` files.
 *     - Readability: Descriptive variable/function names, JSDoc comments.
 *     - Efficiency: Use of batch operations (`getValues`, `setValues`, `clearContent` on ranges) to minimize direct Sheet API calls.
 *     - Robustness: Dynamic column finding, error handling (`try...catch`), validation checks.
 *
 * 5.2 Modification Guidelines
 *     - **Commission Tiers:** Modify percentages/thresholds in `LeadSetCalculation.js::determineCommissionPercentage`. Update documentation (Section 3.1).
 *     - **Sheet/Column Changes:**
 *         - If 'Lead Set' columns change significantly, update defaults/logic in `LeadSetSheetOperations.js::getLeadDataForTechnician` and `LeadSetUtilities.js::findLeadSetColumnIndices`. Update documentation (Section 3.2).
 *         - If Technician sheet output columns change, update column indices/ranges in `LeadSetSheetOperations.js` (e.g., `writeNewLeadEntries`, `clearLeadDataInInstallSection`, `updateTopSummaryLeadSet`). Update documentation (Section 3.2).
 *         - If 'Hourly + Spiff Pay' columns change, update `LeadSetSheetOperations.js::getRatesSheetMapping`.
 *     - **Output Formatting:** Modify number formats (`setNumberFormat`) in `LeadSetSheetOperations.js::writeNewLeadEntries`, `updateTopSummaryLeadSet`, etc.
 *     - **Error Messages:** Update user-facing messages in `SpreadsheetApp.getUi().alert` calls.
 *
 * 5.3 Performance Considerations
 *     - The script reads the entire 'Lead Set' sheet (`getDataRange().getValues()`) for each technician. For very large 'Lead Set' sheets (>10k rows) and many technicians, this could become slow.
 *     - Potential Optimization: Read 'Lead Set' data once, process it into a structure keyed by technician name, then iterate technicians. This adds complexity but reduces reads.
 *     - Batch writes (`setValues`) are already used, which is efficient.
 */

/**
 * 6. DATA HANDLING DETAILS (Clearing & Writing)
 * ---------------------------------------------
 * The system employs a specific strategy to update technician sheets without disrupting other data:
 *
 * 6.1 Locating Target Rows for Clearing:
 *     - Function: `findExistingLeadSetRows` (or similar logic within `clearLeadDataInInstallSection`).
 *     - Method: Scans Column J (default) of the technician sheet for the exact text "L-E-A-D".
 *     - Output: Returns an array of row numbers (1-based) containing the marker.
 *
 * 6.2 Clearing Old Lead Data:
 *     - Function: `clearLeadDataInInstallSection`, `clearExistingLeadEntries`, `clearRowsInBatch`.
 *     - Method: Takes the list of rows identified in 6.1. For each identified row, it clears the *content* of a specific range, typically Columns E through J (Customer to Marker).
 *     - **Important:** It does *not* delete the rows themselves, only the content within the specified columns for those rows. This preserves row structure and data in other columns (A-D).
 *
 * 6.3 Finding Insertion Point for New Data:
 *     - Function: `findFirstEmptyRow`.
 *     - Method:
 *         1. Finds the header row containing "Customer Name" (Col E).
 *         2. Looks for the *first* row after the header where *all* cells in Columns E-J are empty.
 *         3. If no completely empty row is found within a reasonable range, it defaults to the row immediately after the header (or a fallback like row 5 if the header isn't found).
 *
 * 6.4 Writing New Lead Data:
 *     - Function: `writeNewLeadEntries`, `smartWriteLeadDataToSheet`.
 *     - Method:
 *         1. Prepares an array of arrays (`values`), where each inner array represents a row to be written (containing Customer, Unit, Date, Amount, Note, Marker).
 *         2. Determines the `startRow` using the logic in 6.3.
 *         3. Writes *all* the prepared data in a single batch call: `sheet.getRange(startRow, 5, numRows, 6).setValues(values)`.
 *         4. Applies number formatting (Currency for Amount, Date for Date) to the newly written cells, also in batch calls.
 *
 * 6.5 "Smart" Updates (`smartWriteLeadDataToSheet` variant):
 *     - This approach (if fully implemented as described in some comments) attempts to reuse the rows cleared in step 6.2 before finding new empty rows, potentially reducing sheet expansion. It involves comparing the number of old rows cleared vs. new rows to write.
 *
 * 6.6 Summary Update:
 *     - Function: `updateTopSummaryLeadSet`, `updateLeadSummaryInfo`.
 *     - Method: Directly sets the values for Lead Count (e.g., cell B14) and Total Commission (e.g., cell C14), applying currency formatting to the total. It uses fixed cell references or attempts to find the "Lead Total" row dynamically.
 */ 