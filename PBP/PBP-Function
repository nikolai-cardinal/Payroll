/**
 * Payroll System - Pay By Performance (PBP) Functionality Documentation
 *
 * This document explains how the Pay By Performance (PBP) functionality works in the Payroll system.
 */

/**
 * OVERVIEW:
 * The Pay By Performance (PBP) module calculates technician pay based on performance metrics derived from completed jobs.
 * It processes data from a source sheet (likely related to job completion or performance metrics),
 * applies specific calculation rules defined in PBPCalculation,
 * and updates the technician's individual payroll sheet with the calculated PBP earnings and supporting details.
 * This system aims to reward technicians based on their efficiency, quality, or other defined performance indicators.
 */

/**
 * TRIGGERS AND ENTRY POINTS:
 * (Inferred - based on typical patterns and other modules like Yard Sign/Spiff Bonus)
 *
 * 1. Manual Trigger - Action Column:
 *    - User selects "PBP" (or similar) in the Action column (e.g., column G) of the "Hourly + Spiff Pay" sheet.
 *    - This likely triggers the onEdit() function in a main script (e.g., Main.js).
 *    - The onEdit() function identifies the action and technician, then calls a main processing function (likely within PBPMain).
 *    - On completion, displays a summary popup for the specific technician's PBP calculation.
 *
 * 2. Manual Trigger - Menu Item (Potential):
 *    - A menu item like "Process All PBP" might exist under a "Technician Tools" or similar menu.
 *    - Clicking this would call a function (likely in PBPMain) to process PBP for all technicians.
 *    - On completion, displays a comprehensive summary popup for all processed PBP calculations.
 */

/**
 * WORKFLOW STEP BY STEP:
 * (Inferred - based on file names: PBPMain, PBPCalculation, PBPSheetOperations, PBPUtilities)
 *
 * A. Initialization (Likely handled by PBPMain or a dedicated init function):
 *    1. Get the active sheet or identify the technician row from the edit event.
 *    2. Get the technician's name.
 *    3. Validate or ensure the existence of the source data sheet containing performance metrics.
 *    4. Validate or ensure the existence of the target technician's sheet.
 *
 * B. Data Handling and Calculation (Involving PBPCalculation, potentially helper functions in PBPUtilities):
 *    1. Read relevant performance data for the technician (e.g., Job #, Hours Worked, Revenue, Tasks Completed) from source sheet(s).
 *    2. Apply the PBP calculation logic defined within PBPCalculation.gs. This is where the core performance calculation happens. Examples *might* include:
 *       - **Efficiency Calculation:** Calculating efficiency ratios (e.g., `Efficiency = Standard Hours / Actual Hours`).
 *       - **Tiered Rates:** Applying different pay rates based on achieved efficiency tiers (e.g., 90-99% efficiency = $X/hour, 100-110% = $Y/hour).
 *       - **Piece Rate:** Summing earnings based on the number of specific tasks completed multiplied by a rate per task (e.g., `PBP = Units Completed * Rate per Unit`).
 *       - **Revenue Share:** Calculating pay as a percentage of revenue generated on jobs, potentially adjusted by efficiency.
 *       - **Hybrid Models:** Combining hourly pay with performance bonuses (e.g., `Total Pay = Base Hourly Pay + Efficiency Bonus`).
 *       - **Minimum Guarantee:** Comparing calculated PBP against a minimum threshold (e.g., guaranteed hourly rate for hours worked) and paying the higher amount.
 *       *Note: The specific formulas and rules are implemented in PBPCalculation.gs.*
 *    3. Aggregate the total PBP amount earned and collect details of the jobs/metrics contributing to the pay (e.g., Job #, Efficiency Score, Calculated PBP for Job).
 *
 * C. Updating Technician Sheet (Likely involving PBPSheetOperations):
 *    1. Set the Action column status to "Processing...".
 *    2. Locate the relevant "PBP" or "Performance Pay" section within the technician's sheet.
 *    3. Clear previous PBP entries within that section.
 *    4. Write the newly calculated PBP details (e.g., Job #, Relevant Metric, PBP Amount for item, Note) to the technician's sheet.
 *    5. Update a summary section (e.g., a dedicated "PBP Earnings" row) with the total calculated PBP amount.
 *    6. Update the Action column status to "Complete" or "Error".
 *    7. Display a summary notification/popup.
 */

/**
 * KEY FUNCTIONS AND THEIR ROLES:
 * (Inferred - mapping file names to likely responsibilities)
 *
 * 1. PBPMain.gs:
 *    - Handles triggers (onEdit, menu clicks).
 *    - Orchestrates the overall PBP calculation process.
 *    - Calls functions from other PBP modules.
 *
 * 2. PBPCalculation.gs:
 *    - **Contains the core logic and specific formulas for calculating Pay By Performance earnings.**
 *    - Implements the defined business rules for how performance translates to pay.
 *    - This could involve functions for:
 *        - Calculating job efficiency based on standard vs. actual hours.
 *        - Determining bonus amounts based on efficiency tiers.
 *        - Calculating earnings based on piece rates or revenue shares.
 *        - Applying different rules based on job type or business unit.
 *        - Handling comparisons against minimum pay guarantees.
 *    - Takes performance data as input and outputs the calculated PBP amount(s) and potentially intermediate calculation details.
 *
 * 3. PBPSheetOperations.gs:
 *    - Manages all read/write operations on the technician's payroll sheet related to PBP.
 *    - Includes functions to find the PBP section, clear old entries, write new PBP details (formatted correctly), and update the summary PBP total.
 *
 * 4. PBPUtilities.gs:
 *    - Provides shared helper functions (e.g., data validation, date/number formatting, safe spreadsheet operations, complex lookups) potentially used by PBPCalculation and other PBP modules.
 */

/**
 * DATA FLOW:
 *
 * 1. Source Data (Performance Metrics Sheet - Name TBD):
 *    - Contains rows detailing technician performance on jobs.
 *    - Key Columns: Technician Name, Job #, Completion Date, Standard Hours, Actual Hours Worked, Revenue Generated, Tasks Completed, Business Unit, etc.
 *
 * 2. Processing (PBPCalculation.gs):
 *    - Reads the relevant source data for the technician.
 *    - **Applies the specific calculation rules defined within its functions.** For example, it might take 'Standard Hours' and 'Actual Hours' to calculate an 'Efficiency %' using the formula `(Standard Hours / Actual Hours) * 100`.
 *    - It might then use this 'Efficiency %' to determine a bonus multiplier or a specific pay rate based on predefined tiers.
 *    - Alternatively, it could calculate pay directly from 'Tasks Completed' multiplied by a task-specific rate.
 *    - Aggregates these individual calculations into a total PBP earning figure for the period.
 *    - Collects details (like Job #, Efficiency %, PBP for Job) for line-item reporting.
 *
 * 3. Output Data (Technician's Sheet - Managed by PBPSheetOperations):
 *    - Updates a summary row with the total calculated "PBP Earnings".
 *    - Writes individual lines in a dedicated PBP section detailing each component contributing to the PBP pay (e.g., Job #, Efficiency %, PBP Amount for that item, Type Note like "PBP - Efficiency Bonus").
 */

/**
 * APPRENTICE TECHNICIAN HANDLING:
 * The system includes special handling for apprentice technicians:
 *
 * 1. Apprentice Detection:
 *    - Checks the "Hourly + Spiff Pay" sheet to identify if a technician has "Apprentice" in their title (column C).
 *    - Records the apprentice's percentage value from column H (e.g., 35%).
 *    - Tracks apprentice status throughout calculations for informational purposes.
 *
 * 2. Role Assignment Logic:
 *    - When a technician is not found in the "Hourly + Spiff Pay" sheet but is working with apprentices:
 *      - The system automatically assigns them a Lead role (65% split).
 *      - This ensures proper split calculation without requiring explicit role assignments for all technicians.
 *    - If a job has assistants but no leads:
 *      - The primary technician (from column G "Sold By Technician") is automatically promoted to Lead.
 *      - If no primary technician is available, an assistant may be promoted to Lead to ensure proper split calculation.
 *
 * 3. PBP Split Calculation:
 *    - Apprentices receive their full calculated PBP share based on their role (Lead/Assistant) and the standard split rules.
 *    - While apprentice status and percentage are tracked, they do not reduce the PBP amount earned.
 *    - The apprentice information is included in notes and documentation for reference only.
 */

/**
 * TECHNICIAN ROLE ASSIGNMENT:
 * The system assigns roles to technicians using the following priority:
 *
 * 1. Explicit Split Value:
 *    - First checks column H in the "Hourly + Spiff Pay" sheet for explicit percentage values:
 *      - 65% = Lead role
 *      - 35% = Assistant role
 *      - Other values are handled based on specific business rules
 *
 * 2. Title-Based Assignment:
 *    - If no explicit split value is found, checks column C (Title/Role):
 *      - Titles containing "Lead" or "Senior" = Lead role (65%)
 *      - Titles containing "Assistant", "Apprentice", or "Helper" = Assistant role (35%)
 *
 * 3. Apprentice Context Assignment:
 *    - For technicians not found in "Hourly + Spiff Pay" sheet:
 *      - If working with apprentices = automatically assigned Lead role (65%)
 *      - This ensures appropriate split calculation when apprentices are involved
 *
 * 4. Team Balance Logic:
 *    - If a job has assistants but no leads:
 *      - The primary technician (from column G) is promoted to Lead
 *      - If no primary technician available, an assistant may be promoted to Lead
 *      - Ensures at least one Lead role for proper split calculation
 */

/**
 * TECHNICIAN NAME PARSING:
 * The system includes robust technician name parsing from column H ("Assigned Technicians"):
 *
 * 1. Comma-Separated Lists:
 *    - Parses standard comma-separated lists of technician names
 *
 * 2. Space-Separated Names:
 *    - Handles cases where technician names are separated by spaces without commas
 *    - Intelligently identifies full names (First Last format) to create proper splits
 *
 * 3. Primary Technician Inclusion:
 *    - Always ensures the primary technician (column G) is included in the technician list
 *    - Prevents primary technicians from being excluded from PBP splits
 *
 * 4. Name Cleaning:
 *    - Removes percentage indicators and extraneous formatting from names
 *    - Creates unique list of technicians to prevent duplicate entries
 */

/**
 * ERROR HANDLING:
 * (Inferred - assuming best practices similar to other modules)
 *
 * - Uses try/catch blocks within functions (especially in PBPMain, PBPCalculation, PBPSheetOperations) to manage errors.
 * - Utilizes helper functions from PBPUtilities for safe spreadsheet operations and data validation.
 * - Logs detailed error messages to the Apps Script execution log for debugging.
 * - Updates the Action column status to "Error" if PBP calculation fails.
 * - Displays user-friendly error messages in popups.
 * - Includes validation checks for source data integrity, required columns, and sheet existence.
 */

/**
 * IMPLEMENTATION DETAILS:
 * (Inferred)
 *
 * - Calculation Complexity: The core logic resides in PBPCalculation.gs. **The specific formulas, conditions (if/else logic), thresholds, and rates that determine PBP are coded within this file.**
 * - Data Mapping: May use header maps or utility functions (in PBPUtilities) to dynamically find necessary columns in source sheets, ensuring calculations use the correct input data.
 * - Section Management: Uses dedicated functions within PBPSheetOperations to reliably find, clear, and write data to the correct section of the technician's sheet.
 * - Summary Update: Ensures the main summary row(s) accurately reflect the total calculated PBP earnings via specific functions in PBPSheetOperations.
 * - Status Updates: Provides feedback via the Action column ("Processing...", "Complete", "Error").
 * - User Notifications: Informs the user of calculation results (success or failure) via popups.
 */

/**
 * TECHNICIAN-SPECIFIC PROCESSING:
 * (Inferred - activities managed primarily by PBPMain and PBPSheetOperations)
 *
 * 1. Data Filtering: The process starts by isolating performance data relevant only to the specific technician being processed.
 * 2. Calculation Application: PBPCalculation applies the performance rules specifically using the filtered data for that technician.
 * 3. Sheet Interaction (PBPSheetOperations):
 *    - Identifies the correct target sheet for the technician.
 *    - Locates the designated PBP section within that sheet.
 *    - Clears previous PBP calculation results from that section.
 *    - Writes newly calculated, detailed PBP entries (e.g., per job or metric) into the section.
 *    - Updates the PBP summary row(s) specific to that technician's sheet.
 * 4. Handling Existing Data: Employs clear-and-write logic (via PBPSheetOperations) to ensure previous PBP calculations are removed before new ones are added, preventing data duplication or staleness.
 * 5. Formatting: Applies consistent formatting (dates, currency, notes, metric units) to the data written to the technician's sheet via PBPSheetOperations.
 */ 