/**
* Payroll System - PBP Main Coordinator
* Contains the main entry point for PBP updates, coordinates calls
* to calculation and sheet operations, and handles status reporting.
*/

/**
* Updates PBP for a specific technician when Action is set to PBP.
* This is the main entry point called from Main.gs or triggers.
* @param {string} technicianName - The name of the technician to update.
* @param {number} actionRow - The row in the Hourly + Spiff Pay sheet where the action was triggered.
* @param {number} actionColumn - The column in the Hourly + Spiff Pay sheet where the action was triggered.
* @param {boolean} skipStatusUpdate - Optional flag to skip status updates (for batch processing)
* @param {boolean} suppressPopup - Optional flag to suppress popup notifications
*/
function pbpMain_updatePBPForTechnician(technicianName, actionRow, actionColumn, skipStatusUpdate, suppressPopup = false) {
  var ui = SpreadsheetApp.getUi();
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var techSheet;
  var ratesSheet;
  var spiffBonusSheet;
  var summaryInfo = []; // Array to collect detailed information for the popup

  try {
    // --- 1. Setup and Sheet Validation ---
    ratesSheet = ss.getSheetByName("Hourly + Spiff Pay");
    spiffBonusSheet = ss.getSheetByName("Spiff/Bonus");
    techSheet = ss.getSheetByName(technicianName);

    if (!ratesSheet || !spiffBonusSheet || !techSheet) {
      var missingSheet = !ratesSheet ? "Hourly + Spiff Pay" : !spiffBonusSheet ? "Spiff/Bonus" : "Technician: " + technicianName;
      throw new Error("Required sheet not found: " + missingSheet);
    }
    
    // Set status to Processing if not skipping status updates
    if (!skipStatusUpdate && actionRow && actionColumn) {
      setActionStatus(ratesSheet, actionRow, actionColumn, "Processing...");
    }
    
    // --- NEW: Check if the technician is Class 1 and skip if so ---
    try {
      // Find the technician's row in the rates sheet (re-find or use cached data if available)
      var technicianRowData = null;
      var ratesDataForCheck = ratesSheet.getDataRange().getValues(); // Consider caching this if run often
      for (var i = 1; i < ratesDataForCheck.length; i++) {
        if (ratesDataForCheck[i][0] && ratesDataForCheck[i][0].toString().trim().toLowerCase() === technicianName.toLowerCase()) {
          technicianRowData = ratesDataForCheck[i];
          break;
        }
      }

      if (technicianRowData) {
        var title = technicianRowData[2]; // Column C - Position
        var techInfo = getTechnicianClassAndRole(title); // Call from PBPCalculation

        if (techInfo.class === 1) {
          console.log(`Skipping PBP processing for Class 1 technician: ${technicianName}`);
          
          // Update summary to 0 and clear section
          updateTopSummaryInstallPay(techSheet, 0, 0);
          clearInstallDataSection(techSheet);
          
          // Set status to Complete if not skipping status updates
          if (!skipStatusUpdate && actionRow && actionColumn) {
            setActionStatus(ratesSheet, actionRow, actionColumn, "Complete");
          }
          
          // Show popup with info about skipping
          if (!skipStatusUpdate && !suppressPopup) {
            ui.alert(`PBP processing skipped for ${technicianName}.

Reason: Class 1 technicians are not eligible for PBP.`);
          }
          return; // Exit the function early
        }
      } else {
         console.warn(`Could not find technician ${technicianName} in rates sheet for Class 1 check.`);
      }
    } catch (e) {
      console.error(`Error checking Class 1 status: ${e.message}`);
      // Continue with processing to be safe, but log the error
    }
    // --- End NEW Class 1 Check ---

    // Get Data for lookups - Fetch ONCE for efficiency
    var spiffBonusData = spiffBonusSheet.getDataRange().getValues();
    var ratesData = ratesSheet.getDataRange().getValues(); // Used for default splits

    // --- 2. Perform Calculations (Delegate to PBPCalculation.gs) ---
    console.log("Starting PBP calculation for: " + technicianName);
    var calculationResult = calculatePbpEntries(technicianName, spiffBonusData, ratesData); // Calls function in PBPCalculation.gs

    var allPbpEntries = calculationResult.entries;
    var totalTechnicianShare = calculationResult.totalShare;
    console.log("Calculation complete. Entries found: " + allPbpEntries.length + ", Total Share: $" + totalTechnicianShare.toFixed(2));

    // --- 3. Handle No Entries Found ---
    if (allPbpEntries.length === 0) {
      var techExists = ratesData.some(function(rateRow) {
           return rateRow[0] && rateRow[0].toString().trim().toLowerCase() === technicianName.trim().toLowerCase();
      });
      if (techExists) {
         if (!suppressPopup) {
           ui.alert("No PBP entries found for " + technicianName + " in the Spiff/Bonus tab for this period.");
         }
         // Update summary to 0 and clear section (Delegate to PBPSheetOperations.gs)
         updateTopSummaryInstallPay(techSheet, 0, 0); // Calls function in PBPSheetOperations.gs
         clearInstallDataSection(techSheet); // Calls function in PBPSheetOperations.gs
         setActionStatus(ratesSheet, actionRow, actionColumn, "Complete"); // Mark as complete even if 0 entries
      } else {
         if (!suppressPopup) {
           ui.alert("Technician " + technicianName + " not found in Hourly + Spiff Pay tab.");
         }
         setActionStatus(ratesSheet, actionRow, actionColumn, "⚠️ Error");
      }
      return;
    }

    // --- 4. Update Technician Sheet (Delegate to PBPSheetOperations.gs) ---
    console.log("Starting sheet update for: " + technicianName);
    writePbpDataToSheet(techSheet, allPbpEntries, totalTechnicianShare); // Calls function in PBPSheetOperations.gs
    console.log("Sheet update finished for: " + technicianName);

    // --- 5. Prepare and Show Summary Popup ---
    summaryInfo.push("PBP Update for: " + technicianName);
    
    // Add apprentice information if applicable
    var isApprentice = allPbpEntries.length > 0 && allPbpEntries[0].isApprentice;
    if (isApprentice) {
      var apprenticePercentage = allPbpEntries[0].apprenticePercentage;
      summaryInfo.push("Apprentice Technician (Tracked at " + apprenticePercentage + "%)");
    }
    
    summaryInfo.push("Total Calculated PBP Share: $" + totalTechnicianShare.toFixed(2));
    summaryInfo.push("Number of PBP Entries Processed: " + allPbpEntries.length);
    summaryInfo.push("\nPBP DETAILS:");
    
    // Build detailed summary string
    for (var k = 0; k < allPbpEntries.length; k++) {
     var entry = allPbpEntries[k];
     summaryInfo.push("\nEntry #" + (k+1) + ":");
     summaryInfo.push("• Customer: " + entry.customerName);
     summaryInfo.push("• Date: " + formatDate(entry.completionDate)); // Calls function in PBPUtilities.gs
     summaryInfo.push("• Item: " + entry.itemName);
     summaryInfo.push("• Job Total PBP: $" + entry.totalPbp.toFixed(2));
     summaryInfo.push("• Tech Role (Job): " + entry.roleForJob + " (" + entry.splitPercentage.toFixed(1) + "%)");
     summaryInfo.push("• Calculated Tech Share: $" + entry.technicianShare.toFixed(2));

     // Replace the old split logic with the new teamDetails string
     if (entry.teamDetails) {
       summaryInfo.push("• Team Split Details: " + entry.teamDetails);
     } else {
       // Fallback if teamDetails is somehow missing (shouldn't happen with current PBPCalculation)
       summaryInfo.push("• Split Team: Details unavailable");
     }
    }
    if (!suppressPopup) {
      ui.alert(summaryInfo.join("\n"));
    }

    // --- 6. Final Status Update ---
    setActionStatus(ratesSheet, actionRow, actionColumn, "Complete");

  } catch (error) {
    console.error("Error updating PBP for " + technicianName + ": " + error.message + " Stack: " + error.stack);
    var errorMsg = "Error updating PBP: " + error.toString();
    if (!suppressPopup) {
      ui.alert(errorMsg);
    }
    // Attempt to set error status
    try {
      var sheetForError = ratesSheet || ss.getActiveSheet(); // Fallback
      setActionStatus(sheetForError, actionRow, actionColumn, "⚠️ Error");
    } catch (e) {
      console.error("Failed to set error status: " + e.message);
    }
  }
}

/**
* Processes PBP for all technicians in the Hourly + Spiff Pay sheet
* Called from the Technician Tools menu when "All PBP" is clicked
* No approval required
*/
function pbpMain_processAllPBP() {
  var ui = SpreadsheetApp.getUi();
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var ratesSheet = ss.getSheetByName("Hourly + Spiff Pay");
  var successCount = 0;
  var errorCount = 0;
  var skippedCount = 0;
  var techniciansProcessed = [];
  var errors = [];
  var totalAmount = 0;
  
  if (!ratesSheet) {
    ui.alert("Error: Could not find 'Hourly + Spiff Pay' sheet.");
    return;
  }
  
  // Use the mapping from SpiffBonusUtilities if available, or fallback to defaults
  var ratesMapping;
  try {
    ratesMapping = getRatesSheetMapping();
  } catch (e) {
    console.log("getRatesSheetMapping not found, using defaults");
    ratesMapping = {
      nameColumn: 1,      // Column A - Technician name
      dataStartRow: 3     // Data starts at row 3
    };
  }
  
  // Get all sheet names to check for existence
  var allSheets = ss.getSheets();
  var sheetNames = allSheets.map(function(sheet) {
    return sheet.getName();
  });
  
  // Get all technicians from Hourly + Spiff Pay sheet
  var dataRange = ratesSheet.getRange(ratesMapping.dataStartRow, 1, ratesSheet.getLastRow() - ratesMapping.dataStartRow + 1, 1);
  var data = dataRange.getValues();
  
  // Process each technician
  for (var i = 0; i < data.length; i++) {
    var techName = data[i][0]; // First column (name)
    
    // Skip empty rows or rows with no technician name
    if (!techName) {
      continue;
    }
    
    // Check if the technician has a sheet
    if (sheetNames.indexOf(techName) === -1) {
      console.log("Skipping " + techName + " - no sheet exists");
      skippedCount++;
      continue;
    }
    
    // Calculate row index in the rates sheet (for modified function call)
    var actualRow = i + ratesMapping.dataStartRow;
    
    try {
      // Call the technician-specific update function
      var result = updatePBPForTechnicianAll(techName);
      
      // Record success and track amount
      successCount++;
      techniciansProcessed.push({
        name: techName,
        count: result.entryCount || 0,
        amount: result.totalAmount || 0
      });
      
      totalAmount += (result.totalAmount || 0);
      
    } catch (error) {
      console.error("Error processing PBP for " + techName + ": " + error.message);
      
      // Record error
      errorCount++;
      errors.push(techName + ": " + error.message);
    }
  }
  
  // Build pretty summary message
  var summaryMessage = [];
  summaryMessage.push("PBP PROCESSING COMPLETE");
  
  // Add summary section
  summaryMessage.push("\nSUMMARY:");
  summaryMessage.push("• Total Technicians Processed: " + successCount);
  summaryMessage.push("• Total Amount: $" + totalAmount.toFixed(2));
  
  // Add technician details section if we have any
  if (techniciansProcessed.length > 0) {
    summaryMessage.push("\nDETAILS BY TECHNICIAN:");
    
    for (var t = 0; t < techniciansProcessed.length; t++) {
      var tech = techniciansProcessed[t];
      if (tech.count > 0) {
        summaryMessage.push("\n" + tech.name + ":");
        summaryMessage.push("• Entries: " + tech.count);
        summaryMessage.push("• Amount: $" + tech.amount.toFixed(2));
      }
    }
  }
  
  // Add errors section if any
  if (errors.length > 0) {
    summaryMessage.push("\nERRORS:");
    for (var e = 0; e < errors.length; e++) {
      summaryMessage.push("• " + errors[e]);
    }
  }
  
  // Show the popup
  ui.alert(summaryMessage.join("\n"));
}

/**
* Modified version of updatePBPForTechnician that doesn't rely on action column
* Called only from processAllPBP when processing all technicians
* @param {string} technicianName - The name of the technician to update.
* @return {object} Result with count of entries and total amount
*/
function updatePBPForTechnicianAll(technicianName) {
  var ui = SpreadsheetApp.getUi();
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var techSheet;
  var ratesSheet;
  var spiffBonusSheet;
  var summaryInfo = []; // Array to collect detailed information for the popup

  try {
    // --- 1. Setup and Sheet Validation ---
    ratesSheet = ss.getSheetByName("Hourly + Spiff Pay");
    spiffBonusSheet = ss.getSheetByName("Spiff/Bonus");
    techSheet = ss.getSheetByName(technicianName);

    if (!ratesSheet || !spiffBonusSheet || !techSheet) {
      var missingSheet = !ratesSheet ? "Hourly + Spiff Pay" : !spiffBonusSheet ? "Spiff/Bonus" : "Technician: " + technicianName;
      throw new Error("Required sheet not found: " + missingSheet);
    }
    
    // --- NEW: Check if the technician is Class 1 and skip if so ---
    try {
      // Find the technician's row in the rates sheet (re-find or use cached data if available)
      var technicianRowData = null;
      var ratesDataForCheck = ratesSheet.getDataRange().getValues(); // Consider caching this if run often
      for (var i = 1; i < ratesDataForCheck.length; i++) {
        if (ratesDataForCheck[i][0] && ratesDataForCheck[i][0].toString().trim().toLowerCase() === technicianName.toLowerCase()) {
          technicianRowData = ratesDataForCheck[i];
          break;
        }
      }

      if (technicianRowData) {
        var title = technicianRowData[2]; // Column C - Position
        var techInfo = getTechnicianClassAndRole(title); // Call from PBPCalculation

        if (techInfo.class === 1) {
          console.log(`Skipping PBP processing for Class 1 technician: ${technicianName}`);
          // Update summary to 0 and clear section
          updateTopSummaryInstallPay(techSheet, 0, 0);
          clearInstallDataSection(techSheet);
          // No alert needed for batch processing
          return { entryCount: 0, totalAmount: 0 }; // Exit early for Class 1
        }
      } else {
        console.warn(`Could not find technician ${technicianName} in rates sheet for Class 1 check (batch mode).`);
      }
    } catch (e) {
      console.error(`Error checking Class 1 status (batch mode): ${e.message}`);
      // Continue with processing to be safe, but log the error
    }
    // --- End NEW Class 1 Check ---

    // Get Data for lookups - Fetch ONCE for efficiency
    var spiffBonusData = spiffBonusSheet.getDataRange().getValues();
    var ratesData = ratesSheet.getDataRange().getValues(); // Used for default splits

    // --- 2. Perform Calculations (Delegate to PBPCalculation.gs) ---
    console.log("Starting PBP calculation for: " + technicianName);
    var calculationResult = calculatePbpEntries(technicianName, spiffBonusData, ratesData); // Calls function in PBPCalculation.gs

    var allPbpEntries = calculationResult.entries;
    var totalTechnicianShare = calculationResult.totalShare;
    console.log("Calculation complete. Entries found: " + allPbpEntries.length + ", Total Share: $" + totalTechnicianShare.toFixed(2));

    // --- 3. Handle No Entries Found ---
    if (allPbpEntries.length === 0) {
      var techExists = ratesData.some(function(rateRow) {
           return rateRow[0] && rateRow[0].toString().trim().toLowerCase() === technicianName.trim().toLowerCase();
      });
      if (techExists) {
         // Update summary to 0 and clear section (Delegate to PBPSheetOperations.gs)
         updateTopSummaryInstallPay(techSheet, 0, 0); // Calls function in PBPSheetOperations.gs
         clearInstallDataSection(techSheet); // Calls function in PBPSheetOperations.gs
      } else {
         throw new Error("Technician " + technicianName + " not found in Hourly + Spiff Pay tab.");
      }
      return { entryCount: 0, totalAmount: 0 };
    }

    // --- 4. Update Technician Sheet (Delegate to PBPSheetOperations.gs) ---
    console.log("Starting sheet update for: " + technicianName);
    writePbpDataToSheet(techSheet, allPbpEntries, totalTechnicianShare); // Calls function in PBPSheetOperations.gs
    console.log("Sheet update finished for: " + technicianName);
    
    return { entryCount: allPbpEntries.length, totalAmount: totalTechnicianShare };

  } catch (error) {
    console.error("Error updating PBP for " + technicianName + ": " + error.message + " Stack: " + error.stack);
    throw error; // Rethrow to be handled by the calling function
  }
}

// Export functions to make them available to Main.gs
// This is necessary for Google Apps Script to recognize these functions across files
var updatePBPForTechnician = pbpMain_updatePBPForTechnician;
var processAllPBP = pbpMain_processAllPBP;