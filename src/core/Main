// Namespace stub – Main
var Modules = Modules || {};
Modules.Main = Modules.Main || {};

// Avoid re-entrant edits
var _isProcessingEdit = false;

// Ordered list used for delegation
function _getOrderedModules() {
  return [
    Modules.ApprovedMonitor,
    Modules.TimeSheet,
    Modules.SpiffBonus,
    Modules.PBP,
    Modules.YardSign,
    Modules.LeadSet,
    Modules.NewTechnician,
  ].filter(function (m) {
    return m;
  });
}

/**
 * Spreadsheet onOpen trigger.
 * Builds the root menu and lets each module perform optional init work.
 *
 * @param {GoogleAppsScript.Events.SheetsOnOpen} e
 */
function onOpen(e) {
  var ui = SpreadsheetApp.getUi();
  if (Modules.Menu && typeof Modules.Menu.buildRootMenu === 'function') {
    // Delegate menu construction to Core/Menu to keep Main slim.
    Modules.Menu.buildRootMenu(ui);
  }
  
  // Optional per-module open initialisation
  _getOrderedModules().forEach(function (mod) {
    // Skip NewTechnician module to prevent menu duplication
    if (mod === Modules.NewTechnician) {
      return;
    }
    
    if (typeof mod.onOpenInit === 'function') {
      try {
        mod.onOpenInit(e);
      } catch (err) {
        Modules.Shared.PayrollLogger.error(err);
      }
    }
  });
}

/**
 * Spreadsheet onEdit trigger.
 * Delegates the edit event to each module until one claims responsibility.
 *
 * @param {GoogleAppsScript.Events.SheetsOnEdit} e
 */
function onEdit(e) {
  if (_isProcessingEdit) return;
  _isProcessingEdit = true;
  
  try {
    _getOrderedModules().some(function (mod) {
      try {
        return typeof mod.handleEdit === 'function' && mod.handleEdit(e) === true;
      } catch (err) {
        Modules.Shared.PayrollLogger.error('handleEdit error:', err);
      }
      return false;
    });
  } finally {
    _isProcessingEdit = false;
  }
}

/**
 * Convenience batch action to run all module processes sequentially.
 * Exposed via the UI so payroll admins can execute everything in one click.
 */
function runFullPayroll() {
  var ui = SpreadsheetApp.getUi();
  ui.alert('Running full payroll – please wait');

  var steps = [
    { fn: Modules.SpiffBonus && Modules.SpiffBonus.processAll },
    { fn: Modules.PBP && Modules.PBP.processAllPBP },
    { fn: Modules.YardSign && Modules.YardSign.processAll },
    { fn: Modules.TimeSheet && Modules.TimeSheet.processAll },
    { fn: Modules.LeadSet && Modules.LeadSet.processAll },
  ];

  steps.forEach(function (s) {
    if (typeof s.fn === 'function') {
      try {
        s.fn();
      } catch (err) {
        Modules.Shared.PayrollLogger.error(err);
      }
    }
  });

  ui.alert('Full payroll complete');
}

/**
 * Displays a popup to enter a technician name, then runs payroll for that specific technician.
 * Processes all modules for the individual technician.
 */
function runIndividualPayroll() {
  var ui = SpreadsheetApp.getUi();
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  
  // Prompt for technician name
  var response = ui.prompt(
    'Individual Payroll',
    'Enter the technician\'s name:',
    ui.ButtonSet.OK_CANCEL
  );
  
  // Get the response
  var button = response.getSelectedButton();
  var techName = response.getResponseText().trim();
  
  if (button !== ui.Button.OK || !techName) {
    return;
  }
  
  // Check if the technician's sheet exists
  var techSheet = ss.getSheetByName(techName);
  if (!techSheet) {
    ui.alert('Error: Could not find a sheet for technician "' + techName + '".');
    return;
  }
  
  ui.alert('Running payroll for ' + techName + ' – please wait');
  
  // Run each module's process for this specific technician
  var steps = [
    { name: 'Spiff/Bonus', fn: Modules.SpiffBonus && Modules.SpiffBonus.processForTechnician, args: [techName] },
    { name: 'PBP', fn: Modules.PBP && Modules.PBP.updatePBPForTechnician, args: [techName] },
    { name: 'Yard Signs', fn: Modules.YardSign && Modules.YardSign.processForTechnician, args: [techName] },
    { name: 'Timesheet', fn: Modules.TimeSheet && Modules.TimeSheet.processForTechnician, args: [techName] },
    { name: 'Lead Set', fn: Modules.LeadSet && Modules.LeadSet.processForTechnician, args: [techName] },
  ];
  
  var errors = [];
  var successCount = 0;
  
  steps.forEach(function(step) {
    if (typeof step.fn === 'function') {
      try {
        step.fn.apply(null, step.args);
        successCount++;
      } catch (err) {
        Modules.Shared.PayrollLogger.error('Error processing ' + step.name + ' for ' + techName + ':', err);
        errors.push(step.name + ': ' + err.message);
      }
    }
  });
  
  // Show completion message
  if (errors.length > 0) {
    ui.alert('Completed with errors: ' + errors.join(', '));
  } else {
    ui.alert('Individual payroll complete for ' + techName);
  }
}

Modules.Main = {
  onOpen: onOpen,
  onEdit: onEdit,
  runFullPayroll: runFullPayroll,
  runIndividualPayroll: runIndividualPayroll,
}; 