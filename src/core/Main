// Namespace stub – Main
var Modules = Modules || {};
Modules.Main = Modules.Main || {};

// Avoid re-entrant edits
var _isProcessingEdit = false;

// Ordered list used for delegation
function _getOrderedModules() {
  return [
    Modules.ApprovedMonitor,
    Modules.TimeSheet,
    Modules.SpiffBonus,
    Modules.PBP,
    Modules.YardSign,
    Modules.LeadSet,
    Modules.NewTechnician,
  ].filter(function (m) {
    return m;
  });
}

/**
 * Spreadsheet onOpen trigger.
 * Builds the root menu and lets each module perform optional init work.
 *
 * @param {GoogleAppsScript.Events.SheetsOnOpen} e
 */
function onOpen(e) {
  var ui = SpreadsheetApp.getUi();
  if (Modules.Menu && typeof Modules.Menu.buildRootMenu === 'function') {
    // Delegate menu construction to Core/Menu to keep Main slim.
    Modules.Menu.buildRootMenu(ui);
  }
  
  // Optional per-module open initialisation
  _getOrderedModules().forEach(function (mod) {
    // Skip NewTechnician module to prevent menu duplication
    if (mod === Modules.NewTechnician) {
      return;
    }
    
    if (typeof mod.onOpenInit === 'function') {
      try {
        mod.onOpenInit(e);
      } catch (err) {
        Modules.Shared.PayrollLogger.error(err);
      }
    }
  });
}

/**
 * Spreadsheet onEdit trigger.
 * Delegates the edit event to each module until one claims responsibility.
 *
 * @param {GoogleAppsScript.Events.SheetsOnEdit} e
 */
function onEdit(e) {
  if (_isProcessingEdit) return;
  _isProcessingEdit = true;
  
  try {
    _getOrderedModules().some(function (mod) {
      try {
        return typeof mod.handleEdit === 'function' && mod.handleEdit(e) === true;
      } catch (err) {
        Modules.Shared.PayrollLogger.error('handleEdit error:', err);
      }
      return false;
    });
  } finally {
    _isProcessingEdit = false;
  }
}

/**
 * Convenience batch action to run all module processes sequentially.
 * Exposed via the UI so payroll admins can execute everything in one click.
 */
function runFullPayroll() {
  var ui = SpreadsheetApp.getUi();
  ui.alert('Running full payroll – please wait');

  var steps = [
    { fn: Modules.SpiffBonus && Modules.SpiffBonus.processAll },
    { fn: Modules.PBP && Modules.PBP.processAllPBP },
    { fn: Modules.YardSign && Modules.YardSign.processAll },
    { fn: Modules.TimeSheet && Modules.TimeSheet.processAll },
    { fn: Modules.LeadSet && Modules.LeadSet.processAll },
  ];

  steps.forEach(function (s) {
    if (typeof s.fn === 'function') {
      try {
        s.fn();
      } catch (err) {
        Modules.Shared.PayrollLogger.error(err);
      }
    }
  });

  ui.alert('Full payroll complete');
}

/**
 * Displays a popup to enter a technician name, then runs payroll for that specific technician.
 * Processes all modules for the individual technician.
 */
function runIndividualPayroll() {
  var ui = SpreadsheetApp.getUi();
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  
  // Prompt for technician name
  var response = ui.prompt(
    'Individual Payroll',
    'Enter the technician\'s name:',
    ui.ButtonSet.OK_CANCEL
  );
  
  // Get the response
  var button = response.getSelectedButton();
  var techName = response.getResponseText().trim();
  
  if (button !== ui.Button.OK || !techName) {
    return;
  }
  
  // Check if the technician's sheet exists
  var techSheet = ss.getSheetByName(techName);
  if (!techSheet) {
    ui.alert('Error: Could not find a sheet for technician "' + techName + '".');
    return;
  }
  
  ui.alert('Running payroll for ' + techName + ' – please wait');
  
  // Run each module's process for this specific technician
  var steps = [
    { name: 'Spiff/Bonus', fn: Modules.SpiffBonus && Modules.SpiffBonus.processForTechnician, args: [techName] },
    { name: 'PBP', fn: Modules.PBP && Modules.PBP.updatePBPForTechnician, args: [techName] },
    { name: 'Yard Signs', fn: Modules.YardSign && Modules.YardSign.processForTechnician, args: [techName] },
    { name: 'Timesheet', fn: Modules.TimeSheet && Modules.TimeSheet.processForTechnician, args: [techName] },
    { name: 'Lead Set', fn: Modules.LeadSet && Modules.LeadSet.processForTechnician, args: [techName] },
  ];
  
  var errors = [];
  var successCount = 0;
  
  steps.forEach(function(step) {
    if (typeof step.fn === 'function') {
      try {
        step.fn.apply(null, step.args);
        successCount++;
      } catch (err) {
        Modules.Shared.PayrollLogger.error('Error processing ' + step.name + ' for ' + techName + ':', err);
        errors.push(step.name + ': ' + err.message);
      }
    }
  });
  
  // Show completion message
  if (errors.length > 0) {
    ui.alert('Completed with errors: ' + errors.join(', '));
  } else {
    ui.alert('Individual payroll complete for ' + techName);
  }
}

// Prompt user to run payroll for everyone or an individual technician.
function payrollPrompt() {
  var ui = SpreadsheetApp.getUi();
  var choice = ui.alert(
    'Payroll',
    'Run payroll for EVERYONE (Yes) or an INDIVIDUAL technician (No)?',
    ui.ButtonSet.YES_NO
  );

  if (choice === ui.Button.YES) {
    // Run payroll for all technicians
    runFullPayroll();
  } else if (choice === ui.Button.NO) {
    // Run payroll for one technician (will prompt for name)
    runIndividualPayroll();
  }
}

// Prompt user to run Bonus for everyone or an individual technician.
function bonusPrompt() {
  var ui = SpreadsheetApp.getUi();
  var choice = ui.alert(
    'Bonus',
    'Run BONUS for EVERYONE (Yes) or an INDIVIDUAL technician (No)?',
    ui.ButtonSet.YES_NO
  );

  if (choice === ui.Button.YES) {
    // Run bonus for all technicians
    if (typeof processAllSpiffBonusWithCustomers === 'function') {
      processAllSpiffBonusWithCustomers();
    } else if (Modules.Bonus && typeof Modules.Bonus.processAllBonus === 'function') {
      Modules.Bonus.processAllBonus(false);
    }
  } else if (choice === ui.Button.NO) {
    // Prompt for technician name
    var resp = ui.prompt('Individual Bonus', 'Enter the technician\'s name:', ui.ButtonSet.OK_CANCEL);
    if (resp.getSelectedButton() !== ui.Button.OK) return;
    var techName = resp.getResponseText().trim();
    if (!techName) return;

    // Delegate to bonus processing for individual
    if (Modules.Bonus && typeof Modules.Bonus.processTechnicianBonus === 'function') {
      Modules.Bonus.processTechnicianBonus(techName, null, null);
    } else if (typeof updateSpiffBonusWithCustomersList === 'function') {
      updateSpiffBonusWithCustomersList(techName, null, null);
    }
  }
}

// Prompt user to run PBP for everyone or an individual technician.
function pbpPrompt() {
  var ui = SpreadsheetApp.getUi();
  var choice = ui.alert(
    'PBP',
    'Run PBP for EVERYONE (Yes) or an INDIVIDUAL technician (No)?',
    ui.ButtonSet.YES_NO
  );

  if (choice === ui.Button.YES) {
    // Run PBP for all technicians
    if (typeof processAllPBPGlobal === 'function') {
      processAllPBPGlobal();
    } else if (Modules.PBP && typeof Modules.PBP.processAllPBP === 'function') {
      Modules.PBP.processAllPBP();
    } else if (typeof pbpMain_processAllPBP === 'function') {
      pbpMain_processAllPBP();
    }
  } else if (choice === ui.Button.NO) {
    var resp = ui.prompt('Individual PBP', 'Enter the technician\'s name:', ui.ButtonSet.OK_CANCEL);
    if (resp.getSelectedButton() !== ui.Button.OK) return;
    var techName = resp.getResponseText().trim();
    if (!techName) return;

    // Process PBP for individual technician
    var functionFound = false;
    
    try {
      if (Modules.PBP && typeof Modules.PBP.updatePBPForTechnician === 'function') {
        Modules.PBP.updatePBPForTechnician(techName);
        functionFound = true;
      } else if (Modules.PBP && typeof Modules.PBP.processForTechnician === 'function') {
        Modules.PBP.processForTechnician(techName);
        functionFound = true;
      } else if (Modules.PBP && typeof Modules.PBP.processPBPForTechnician === 'function') {
        Modules.PBP.processPBPForTechnician(techName);
        functionFound = true;
      } else if (typeof updatePBPForTechnician === 'function') {
        updatePBPForTechnician(techName);
        functionFound = true;
      } else {
        // Log what functions are available for debugging
        var availableFunctions = [];
        if (Modules.PBP) {
          for (var key in Modules.PBP) {
            if (typeof Modules.PBP[key] === 'function') {
              availableFunctions.push(key);
            }
          }
        }
        Modules.Shared.PayrollLogger.info('Available PBP functions: ' + availableFunctions.join(', '));
        
        if (!functionFound) {
          throw new Error('No valid PBP processing function found for individual technician');
        }
      }
    } catch (err) {
      Modules.Shared.PayrollLogger.error('Error processing PBP for ' + techName + ': ' + err);
      ui.alert('Error processing PBP', 
               'Could not process PBP for technician "' + techName + '". Error: ' + err.message, 
               ui.ButtonSet.OK);
    }
  }
}

// Prompt user to run Lead Set for everyone or an individual technician.
function leadSetPrompt() {
  var ui = SpreadsheetApp.getUi();
  var choice = ui.alert(
    'Lead Set',
    'Run Lead Set for EVERYONE (Yes) or an INDIVIDUAL technician (No)?',
    ui.ButtonSet.YES_NO
  );

  if (choice === ui.Button.YES) {
    // Batch processing – try wrappers then module methods
    if (typeof processAllLeadSets === 'function') {
      processAllLeadSets();
    } else if (Modules.LeadSet && typeof Modules.LeadSet.processAll === 'function') {
      Modules.LeadSet.processAll();
    } else if (Modules.LeadSet && typeof Modules.LeadSet.processAllLeadSets === 'function') {
      Modules.LeadSet.processAllLeadSets();
    } else if (Modules.LeadSet && Modules.LeadSet.Main && typeof Modules.LeadSet.Main.processAllLeadSets === 'function') {
      Modules.LeadSet.Main.processAllLeadSets();
    } else {
      ui.alert('Error', 'No valid Lead Set batch processing function found.', ui.ButtonSet.OK);
    }
  } else if (choice === ui.Button.NO) {
    var resp = ui.prompt('Individual Lead Set', 'Enter the technician\'s name:', ui.ButtonSet.OK_CANCEL);
    if (resp.getSelectedButton() !== ui.Button.OK) return;
    var techName = resp.getResponseText().trim();
    if (!techName) return;

    var functionFound = false;
    try {
      if (Modules.LeadSet && typeof Modules.LeadSet.processForTechnician === 'function') {
        Modules.LeadSet.processForTechnician(techName);
        functionFound = true;
      } else if (Modules.LeadSet && typeof Modules.LeadSet.updateLeadSetForTechnician === 'function') {
        // Some implementations may attach this directly on the module
        Modules.LeadSet.updateLeadSetForTechnician(techName);
        functionFound = true;
      } else if (Modules.LeadSet && Modules.LeadSet.Main && typeof Modules.LeadSet.Main.updateLeadSetForTechnician === 'function') {
        // Core implementation in LeadSetMain
        Modules.LeadSet.Main.updateLeadSetForTechnician(null, null, techName, null, null, false);
        functionFound = true;
      } else if (typeof processLeadSetForTechnician === 'function') {
        processLeadSetForTechnician(techName);
        functionFound = true;
      } else {
        // Attempt introspection for dev debugging
        var available = [];
        if (Modules.LeadSet) {
          for (var key in Modules.LeadSet) {
            if (typeof Modules.LeadSet[key] === 'function') {
              available.push(key);
            }
          }
        }
        Modules.Shared && Modules.Shared.PayrollLogger && Modules.Shared.PayrollLogger.info('Available LeadSet functions: ' + available.join(', '));
      }

      if (!functionFound) {
        throw new Error('No valid Lead Set processing function found for individual technician');
      }

      // Show simple completion message – assume underlying function shows detailed summary if implemented
      ui.alert('Lead Set processing complete for ' + techName);
    } catch (err) {
      if (Modules.Shared && Modules.Shared.PayrollLogger) {
        Modules.Shared.PayrollLogger.error('Error processing Lead Set for ' + techName + ':', err);
      }
      ui.alert('Error processing Lead Set',
               'Could not process Lead Set for technician "' + techName + '". Error: ' + err.message,
               ui.ButtonSet.OK);
    }
  }
}

function timesheetPrompt() {
  var ui = SpreadsheetApp.getUi();
  var choice = ui.alert(
    'Timesheet',
    'Process Timesheet for EVERYONE (Yes) or an INDIVIDUAL technician (No)?',
    ui.ButtonSet.YES_NO
  );

  if (choice === ui.Button.YES) {
    // Batch processing
    try {
      if (typeof processAllTimesheets === 'function') {
        processAllTimesheets();
      } else if (Modules.TimeSheet && typeof Modules.TimeSheet.processAll === 'function') {
        Modules.TimeSheet.processAll();
      } else if (Modules.TimeSheet && Modules.TimeSheet.Main && typeof Modules.TimeSheet.Main.processAllTimesheets === 'function') {
        Modules.TimeSheet.Main.processAllTimesheets();
      } else {
        ui.alert('Error', 'No valid Timesheet batch processing function found.', ui.ButtonSet.OK);
      }
    } catch (err) {
      if (Modules.Shared && Modules.Shared.PayrollLogger) {
        Modules.Shared.PayrollLogger.error('Error processing all timesheets:', err);
      }
      ui.alert('Error processing Timesheets', err && err.message ? err.message : err, ui.ButtonSet.OK);
    }
  } else if (choice === ui.Button.NO) {
    var resp = ui.prompt('Individual Timesheet', 'Enter the technician\'s name:', ui.ButtonSet.OK_CANCEL);
    if (resp.getSelectedButton() !== ui.Button.OK) return;
    var techName = (resp.getResponseText() || '').trim();
    if (!techName) return;

    try {
      var functionFound = false;
      if (Modules.TimeSheet && typeof Modules.TimeSheet.processForTechnician === 'function') {
        Modules.TimeSheet.processForTechnician(techName);
        functionFound = true;
      } else if (typeof updateHoursForTechnician === 'function') {
        updateHoursForTechnician(techName, null, null, true, false);
        functionFound = true;
      } else if (Modules.TimeSheet && Modules.TimeSheet.Main && typeof Modules.TimeSheet.Main.processTimesheetForTechnician === 'function') {
        Modules.TimeSheet.Main.processTimesheetForTechnician(techName);
        functionFound = true;
      }

      if (!functionFound) {
        ui.alert('Error', 'No valid Timesheet processing function found for technician "' + techName + '".', ui.ButtonSet.OK);
      } else {
        // Underlying functions are expected to show their own summary popups.
        // Still provide a lightweight confirmation for consistency.
        ui.alert('Timesheet processing complete for ' + techName);
      }
    } catch (err) {
      if (Modules.Shared && Modules.Shared.PayrollLogger) {
        Modules.Shared.PayrollLogger.error('Error processing timesheet for ' + techName + ':', err);
      }
      ui.alert('Error processing Timesheet',
               'Could not process timesheet for technician "' + techName + '". Error: ' + (err && err.message ? err.message : err),
               ui.ButtonSet.OK);
    }
  }
}

function yardSignPrompt() {
  var ui = SpreadsheetApp.getUi();
  var choice = ui.alert('Yard Signs','Process Yard Signs for EVERYONE (Yes) or an INDIVIDUAL technician (No)?',ui.ButtonSet.YES_NO);
  if (choice === ui.Button.YES) {
    try {
      if (typeof processAllYardSigns === 'function') {
        processAllYardSigns();
      } else if (Modules.YardSign && typeof Modules.YardSign.processAll === 'function') {
        Modules.YardSign.processAll();
      } else if (Modules.YardSign && Modules.YardSign.Main && typeof Modules.YardSign.Main.processAllYardSigns === 'function') {
        Modules.YardSign.Main.processAllYardSigns();
      } else {
        ui.alert('Error','No valid Yard Sign batch processing function found.',ui.ButtonSet.OK);
      }
    } catch (err) {
      Modules.Shared && Modules.Shared.PayrollLogger && Modules.Shared.PayrollLogger.error('Error processing all yard signs:',err);
      ui.alert('Error processing Yard Signs',err && err.message ? err.message : err,ui.ButtonSet.OK);
    }
  } else if (choice === ui.Button.NO) {
    var resp = ui.prompt('Individual Yard Sign','Enter the technician\'s name:',ui.ButtonSet.OK_CANCEL);
    if (resp.getSelectedButton() !== ui.Button.OK) return;
    var techName = (resp.getResponseText() || '').trim();
    if (!techName) return;
    try {
      var found = false;
      if (Modules.YardSign && typeof Modules.YardSign.processForTechnician === 'function') { Modules.YardSign.processForTechnician(techName); found = true; }
      else if (Modules.YardSign && typeof Modules.YardSign.updateYardSignForTechnician === 'function') { Modules.YardSign.updateYardSignForTechnician(techName); found = true; }
      else if (Modules.YardSign && Modules.YardSign.Main && typeof Modules.YardSign.Main.updateYardSignForTechnician === 'function') { Modules.YardSign.Main.updateYardSignForTechnician(techName,null,null,true,false); found = true; }
      else if (typeof processYardSignForTechnician === 'function') { processYardSignForTechnician(techName); found = true; }
      if (!found) throw new Error('No valid Yard Sign processing function found for individual technician');
    } catch (err) {
      Modules.Shared && Modules.Shared.PayrollLogger && Modules.Shared.PayrollLogger.error('Error processing Yard Sign for '+techName+':',err);
      ui.alert('Error processing Yard Sign','Could not process Yard Sign for technician "'+techName+'". Error: '+err.message,ui.ButtonSet.OK);
    }
  }
}

Modules.Main = {
  onOpen: onOpen,
  onEdit: onEdit,
  runFullPayroll: runFullPayroll,
  runIndividualPayroll: runIndividualPayroll,
  payrollPrompt: payrollPrompt,
  bonusPrompt: bonusPrompt,
  pbpPrompt: pbpPrompt,
  leadSetPrompt: leadSetPrompt,
  timesheetPrompt: timesheetPrompt,
  yardSignPrompt: yardSignPrompt,
}; 