// Namespace stub â€“ Menu
var Modules = Modules || {};
Modules.Menu = Modules.Menu || {};

(function() {
  'use strict';
  /**
   * Appends high-level menu items that are not module-specific.
   * Called by Core/Main during onOpen.
   *
   * @param {GoogleAppsScript.Base.Menu} menu SpreadsheetApp.Menu to append items to
   */
  Modules.Menu.addMenuEntries = function(menu) {
    menu
      .addItem('All Payroll', 'runFullPayroll')
      .addSeparator()
      .addItem('Individual Payroll', 'runIndividualPayroll')
      .addSeparator()
      .addItem('All Spiff/Bonus', 'processAllSpiffBonusWithCustomers')
      .addItem('All PBP', 'processAllPBPGlobal')
      .addItem('All Yard Signs', 'menuProcessAllYardSigns')
      .addItem('All Timesheet', 'processAllTimesheets')
      .addItem('All Lead Set', 'processAllLeadSets');
  };

  /**
   * Builds the root "Technician Tools" menu and attaches it to the UI.
   * Iterates over every loaded `Modules.<Module>` that exposes `addMenuEntries` to
   * contribute its specific submenu items, followed by the static core entries
   * defined in {@link Modules.Menu.addMenuEntries}.
   *
   * Intended to be called exactly once from `Modules.Main.onOpen`.
   *
   * @param {GoogleAppsScript.Base.Ui} ui The spreadsheet UI instance.
   */
  Modules.Menu.buildRootMenu = function(ui) {
    if (!ui) return;

    var rootLabel = (Modules.Constants && Modules.Constants.MENU && Modules.Constants.MENU.ROOT) || 'ðŸšš Technician Tools';
    var menu = ui.createMenu(rootLabel);

    // Get ordered modules directly, no longer relying on external _getOrderedModules
    var orderedModules = [
      Modules.ApprovedMonitor,
      Modules.TimeSheet,
      Modules.SpiffBonus,
      Modules.PBP,
      Modules.YardSign,
      Modules.LeadSet,
      Modules.NewTechnician
    ].filter(function(m) { return m; });

    // Delegate to each module so they can append their specific menu items.
    orderedModules.forEach(function(mod) {
      // Skip NewTechnician module to prevent its items appearing in Technician Tools
      if (mod === Modules.NewTechnician) return;
      
      if (typeof mod.addMenuEntries === 'function') {
        try {
          mod.addMenuEntries(menu);
        } catch (err) {
          Modules.Shared.PayrollLogger.error(err);
        }
      }
    });

    // Append core static entries (payroll shortcuts, etc.).
    if (typeof Modules.Menu.addMenuEntries === 'function') {
      Modules.Menu.addMenuEntries(menu);
    }

    menu.addToUi();

    // Stand-alone "Technician Sheets" menu â€“ moved here from NewTechnician module
    ui.createMenu('ðŸ—‚ Technician Sheets')
      .addItem('New Sheet', 'createNewTechnicianSheet')
      .addItem('All New Sheets', 'createAllNewTechnicianSheets')
      .addToUi();
  };
})(); 