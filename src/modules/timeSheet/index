// Namespace stub â€“ TimeSheet
var Modules = Modules || {};
Modules.TimeSheet = Modules.TimeSheet || {};

/* global Logger, processTimesheetForTechnician, updateHoursForTechnician */

// Public API for TimeSheet Module

/**
 * Adds menu entries specific to the TimeSheet module.
 * @param {GoogleAppsScript.Base.Ui} ui The UI environment.
 */
Modules.TimeSheet.addMenuEntries = function(ui) {
  // TODO: Call internal logic from moved files (TimeSheetLogic, TimesheetActions)
  console.log('TimeSheet: addMenuEntries called');
};

/**
 * Handles edit events relevant to the TimeSheet module.
 * Ignores any triggers from Column G in the Main sheet.
 * @param {GoogleAppsScript.Events.SheetsOnEdit} e The edit event object.
 * @return {Object|null} Optional result or status.
 */
Modules.TimeSheet.handleEdit = function(e) {
  // Skip processing if edit is in Column G of Main sheet
  if (e && e.range) {
    var sheet = e.range.getSheet();
    if (sheet.getName() === Modules.Constants.SHEET.MAIN && e.range.getColumn() === 7) {
      console.log('TimeSheet: Ignoring trigger from Column G in Main sheet as requested');
      return null;
    }
  }
  
  // TODO: Call internal logic from moved files (TimeSheetLogic, TimesheetActions)
  console.log('TimeSheet: handleEdit called for range ' + (e && e.range ? e.range.getA1Notation() : 'N/A'));
  return null;
};

/**
 * Processes all relevant entries for the TimeSheet module.
 */
Modules.TimeSheet.processAll = function() {
  // Placeholder for implementation
  console.log('TimeSheet: processAll called');
  
  // Call the appropriate function if available
  if (typeof processAllTimesheets === 'function') {
    processAllTimesheets();
  }
};

/**
 * Processes TimeSheet entries for a specific technician.
 * @param {string} technicianName The name of the technician to process.
 */
Modules.TimeSheet.processForTechnician = function(technicianName) {
  if (!technicianName) return;

  console.log('TimeSheet: Processing for technician ' + technicianName);

  try {
    // Preferred explicit function if available (newer code-base)
    var fnIndividual = globalThis['processTimesheetForTechnician'];
    if (typeof fnIndividual === 'function') {
      fnIndividual(technicianName);
      return;
    }

    // Fallback to legacy utility residing in TimeSheetLogic
    var fnUpdate = globalThis['updateHoursForTechnician'];
    if (typeof fnUpdate === 'function') {
      // actionRow, actionColumn = 0; skipStatusUpdate = true (no dropdown update); suppressPopup = false (show summary)
      fnUpdate(technicianName, 0, 0, true, false);
      return;
    }

    // Deep-namespace fallback (see Rule 23)
    if (Modules.TimeSheet.Main && typeof Modules.TimeSheet.Main.processTimesheetForTechnician === 'function') {
      Modules.TimeSheet.Main.processTimesheetForTechnician(technicianName);
      return;
    }

    // If we reach here, nothing processed
    console.log('TimeSheet: No valid individual processing function found for: ' + technicianName);
  } catch (err) {
    if (Modules.Shared && Modules.Shared.PayrollLogger) {
      Modules.Shared.PayrollLogger.error('TimeSheet.processForTechnician error:', err);
    } else {
      console.error('TimeSheet.processForTechnician error: ' + err);
    }
    throw err; // propagate so callers can handle
  }
};

// Note: processAll is not listed for this module in the migration plan table. 