/**
 * Cardinal Payroll System - Bonus Utilities
 * Contains helper functions for the Bonus module.
 * 
 * Dependencies:
 * - src/core/Constants (for sheet names)
 * - src/core/Utilities (for sheet mapping)
 */

// Namespace for Bonus module
var Modules = Modules || {};
Modules.Bonus = Modules.Bonus || {};
Modules.Bonus.Utilities = Modules.Bonus.Utilities || {};

/**
 * Builds a mapping of header → column index (1-based) for the Spiff/Bonus sheet.
 * Falls back to fixed indices when a header cannot be found.
 *
 * @param {Sheet} sheet - The Spiff/Bonus sheet object.
 * @return {Object<string,number>} Map of lowercase keys to 1-based indices.
 */
Modules.Bonus.Utilities.getHeaderMap = function(sheet) {
  var map = {
    customerName: 2,   // B
    businessUnit: 3,   // C
    completionDate: 4, // D
    invoiceNumber: 5,  // E
    soldBy: 6,         // F – Sold By Technician
    technician: 7,     // G – Primary Technician
    assignedTechs: 8,  // H – Assigned Technicians (comma-separated)
    bonusAmount: 9,    // I – $ Bonus
    crossSaleGroup: 10, // J - Cross Sale Group
    itemName: 11,      // K - Item Name
    invoiceTotal: 12,  // L - Invoice Total
    paysTechSpecific: 13 // M - Pays Tech Specific Bonus
  };

  if (!sheet) return map;
  try {
    var headerRow = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
    headerRow.forEach(function(h, idx) {
      if (!h) return;
      var key = String(h).trim().toLowerCase();
      if (key === 'customer name')       map.customerName = idx + 1;
      else if (key === 'business unit')  map.businessUnit = idx + 1;
      else if (key === 'completion date')map.completionDate = idx + 1;
      else if (key === 'invoice number') map.invoiceNumber = idx + 1;
      else if (key === 'sold by technician' || key === 'sold by') map.soldBy = idx + 1;
      else if (key === 'technician')      map.technician = idx + 1;
      else if (key.indexOf('assigned') === 0) map.assignedTechs = idx + 1;
      else if (key === 'cross sale group') map.crossSaleGroup = idx + 1;
      else if (key === 'item name')       map.itemName = idx + 1;
      else if (key.indexOf('invoice total') === 0) map.invoiceTotal = idx + 1;
      else if (key.indexOf('$ bonus') !== -1 || key === '$ bonus') map.bonusAmount = idx + 1;
      else if (key === 'pays tech specific bonus') map.paysTechSpecific = idx + 1;
      
      // Log header mapping for debugging
      console.log("Header [" + (idx+1) + "]: '" + key + "' -> " + 
                (key === 'pays tech specific bonus' ? "paysTechSpecific" : 
                 key === 'customer name' ? "customerName" : 
                 key === '$ bonus' || key.indexOf('$ bonus') !== -1 ? "bonusAmount" : 
                 "other column"));
    });
    console.log("Spiff/Bonus sheet header mapping: " + JSON.stringify(map));
  } catch (e) {
    console.error("Error mapping Spiff/Bonus headers: " + e.message);
  }
  return map;
};

/**
 * Splits a string of technicians (comma / & / and) into a tidy array
 * 
 * @param {string} str - The technician names string to parse
 * @return {Array<string>} Array of technician names
 */
Modules.Bonus.Utilities.parseTechnicianNames = function(str) {
  if (!str) return [];
  return String(str)
    .split(/[,\n&]+/)
    .map(function(s) { return s.trim(); })
    .filter(Boolean);
};

/**
 * Finds the first row in column A matching the given label (case-insensitive).
 * Returns the 1-based row index or ‑1 when not found.
 * 
 * @param {Sheet} sheet - The sheet to search in
 * @param {string} label - The label to find
 * @return {number} Row index (1-based) or -1 if not found
 */
Modules.Bonus.Utilities.findRowByColA = function(sheet, label) {
  if (!sheet) return -1;
  var last = sheet.getLastRow();
  var colA = sheet.getRange(1, 1, last, 1).getValues();
  var target = String(label).toLowerCase();
  for (var r = 0; r < colA.length; r++) {
    if (String(colA[r][0]).trim().toLowerCase() === target)
      return r + 1;
  }
  return -1;
};

/**
 * Insert or delete rows so that exactly `desired` blank rows exist starting at `startRow`.
 * 
 * @param {Sheet} sheet - The sheet to modify
 * @param {number} startRow - The starting row
 * @param {number} current - Current number of rows
 * @param {number} desired - Desired number of rows
 */
Modules.Bonus.Utilities.adjustRows = function(sheet, startRow, current, desired) {
  if (desired === current) return;
  if (desired > current) sheet.insertRowsAfter(startRow + current - 1, desired - current);
  else                   sheet.deleteRows(startRow, current - desired);
};

/**
 * Checks if a technician is Class 1 (ineligible for bonus).
 * 
 * @param {string} technicianName - The name of the technician
 * @param {Sheet} ratesSheet - The Main sheet with technician data
 * @return {boolean} True if technician is Class 1, false otherwise
 */
Modules.Bonus.Utilities.isTechnicianClass1 = function(technicianName, ratesSheet) {
  // Check if Core Utilities module has the eligibility function
  if (typeof Modules !== 'undefined' && 
      typeof Modules.Utilities !== 'undefined' && 
      typeof Modules.Utilities.isTechnicianEligibleForBonus === 'function') {
    // Invert the result since isTechnicianEligibleForBonus returns true for eligible (non-Class1)
    // and we want to return true for Class1 (ineligible)
    return !Modules.Utilities.isTechnicianEligibleForBonus(technicianName, ratesSheet);
  }
  
  // If core function isn't available, use the original implementation
  if (!technicianName || !ratesSheet) return false;
  
  try {
    // Try to use the Core Utilities module for finding column indices
    var positionColumn = 4; // Default position column if Utilities not available
    var nameColumn = 1;     // Default name column
    var dataStartRow = 3;   // Default data start row
    
    // If Core Utilities module is available, use it for consistent sheet mapping
    if (typeof Modules !== 'undefined' && 
        typeof Modules.Utilities !== 'undefined' && 
        typeof Modules.Utilities.getRatesSheetMapping === 'function') {
      var mapping = Modules.Utilities.getRatesSheetMapping();
      positionColumn = mapping.positionColumn;
      nameColumn = mapping.nameColumn;
      dataStartRow = mapping.dataStartRow;
    }
    
    // Find the technician row using the correct mapping
    var techData = ratesSheet.getDataRange().getValues();
    var techRow = -1;
    
    // Search starting at the actual data row
    for (var i = Math.max(0, dataStartRow - 1); i < techData.length; i++) {
      var currentName = techData[i][nameColumn - 1] || "";
      if (typeof currentName === 'string' && 
          currentName.trim().toLowerCase() === technicianName.toLowerCase()) {
        techRow = i;
        break;
      }
    }
    
    if (techRow === -1) {
      console.log("Technician not found in rates sheet: " + technicianName);
      return false; // Technician not found
    }
    
    // Check position - ensure index is valid
    if (positionColumn - 1 >= techData[techRow].length) {
      console.log("Position column index out of bounds for " + technicianName);
      return false;
    }
    
    var position = techData[techRow][positionColumn - 1];
    if (!position) return false;
    
    // Check if position is C1 or CLASS 1
    var positionStr = String(position).trim().toUpperCase();
    var isClass1 = positionStr === "C1" || positionStr === "CLASS 1";
    
    if (isClass1) {
      console.log(technicianName + " is Class 1, position: " + positionStr);
    }
    
    return isClass1;
  } catch (e) {
    console.error("Error checking if technician is Class 1: " + e.message + " / " + e.stack);
    return false; // Default to not Class 1 in case of error
  }
};

/**
 * Clears the data rows in the Bonus section of a technician sheet.
 * Only clears rows where Type column (J) contains 'Bonus'.
 * Similar to the clearSpiffDataSection function in PBP module.
 *
 * @param {Sheet} sheet - The technician sheet to clear
 * @return {number} The number of rows cleared
 */
Modules.Bonus.Utilities.clearBonusDataSection = function(sheet) {
  if (!sheet) return 0;
  
  try {
    // Find rows that contain "Bonus" in column J (Type)
    var lastRow = sheet.getLastRow();
    var typeColumn = 10; // Column J
    var rowsCleared = 0;
    
    if (lastRow < 1 || sheet.getLastColumn() < typeColumn) {
      return 0;
    }
    
    // Get all values in column J
    var typeValues = sheet.getRange(1, typeColumn, lastRow, 1).getValues();
    
    // Clear rows with "Bonus" in column J (only columns E-J)
    for (var i = 0; i < typeValues.length; i++) {
      var cellValue = typeValues[i][0];
      if (cellValue && typeof cellValue === 'string' && 
          cellValue.toString().trim().toLowerCase() === "bonus") {
        var row = i + 1; // Convert to 1-based row index
        sheet.getRange(row, 5, 1, 6).clearContent(); // Clear columns E-J (5-10)
        rowsCleared++;
      }
    }
    
    console.log("Cleared " + rowsCleared + " bonus rows in " + sheet.getName());
    return rowsCleared;
  } catch (e) {
    console.error("Error clearing bonus data section: " + e.message);
    return 0;
  }
};

/**
 * Updates the top summary section ('Bonus') with amount and count.
 * Similar to updateTopSummaryInstallPay in PBP module.
 *
 * @param {Sheet} sheet - The technician sheet to update
 * @param {number} amount - The total bonus amount
 * @param {number} count - The number of bonus entries
 */
Modules.Bonus.Utilities.updateTopSummaryBonus = function(sheet, amount, count) {
  if (!sheet) return;
  
  // Row 11 is the designated "Total Spiff" / Bonus summary row per Technician_Sheet_Mapping.md
  var summaryRow = 11;
  try {
    // Primary write – B11 for count, C11 for amount
    sheet.getRange(summaryRow, 2).setValue(count); // B11
    sheet.getRange(summaryRow, 3).setValue(amount).setNumberFormat('$#,##0.00'); // C11
    console.log("Updated Bonus summary in B11/C11 with count: " + count + ", amount: $" + amount.toFixed(2));
  } catch (e) {
    // If the direct write fails (e.g., row structure is different), fall back to searching labels
    console.error("Primary update in B11/C11 failed: " + e.message + ". Falling back to label search.");
    try {
      // Try to locate row labelled "Total Spiff" first, then "Bonus"
      var bonusRow = Modules.Bonus.Utilities.findRowByColA(sheet, 'Total Spiff');
      if (bonusRow <= 0) bonusRow = Modules.Bonus.Utilities.findRowByColA(sheet, 'Bonus');
      if (bonusRow > 0) {
        sheet.getRange(bonusRow, 2).setValue(count); // Col B
        sheet.getRange(bonusRow, 3).setValue(amount).setNumberFormat('$#,##0.00'); // Col C
        console.log("Fallback updated Bonus summary in row " + bonusRow + " with count: " + count + ", amount: $" + amount.toFixed(2));
      } else {
        console.log("Bonus summary row not found in sheet: " + sheet.getName());
      }
    } catch (fallbackErr) {
      console.error("Fallback update also failed: " + fallbackErr.message);
    }
  }
};

/**
 * Helper function to format dates consistently across Bonus module.
 * Mirrors implementation removed from BonusMain.
 *
 * @param {Date|string|number} d - The date (or value) to format
 * @return {string} Formatted date as MM/dd/yyyy or original value if un-parseable
 */
Modules.Bonus.Utilities.formatDateSafe = function(d) {
  try {
    // If already a Date object, use directly; otherwise attempt to coerce
    var dateObj;
    if (d instanceof Date) {
      dateObj = d;
    } else if (typeof d === 'number') {
      // Treat as Google Sheets serial date
      dateObj = new Date(Math.round((d - 25569) * 86400000));
    } else if (typeof d === 'string') {
      var parsed = new Date(d);
      if (!isNaN(parsed.getTime())) {
        dateObj = parsed;
      } else {
        return String(d || '');
      }
    } else {
      return String(d || '');
    }

    // Format as MM/dd/yyyy
    var month = (dateObj.getMonth() + 1).toString().padStart(2, '0');
    var day = dateObj.getDate().toString().padStart(2, '0');
    var year = dateObj.getFullYear();
    return month + '/' + day + '/' + year;
  } catch (e) {
    console.error('formatDateSafe error: ' + e.message);
    return String(d || '');
  }
};

// Create legacy function aliases (if they don't already exist)
if (typeof Bonus_getHeaderMap === 'undefined') {
  var Bonus_getHeaderMap = Modules.Bonus.Utilities.getHeaderMap;
}
if (typeof Bonus_parseTechnicianNames === 'undefined') {
  var Bonus_parseTechnicianNames = Modules.Bonus.Utilities.parseTechnicianNames;
}
if (typeof Bonus_findRowByColA === 'undefined') {
  var Bonus_findRowByColA = Modules.Bonus.Utilities.findRowByColA;
}
if (typeof Bonus_adjustRows === 'undefined') {
  var Bonus_adjustRows = Modules.Bonus.Utilities.adjustRows;
}

// Legacy alias (if needed by external scripts)
if (typeof Bonus_formatDateSafe === 'undefined') {
  var Bonus_formatDateSafe = Modules.Bonus.Utilities.formatDateSafe;
}
