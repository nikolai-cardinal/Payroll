// Namespace stub â€“ Bonus
var Modules = Modules || {};
Modules.Bonus = Modules.Bonus || {};

/**
 * Adds menu entries specific to the Bonus module.
 * @param {GoogleAppsScript.Base.Ui} ui The UI environment.
 */
Modules.Bonus.addMenuEntries = function(ui) {
  Logger.log('Bonus: addMenuEntries called');
};

/**
 * Handles edit events relevant to the Bonus module.
 * Ignores any triggers from Column G in the Main sheet.
 * @param {GoogleAppsScript.Events.SheetsOnEdit} e The edit event object.
 * @return {Object|null} Optional result or status.
 */
Modules.Bonus.handleEdit = function(e) {
  // Skip processing if edit is in Column G of Main sheet
  if (e && e.range) {
    var sheet = e.range.getSheet();
    if (sheet.getName() === Modules.Constants.SHEET.MAIN && e.range.getColumn() === 7) {
      Logger.log('Bonus: Ignoring trigger from Column G in Main sheet as requested');
      return null;
    }
  }
  
  Logger.log('Bonus: handleEdit called for range ' + (e && e.range ? e.range.getA1Notation() : 'N/A'));
  return null;
};

/**
 * Processes all relevant Bonus entries for all technicians.
 */
Modules.Bonus.processAll = function() {
  Logger.log('Bonus: processAll called');
  return Modules.Bonus.Main.processAllBonus();
};

/**
 * Processes Bonus entries for a specific technician.
 * @param {string} technicianName The name of the technician to process.
 * @param {number} actionRow - The row in the Main sheet where the action was triggered.
 * @param {number} actionColumn - The column in the Main sheet where the action was triggered.
 * @param {Object} [options={}] Optional configuration object.
 * @return {object|null} Result object with success information or null on failure.
 */
Modules.Bonus.processForTechnician = function(technicianName, actionRow, actionColumn, options = {}) {
  if (!technicianName) return null;
  
  Logger.log('Bonus: Processing for technician ' + technicianName);
  return Modules.Bonus.Main.processBonus(technicianName, actionRow, actionColumn, options);
};

/**
 * Updates the top summary section in a technician's sheet with Bonus information.
 * @param {Sheet} techSheet - The technician's sheet.
 * @param {number} totalAmount - The total bonus amount.
 * @param {number} entryCount - The number of bonus entries.
 */
Modules.Bonus.updateTopSummary = function(techSheet, totalAmount, entryCount) {
  Modules.Bonus.Utilities.updateTopSummaryBonus(techSheet, totalAmount, entryCount);
};

/**
 * Clears the Bonus data section in a technician's sheet.
 * @param {Sheet} techSheet - The technician's sheet.
 * @param {Array} [newData] - Optional array of new data entries.
 * @return {number} Number of rows cleared.
 */
Modules.Bonus.clearDataSection = function(techSheet, newData) {
  return Modules.Bonus.Utilities.clearBonusDataSection(techSheet, newData);
};

/**
 * Writes Bonus data to a technician's sheet.
 * @param {Sheet} techSheet - The technician's sheet.
 * @param {number} headerRow - The row containing the section header.
 * @param {Array} customerData - Array of customer data entries.
 */
Modules.Bonus.writeDataToSheet = function(techSheet, headerRow, customerData) {
  Modules.Bonus.Utilities.writeBonusDataToSheet(techSheet, headerRow, customerData);
};

// Initialize Legacy compatibility module
Modules.Bonus.initLegacy = function() {
  // Load the legacy module - should be automatically loaded by Apps Script
  console.log('Initializing Bonus Legacy compatibility layer');
  
  // Forward legacy functions to make them available through the Bonus namespace
  Modules.Bonus.updateSpiffBonusWithCustomersList = updateSpiffBonusWithCustomersList;
  Modules.Bonus.processAllSpiffBonusWithCustomers = processAllSpiffBonusWithCustomers;
  Modules.Bonus.updateSpiffBonusWithCustomersListAll = updateSpiffBonusWithCustomersListAll;
  Modules.Bonus.processSpiffAndBonus = processSpiffAndBonus;
  Modules.Bonus.processSpiffBonusAll = processSpiffBonusAll;
}; 