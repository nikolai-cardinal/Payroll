/**
* Payroll System - PBP Main Coordinator
* Contains the main entry point for PBP updates, coordinates calls
* to calculation and sheet operations, and handles status reporting.
* Now includes calculation functions originally from PBPCalculation.gs.
*/

// Standard initialization pattern - Create our namespace
var Modules = Modules || {};
Modules.PBP = Modules.PBP || {};

// Ensure global availability of main functions
// This needs to be at the top to ensure functions are globally accessible
var pbpMain_updatePBPForTechnician; // Forward declaration to make it discoverable
var pbpMain_processAllPBP; // Forward declaration to make it discoverable

/**
* Returns a standard mapping object for columns in the 'Main' sheet relevant to PBP.
*
* @return {Object} An object with keys for common fields (nameColumn, positionColumn, etc.)
*                  and values representing their 1-based column index and the data start row.
*/
function _getRatesSheetMappingPBP() {
  // These indices correspond to the columns in the Modules.Constants.SHEET.MAIN sheet
  // TODO: Consider moving these index numbers to Constants.gs if they are stable and reused elsewhere
  return {
    nameColumn: 1,       // Column A: Technician Name
    positionColumn: 3,   // Column C: Position (Used for Class 1 check)
    actionColumn: 7,     // Column G: Action Dropdown (Assuming this remains the PBP trigger column)
    dataStartRow: 3,     // Row number where the actual technician data begins
    exemptColumn: 5      // Column E: Exempt status flag (optional)
  };
}

/**
* Updates PBP for a specific technician when Action is set to PBP.
* This is the main entry point called from the module index or triggers.
* @param {string} technicianName - The name of the technician to update.
* @param {number} actionRow - The row in the Main sheet where the action was triggered.
* @param {number} actionColumn - The column in the Main sheet where the action was triggered.
* @param {Object} [options={}] Optional configuration object.
* @param {boolean} [options.skipStatusUpdate=false] - Flag to skip status updates (for batch processing).
* @param {boolean} [options.suppressPopup=false] - Flag to suppress popup notifications.
* @return {object|null} Result object with entryCount and totalAmount if successful, null otherwise.
*/
function pbpMain_updatePBPForTechnician(technicianName, actionRow, actionColumn, options) {
  // Ensure options is always an object
  options = options || {};
  const { skipStatusUpdate = false, suppressPopup = false } = options;
  const ui = SpreadsheetApp.getUi();
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  let techSheet;
  let ratesSheet;
  let spiffBonusSheet;
  const summaryInfo = []; // Array to collect detailed information for the popup

  try {
    // --- 1. Setup and Sheet Validation ---
    ratesSheet = ss.getSheetByName(Modules.Constants.SHEET.MAIN); // Use Constant
    spiffBonusSheet = ss.getSheetByName(Modules.Constants.SHEET.SPIFF); // Use Constant
    techSheet = ss.getSheetByName(technicianName);

    if (!ratesSheet) throw new Error(`Required sheet not found: ${Modules.Constants.SHEET.MAIN}`);
    if (!spiffBonusSheet) throw new Error(`Required sheet not found: ${Modules.Constants.SHEET.SPIFF}`);
    if (!techSheet) throw new Error(`Required sheet not found for Technician: ${technicianName}`);

    // Set status to Processing if not skipping status updates
    if (!skipStatusUpdate && actionRow && actionColumn) {
      Modules.Shared.SheetUtils.setActionStatus(ratesSheet, actionRow, actionColumn, "Processing..."); // Use Shared Util
    }

    // --- Check if the technician is Class 1 and skip if so ---
    try {
      const ratesMapping = _getRatesSheetMappingPBP(); // Use local mapping getter
      const ratesDataForCheck = ratesSheet.getRange(
        ratesMapping.dataStartRow,
        ratesMapping.nameColumn,
        ratesSheet.getLastRow() - ratesMapping.dataStartRow + 1,
        ratesMapping.positionColumn // Read up to the position column
      ).getValues();

      let technicianRowData = null;
      for (let i = 0; i < ratesDataForCheck.length; i++) {
        // Check name in nameColumn (index 0 in the slice)
        if (ratesDataForCheck[i][0] && ratesDataForCheck[i][0].toString().trim().toLowerCase() === technicianName.toLowerCase()) {
          // Get position from positionColumn (index 2 in the slice, since name is 0, B is 1, C is 2)
          technicianRowData = { name: ratesDataForCheck[i][0], position: ratesDataForCheck[i][ratesMapping.positionColumn - ratesMapping.nameColumn] };
          break;
        }
      }


      if (technicianRowData) {
        const title = technicianRowData.position;
        // Resolve technician class & role with safe fallbacks.
        var _getClassAndRole = (Modules.Shared && Modules.Shared.TechnicianUtils &&
                               typeof Modules.Shared.TechnicianUtils.getTechnicianClassAndRole === 'function')
                              ? Modules.Shared.TechnicianUtils.getTechnicianClassAndRole
                              : (typeof getClassAndRoleFromTitle === 'function'
                                  ? getClassAndRoleFromTitle
                                  : function() { return { class: 0, role: 'None', isEligible: false }; });

        const techInfo = _getClassAndRole(title);

        if (techInfo.class === 1) {
          console.log(`Skipping PBP processing for Class 1 technician: ${technicianName}`);

          // Update summary to 0 and clear section
          Modules.PBP.updateTopSummaryInstallPay(techSheet, 0, 0);
          Modules.PBP.clearInstallDataSection(techSheet);

          // Set status to Complete if not skipping status updates
          if (!skipStatusUpdate && actionRow && actionColumn) {
            Modules.Shared.SheetUtils.setActionStatus(ratesSheet, actionRow, actionColumn, "Complete");
          }

          // Show popup with info about skipping
          if (!suppressPopup) {
            ui.alert(`PBP processing skipped for ${technicianName}.\n\nReason: Class 1 technicians are not eligible for PBP.`);
          }
          return { entryCount: 0, totalAmount: 0 }; // Exit the function early, return standard object
        }
      } else {
         console.warn(`Could not find technician ${technicianName} in rates sheet for Class 1 check.`);
      }
    } catch (e) {
      console.error(`Error checking Class 1 status: ${e.message} ${e.stack}`);
      // Continue with processing to be safe, but log the error
    }
    // --- End Class 1 Check ---

    // Get Data for lookups - Fetch ONCE for efficiency
    const spiffBonusData = spiffBonusSheet.getDataRange().getValues();
    const ratesData = ratesSheet.getDataRange().getValues(); // Used for default splits

    // --- 2. Perform Calculations (Using integrated function) ---
    console.log("Starting PBP calculation for: " + technicianName);
    // Direct function call
    const calculationResult = calculatePbpEntries(technicianName, spiffBonusData, ratesData);

    const allPbpEntries = calculationResult.entries;
    const totalTechnicianShare = calculationResult.totalShare;
    console.log("Calculation complete. Entries found: " + allPbpEntries.length + ", Total Share: $" + totalTechnicianShare.toFixed(2));

    // --- 3. Handle No Entries Found ---
    if (allPbpEntries.length === 0) {
      const techExists = ratesData.some(rateRow =>
           rateRow[0] && rateRow[0].toString().trim().toLowerCase() === technicianName.trim().toLowerCase()
      );
      if (techExists) {
         if (!suppressPopup) {
           ui.alert("No PBP entries found for " + technicianName + " in the Spiff/Bonus tab for this period.");
         }
         // Update summary to 0 and clear section
         Modules.PBP.updateTopSummaryInstallPay(techSheet, 0, 0);
         Modules.PBP.clearInstallDataSection(techSheet);
         if (!skipStatusUpdate && actionRow && actionColumn) {
            Modules.Shared.SheetUtils.setActionStatus(ratesSheet, actionRow, actionColumn, "Complete"); // Mark as complete even if 0 entries
         }
      } else {
         if (!suppressPopup) {
           ui.alert("Technician " + technicianName + ` not found in ${Modules.Constants.SHEET.MAIN} tab.`); // Use Constant
         }
         if (!skipStatusUpdate && actionRow && actionColumn) {
            Modules.Shared.SheetUtils.setActionStatus(ratesSheet, actionRow, actionColumn, "⚠️ Error");
         }
      }
      return { entryCount: 0, totalAmount: 0 }; // Return standard object
    }

    // --- 4. Update Technician Sheet (Delegate to PBPUtilities.gs now) ---
    console.log("Starting sheet update for: " + technicianName);
    // Using updated namespace
    Modules.PBP.writePbpDataToSheet(techSheet, allPbpEntries, totalTechnicianShare);
    console.log("Sheet update finished for: " + technicianName);

    // --- 5. Prepare and Show Summary Popup ---
    if (!suppressPopup) {
        summaryInfo.push("PBP Update for: " + technicianName);
        // Add apprentice information if applicable
        const isApprentice = allPbpEntries.length > 0 && allPbpEntries[0].isApprentice;
        if (isApprentice) {
        const apprenticePercentage = allPbpEntries[0].apprenticePercentage;
        summaryInfo.push("Apprentice Technician (Tracked at " + apprenticePercentage + "%)");
        }
        summaryInfo.push("Total Calculated PBP Share: $" + totalTechnicianShare.toFixed(2));
        summaryInfo.push("Number of PBP Entries Processed: " + allPbpEntries.length);
        summaryInfo.push("\nPBP DETAILS:");

        // Build detailed summary string
        for (let k = 0; k < allPbpEntries.length; k++) {
            const entry = allPbpEntries[k];
            summaryInfo.push("\nEntry #" + (k+1) + ":");
            summaryInfo.push("• Customer: " + entry.customerName);
            // Assuming formatDate is in Shared.DateUtils
            summaryInfo.push("• Date: " + formatDateSafe(entry.completionDate));
            summaryInfo.push("• Item: " + entry.itemName);
            summaryInfo.push("• Job Total PBP: $" + entry.totalPbp.toFixed(2));
            summaryInfo.push("• Tech Role (Job): " + entry.roleForJob + " (" + entry.splitPercentage.toFixed(1) + "%)");
            summaryInfo.push("• Calculated Tech Share: $" + entry.technicianShare.toFixed(2));

            if (entry.teamDetails) {
                summaryInfo.push("• Team Split Details: " + entry.teamDetails);
            } else {
                summaryInfo.push("• Split Team: Details unavailable");
            }
        }
        ui.alert(summaryInfo.join("\n"));
    }

    // --- 6. Final Status Update ---
    if (!skipStatusUpdate && actionRow && actionColumn) {
      Modules.Shared.SheetUtils.setActionStatus(ratesSheet, actionRow, actionColumn, "Complete");
    }

    // --- 7. Return Result ---
    return { entryCount: allPbpEntries.length, totalAmount: totalTechnicianShare };

  } catch (error) {
    console.error("Error updating PBP for " + technicianName + ": " + error.message + " Stack: " + error.stack);
    const errorMsg = "Error updating PBP: " + error.toString();
    if (!suppressPopup) {
      ui.alert(errorMsg);
    }
    // Attempt to set error status
    try {
      const sheetForError = ratesSheet || ss.getActiveSheet(); // Fallback
      if (!skipStatusUpdate && actionRow && actionColumn && sheetForError) {
         Modules.Shared.SheetUtils.setActionStatus(sheetForError, actionRow, actionColumn, "⚠️ Error");
      }
    } catch (e) {
      console.error("Failed to set error status: " + e.message);
    }
    return null; // Indicate failure
  }
}

/**
* Processes PBP for all technicians listed in the Main sheet.
* Called from the Technician Tools menu or the module index.
* @param {Array<string>} [technicianList] Optional list of technicians to process (only those with sheets)
*/
function pbpMain_processAllPBP(technicianList) {
  const ui = SpreadsheetApp.getUi();
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const ratesSheet = ss.getSheetByName(Modules.Constants.SHEET.MAIN); // Use Constant
  let successCount = 0;
  let errorCount = 0;
  let skippedCount = 0; // Count sheets skipped because they don't exist
  let class1SkippedCount = 0; // Count Class 1 skips
  const techniciansProcessed = [];
  const errors = [];
  let totalAmount = 0;

  if (!ratesSheet) {
    ui.alert(`Error: Could not find '${Modules.Constants.SHEET.MAIN}' sheet.`); // Use Constant
    return;
  }

  // Use provided technician list or build filtered list with sheet existence check
  let techniciansToProcess = technicianList || [];
  if (!technicianList || technicianList.length === 0) {
    // Get all sheet names to check for existence efficiently
    const allSheets = ss.getSheets();
    const sheetNameSet = new Set(allSheets.map(sheet => sheet.getName())); // Use Set for faster lookups
    
    // Use local mapping
    const ratesMapping = _getRatesSheetMappingPBP();

    // Fetch full data once (name + exempt status, etc.)
    const allRatesData = ratesSheet.getDataRange().getValues();
    
    // Build filtered list of technicians with sheets
    for (let i = ratesMapping.dataStartRow - 1; i < allRatesData.length; i++) {
      const row = allRatesData[i];
      const techName = row[ratesMapping.nameColumn - 1];
      const exemptFlag = row[ratesMapping.exemptColumn - 1];

      // Skip blank names or exempt employees
      if (!techName || typeof techName !== 'string' || techName.trim() === '' || String(exemptFlag).trim().toLowerCase() === 'exempt') {
        continue;
      }
      const trimmedTechName = techName.trim();
      
      // Only add technicians who have sheets
      if (sheetNameSet.has(trimmedTechName)) {
        techniciansToProcess.push(trimmedTechName);
      } else {
        console.log(`Skipping ${trimmedTechName} - no sheet exists`);
        skippedCount++;
      }
    }
  }

  // Log the number of technicians that will be processed
  console.log(`Processing PBP for ${techniciansToProcess.length} technicians with sheets`);
  
  // Now process only technicians in our filtered list
  for (let i = 0; i < techniciansToProcess.length; i++) {
    const trimmedTechName = techniciansToProcess[i];
    
    try {
      const result = pbpMain_updatePBPForTechnician(trimmedTechName, null, null, {
        skipStatusUpdate: true,
        suppressPopup: true
      });

      if (result !== null) {
        successCount++;
        techniciansProcessed.push({
          name: trimmedTechName,
          count: result.entryCount || 0,
          amount: result.totalAmount || 0
        });
        totalAmount += (result.totalAmount || 0);
      } else {
        errorCount++;
        errors.push(`${trimmedTechName}: Processing error (see logs)`);
      }
    } catch (error) {
      console.error(`Unhandled error processing PBP for ${trimmedTechName}: ${error.message} ${error.stack}`);
      errorCount++;
      errors.push(`${trimmedTechName}: ${error.message}`);
    }
  }

  // Build pretty summary message
  const summaryMessage = ["PBP BATCH PROCESSING COMPLETE"];
  summaryMessage.push("\nSUMMARY:");
  summaryMessage.push(`• Technicians Processed Successfully: ${successCount}`);
  summaryMessage.push(`• Technicians Skipped (No Sheet): ${skippedCount}`);
  summaryMessage.push(`• Technicians with Errors: ${errorCount}`);
  summaryMessage.push(`• Total PBP Amount Calculated: $${totalAmount.toFixed(2)}`);

  const successfulEntries = techniciansProcessed.filter(t => t.count > 0);
  if (successfulEntries.length > 0) {
    summaryMessage.push("\nDETAILS BY TECHNICIAN (with entries):");
    successfulEntries.forEach(tech => {
      summaryMessage.push(`\n  ${tech.name}:`);
      summaryMessage.push(`  • Entries: ${tech.count}`);
      summaryMessage.push(`  • Amount: $${tech.amount.toFixed(2)}`);
    });
  }

  if (errors.length > 0) {
    summaryMessage.push("\nERRORS ENCOUNTERED:");
    errors.forEach(err => summaryMessage.push(`• ${err}`));
  }

  ui.alert(summaryMessage.join("\n"));
}

// --- CALCULATION FUNCTIONS FROM PBPCalculation.gs ---

/**
* Processes PBP entries from Spiff/Bonus data and calculates shares based on new class/role logic.
* @param {string} technicianName - The name of the technician being processed.
* @param {Array<Array>} spiffBonusData - 2D array of data from 'Spiff/Bonus' sheet.
* @param {Array<Array>} ratesData - 2D array of data from Modules.Constants.SHEET.MAIN sheet.
* @return {object} An object containing { entries: Array<object>, totalShare: number }.
*/
function calculatePbpEntries(technicianName, spiffBonusData, ratesData) {
  var techCache = Modules.PBP.Helpers.buildTechDetailsCache(ratesData);
  var processed = {};
  var resultEntries = [];
  var totalShare = 0;

  for (var r = 1; r < spiffBonusData.length; r++) {
    var row = spiffBonusData[r];
    var pbpAmount = Modules.PBP.Helpers.parsePbpAmount(row[9]); // Col J – Cross-Sale Group
    if (!pbpAmount) continue;

    var namesInfo = Modules.PBP.Helpers.getUniqueTechNames(row[6], row[7]);
    if (!namesInfo.lowerSet.has(technicianName.toLowerCase())) continue;

    var key = [row[1], row[3], row[10], pbpAmount].join('|');
    if (processed[key]) continue;
    processed[key] = true;

    var jobTechs = Modules.PBP.Helpers.computeJobTechnicians(namesInfo.uniqueNames, techCache, pbpAmount);
    var target = jobTechs.find(function(t){ return t.name.toLowerCase() === technicianName.toLowerCase(); });
    if (!target) continue;

    resultEntries.push({
      customerName: row[1],
      jobBusinessUnit: row[2],
      completionDate: row[3],
      itemName: row[10],
      totalPbp: pbpAmount,
      technicianShare: target.payout,
      roleForJob: target.finalRole,
      splitPercentage: target.splitPercent,
      isEligible: target.isEligible,
      teamDetails: jobTechs.map(function(t){return t.name+" (C"+t.class+"/"+t.finalRole+"/"+t.splitPercent.toFixed(1)+"%)";}).join(', ')
    });
    totalShare += target.payout;
  }

  return { entries: resultEntries, totalShare: totalShare };
}

// Make functions available globally for direct menu calls
function updatePBPForTechnician(technicianName) {
  return pbpMain_updatePBPForTechnician(technicianName, null, null, {});
}

function processAllPBP() {
  return pbpMain_processAllPBP();
}

// Make functions available through the Modules.PBP namespace for programmatic access
Modules.PBP.updatePBPForTechnician = pbpMain_updatePBPForTechnician;
Modules.PBP.processAllPBP = pbpMain_processAllPBP;

// Ensure functions are added to the global scope to be found by other modules
this.pbpMain_updatePBPForTechnician = pbpMain_updatePBPForTechnician;
this.pbpMain_processAllPBP = pbpMain_processAllPBP;

// Menu-specific global function
function processAllPBPGlobal() {
  return pbpMain_processAllPBP();
}

/**
 * Local fallback date formatting function in case Modules.Shared.DateUtils is not available
 * Formats a date as a string using MM/dd/yyyy format
 * 
 * @param {*} date - The date to format, can be Date object, string, or number
 * @return {string} Formatted date string
 */
function formatDateSafe(date) {
  try {
    // First try to parse the date if it's not already a Date object
    var dateObj;
    if (date instanceof Date) {
      dateObj = date;
    } else if (typeof date === 'number') {
      // Convert Google Sheets serial number to Date
      dateObj = new Date(Math.round((date - 25569) * 86400000));
    } else if (typeof date === 'string') {
      dateObj = new Date(date);
    } else {
      return String(date || ''); // If all else fails, return as string
    }
    
    // Check if date is valid
    if (isNaN(dateObj.getTime())) {
      return String(date || '');
    }
    
    // Format the date as MM/dd/yyyy
    var month = (dateObj.getMonth() + 1).toString().padStart(2, '0');
    var day = dateObj.getDate().toString().padStart(2, '0');
    var year = dateObj.getFullYear();
    
    return month + '/' + day + '/' + year;
  } catch (e) {
    console.error("Error formatting date: " + e.message);
    return String(date || '');
  }
}