Payroll → Technician KPI Data Pull (Google Apps Script)

Goal

When the Payroll script runs for a technician inside your Payroll Spreadsheet, automatically:
	1.	Read the pay‑period text in Main!F1 (example 3/22 - 3/30).
	2.	Use the same start / end dates to filter rows in another Google Sheet (ID 1wRbNnKsiD2xEs6CFFFKOuFQnTxQUt8jvcJsowoDfssg, tab Data) where the payroll date lives in column N.
	3.	From those matching rows, take the percentage value in column P only for the active technician.
	4.	Write the technician's average percentage into their individual tab at cell B15.

Quick‑Reference Variables

PAYROLL_SSID   = SpreadsheetApp.getActiveSpreadsheet()
EXTERNAL_SSID  = '1wRbNnKsiD2xEs6CFFFKOuFQnTxQUt8jvcJsowoDfssg'
PAY_PERIOD_CELL= 'Main!F1'
EXTERNAL_TAB   = 'Data'
DATE_COL_N     = 14   // zero‑based index 13 ➜ column N
PCT_COL_P      = 16   // zero‑based index 15 ➜ column P
TECH_SHEET_CELL= 'B15' // inside each tech sheet



⸻

Micro‑Workflow in Cursor

Notation
⌘K = open Cursor command palette
// $ = inline prompt comment that Cursor AI will execute when you hit Tab.

1 · Create the new GAS file
	1.	Press ⌘K → "Create file" → PayrollDataPull.gs ▶︎ Enter.
	2.	Immediately paste the following inline prompt and hit Tab:

// $ Insert starter code template for pulling KPI % from external sheet as described in spec.

Cursor will generate a skeleton; if it stalls, paste the finished code from Step 2 below.

2 · Replace the skeleton with this finished code

/**
 * pullTechnicianKPI – grabs avg % from external "Data" sheet for the active tech.
 * @param {string} techName The technician's exact display name.
 * @return {number} Average percentage or 0.
 */
function pullTechnicianKPI(techName) {
  const extSS   = SpreadsheetApp.openById('1wRbNnKsiD2xEs6CFFFKOuFQnTxQUt8jvcJsowoDfssg');
  const dataSh  = extSS.getSheetByName('Data');
  const data    = dataSh.getDataRange().getValues();

  // 1️⃣ Grab pay‑period range from active payroll file
  const payrollSS = SpreadsheetApp.getActiveSpreadsheet();
  const periodStr = payrollSS.getSheetByName('Main')
                         .getRange('F1').getDisplayValue(); // ex "3/22 - 3/30"

  const { start, end } = parseDateRange(periodStr);

  // 2️⃣ Identify column indexes (zero‑based)
  const header   = data[0];
  const DATE_COL = 13; // column N
  const PCT_COL  = 15; // column P
  const TECH_COL = header.findIndex(h => h.toString().trim().toLowerCase() === 'technician');

  let sum = 0, count = 0;
  for (let i = 1; i < data.length; i++) {
    const row = data[i];
    const rowDate = new Date(row[DATE_COL]);
    if (rowDate >= start && rowDate <= end && row[TECH_COL] === techName) {
      const pct = parseFloat(row[PCT_COL]);
      if (!isNaN(pct)) { sum += pct; count++; }
    }
  }
  const avg = count ? sum / count : 0;

  // 3️⃣ Write result into the technician sheet
  const techSh = payrollSS.getSheetByName(techName);
  if (techSh) techSh.getRange('B15').setValue(avg);
  return avg;
}

/**
 * parseDateRange – converts "3/22 - 3/30" → {start:Date, end:Date}
 * Infers year from today if not supplied.
 */
function parseDateRange(rangeStr) {
  const [s, e] = rangeStr.split('-').map(p => p.trim());
  const year = new Date().getFullYear();
  const start = new Date(`${s}/${year}`);
  const end   = new Date(`${e}/${year}`);
  // Normalise to midnight for safe comparisons
  start.setHours(0,0,0,0); end.setHours(23,59,59,999);
  return { start, end };
}

3 · Hook it into the existing Payroll flow

In whichever file hosts runPayroll() (or similar):

function runPayrollForTechnician(techName) {
  // … existing payroll logic …

  // NEW: pull KPI % & drop into sheet
  pullTechnicianKPI(techName);
}

Cursor prompt:

// $ Inside runPayrollForTechnician(), call pullTechnicianKPI(techName) after totals are written.

4 · Deploy & Test
	1.	Run → runPayrollForTechnician('John Smith') in Apps Script UI.
	2.	Confirm John Smith tab cell B15 shows a sensible % (e.g. 0.83).
	3.	Change Main!F1 to another range, rerun, verify value changes.

⸻

Troubleshooting Tips
	•	If avg returns 0, double‑check:
	•	Technician name spelling matches column G in Data.
	•	Column P truly contains numeric % values (not strings like "83%" – strip % first if so).
	•	Date range string has no year; the helper infers the current‑year.
	•	Use Logger.log({rowDate, start, end}) inside the loop to debug date filtering.

⸻

Done!

You now have an automatic cross‑sheet KPI pull that feeds directly into each technician's payroll tab whenever Payroll runs.

Happy coding 🚀