# Project Update â€“ Service Feature Integration and Menu Enhancements

_Last updated: {{DATE}}_

## 1. Overview of Changes

1. **Technician Tools Menu**
   * Added a new static menu entry **"Service"** under the root `ðŸšš Technician Tools` menu.
   * The entry is appended in `src/core/Menu` and bound to a new handler `servicePrompt`.

2. **Main Trigger-Layer Enhancements (`src/core/Main`)**
   * Implemented `servicePrompt()` following existing prompt patterns (e.g. `timesheetPrompt`).
   * Logic:
     * Presents a **Yes / No** dialog: _Process Service for EVERYONE or an INDIVIDUAL technician?_
     * **Batch path (Yes)** â€“ delegates to (in order):
       1. Global `processAllServices` function (legacy compatibility).
       2. `Modules.Service.processAll()`.
       3. `Modules.Service.Main.processAllServices()` (deep-namespace fallback).
     * **Individual path (No)** â€“ prompts for technician name and attempts:
       1. `Modules.Service.processForTechnician(name)`.
       2. Global `updateServiceForTechnician(name)` (legacy).
       3. `Modules.Service.Main.processServiceForTechnician(name)` (fallback).
   * Registered `servicePrompt` inside the exported `Modules.Main` map.
   * Added **Service** to both `runFullPayroll` and `runIndividualPayroll` sequences, ensuring Service metrics are processed automatically whenever payroll is executed (batch or individual).
   * Maintained the 500-line policy by inserting the new function near existing prompt block (no business logic added).

3. **New Service Module**
   * **Folder:** `src/modules/Service/`
   * **File:** `Service_Feature` ( Apps Script file, no `.gs` extension per Rule 17 ).
   * Provides two public functions:
     * `Modules.Service.processForTechnician(techName)` â€“ copies metrics from the global **Service** sheet to the technician's sheet:
       * Source columns on `Service` sheet:
         * **A** â€“ Technician name
         * **D** â€“ **Total Sales**
         * **E** â€“ **Completed Revenue**
       * Destination on technician sheet:
         * `C16` â€“ Completed Revenue
         * `C17` â€“ Total Sales
     * `Modules.Service.processAll(technicianList?)` â€“ iterates through each technician listed on the `Service` sheet (or the provided list) and calls `processForTechnician`.
   * Constants:
     * Reads `Modules.Constants.SHEET.SERVICE` if available, otherwise defaults to literal `'Service'`.
   * Defensive coding:
     * Validates sheet existence and technician presence.
     * Gracefully logs errors through `Modules.Shared.PayrollLogger` where available.
   * Linter compliance:
     * Added `/* global SpreadsheetApp */` header and referenced API via `globalThis.SpreadsheetApp`.

4. **File-Structure Awareness**
   * Created the **Service** folder without introducing any new sub-folders.
   * No duplicate menu items introduced (Rule 22). All checks for existing definitions were done before insertion.
   * Documentation updated here per Rule 13.

## 2. How to Use the New Service Feature

1. Open the spreadsheet; on `onOpen` the root menu will load.
2. Navigate to `ðŸšš Technician Tools â†’ Service`.
3. Choose **Yes** to run for everyone or **No** to process a single technician.
4. Ensure the global `Service` sheet exists with the expected column layout.

## 3. Future Considerations / TODO

* Implement or migrate the legacy global helpers `processAllServices` and `updateServiceForTechnician` if still required by external scripts.
* Add e2e tests in `tests/` to validate cell mapping.
* Update central `Constants` module to include `SHEET.SERVICE` once defined (Rule 14).

---

> _Generated automatically by the coding assistant to reflect the latest codebase updates._
